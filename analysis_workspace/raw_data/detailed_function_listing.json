{
    "metadata": {
        "generated_at": "2025-09-19T15:44:32+02:00",
        "analyzer_version": "2.0.0",
        "analysis_type": "detailed_function_listing",
        "project_name": "Laravel Insurance Management System"
    },
    "summary": {
        "total_classes": 138,
        "total_methods": 890,
        "total_parameters": 513,
        "avg_methods_per_class": 6.45,
        "method_categories": {
            "repository_methods": 115,
            "service_methods": 348,
            "controller_methods": 220,
            "model_methods": 175,
            "interface_methods": 32
        }
    },
    "repositories": {
        "implementations": [
            {
                "file_path": "app/Repositories/AbstractBaseRepository.php",
                "class_info": {
                    "class_name": "AbstractBaseRepository",
                    "extends": "",
                    "implements": [
                        "BaseRepositoryInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Repositories\\BaseRepositoryInterface",
                        "Illuminate\\Database\\Eloquent\\Model",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "($search) {\r\n                foreach ($this->searchableFields as $field) {\r\n                    $q->orWhere($field, 'LIKE', '%' . $search . '%')"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getPaginated",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$perPage",
                                "default": "10",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "LengthAwarePaginator",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPaginated(Request $request, int $perPage = 10): LengthAwarePaginator"
                    },
                    {
                        "name": "create",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Model",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function create(array $data): Model"
                    },
                    {
                        "name": "update",
                        "parameters": [
                            {
                                "type": "Model",
                                "name": "$entity",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "Model",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function update(Model $entity, array $data): Model"
                    },
                    {
                        "name": "delete",
                        "parameters": [
                            {
                                "type": "Model",
                                "name": "$entity",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function delete(Model $entity): bool"
                    },
                    {
                        "name": "findById",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$id",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "?Model",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function findById(int $id): ?Model"
                    },
                    {
                        "name": "updateStatus",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$id",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$status",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateStatus(int $id, int $status): bool"
                    },
                    {
                        "name": "getActive",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getActive(): Collection"
                    },
                    {
                        "name": "getAllForExport",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getAllForExport(): Collection"
                    }
                ],
                "method_count": 8,
                "complexity_score": 4
            },
            {
                "file_path": "app/Repositories/AddonCoverRepository.php",
                "class_info": {
                    "class_name": "AddonCoverRepository",
                    "extends": "AbstractBaseRepository",
                    "implements": [
                        "AddonCoverRepositoryInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Repositories\\AddonCoverRepositoryInterface",
                        "App\\Models\\AddonCover"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [],
                "method_count": 0,
                "complexity_score": 0
            },
            {
                "file_path": "app/Repositories/BranchRepository.php",
                "class_info": {
                    "class_name": "BranchRepository",
                    "extends": "AbstractBaseRepository",
                    "implements": [
                        "BranchRepositoryInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Repositories\\BranchRepositoryInterface",
                        "App\\Models\\Branch",
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Pagination\\LengthAwarePaginator",
                        "($search) {\r\n                $q->where('name', 'like', \"%{$search}%\")\r\n                  ->orWhere('email', 'like', \"%{$search}%\")\r\n                  ->orWhere('mobile_number', 'like', \"%{$search}%\")",
                        "($searchTerm) {\r\n                $query->where('name', 'like', \"%{$searchTerm}%\")\r\n                      ->orWhere('email', 'like', \"%{$searchTerm}%\")"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getBranchesWithFilters",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$perPage",
                                "default": "15",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "LengthAwarePaginator",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getBranchesWithFilters(Request $request, int $perPage = 15): LengthAwarePaginator"
                    },
                    {
                        "name": "getBranchesByStatus",
                        "parameters": [
                            {
                                "type": "bool",
                                "name": "$status",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getBranchesByStatus(bool $status): Collection"
                    },
                    {
                        "name": "getActiveBranches",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getActiveBranches(): Collection"
                    },
                    {
                        "name": "getBranchWithInsurancesCount",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$branchId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "?Branch",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getBranchWithInsurancesCount(int $branchId): ?Branch"
                    },
                    {
                        "name": "searchBranches",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$searchTerm",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$limit",
                                "default": "20",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function searchBranches(string $searchTerm, int $limit = 20): Collection"
                    },
                    {
                        "name": "getBranchStatistics",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getBranchStatistics(): array"
                    }
                ],
                "method_count": 6,
                "complexity_score": 3
            },
            {
                "file_path": "app/Repositories/BrokerRepository.php",
                "class_info": {
                    "class_name": "BrokerRepository",
                    "extends": "AbstractBaseRepository",
                    "implements": [
                        "BrokerRepositoryInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Repositories\\BrokerRepositoryInterface",
                        "App\\Models\\Broker"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [],
                "method_count": 0,
                "complexity_score": 0
            },
            {
                "file_path": "app/Repositories/ClaimRepository.php",
                "class_info": {
                    "class_name": "ClaimRepository",
                    "extends": "AbstractBaseRepository",
                    "implements": [
                        "ClaimRepositoryInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Repositories\\ClaimRepositoryInterface",
                        "App\\Models\\Claim",
                        "Illuminate\\Database\\Eloquent\\Builder",
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Pagination\\LengthAwarePaginator",
                        "($search) {\r\n                $q->where('claim_number', 'like', \"%{$search}%\")\r\n                  ->orWhere('description', 'like', \"%{$search}%\")\r\n                  ->orWhereHas('customer', function (Builder $customerQuery) use ($search) {\r\n                      $customerQuery->where('name', 'like', \"%{$search}%\")\r\n                                   ->orWhere('email', 'like', \"%{$search}%\")\r\n                                   ->orWhere('mobile_number', 'like', \"%{$search}%\")",
                        "($search) {\r\n                      $insuranceQuery->where('policy_no', 'like', \"%{$search}%\")\r\n                                    ->orWhere('registration_no', 'like', \"%{$search}%\")",
                        "($searchTerm) {\r\n                $query->where('claim_number', 'like', \"%{$searchTerm}%\")\r\n                      ->orWhere('description', 'like', \"%{$searchTerm}%\")\r\n                      ->orWhereHas('customer', function (Builder $customerQuery) use ($searchTerm) {\r\n                          $customerQuery->where('name', 'like', \"%{$searchTerm}%\")\r\n                                       ->orWhere('email', 'like', \"%{$searchTerm}%\")\r\n                                       ->orWhere('mobile_number', 'like', \"%{$searchTerm}%\")"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getClaimsWithFilters",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$perPage",
                                "default": "15",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "LengthAwarePaginator",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getClaimsWithFilters(Request $request, int $perPage = 15): LengthAwarePaginator"
                    },
                    {
                        "name": "getClaimsByStatus",
                        "parameters": [
                            {
                                "type": "bool",
                                "name": "$status",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getClaimsByStatus(bool $status): Collection"
                    },
                    {
                        "name": "getClaimsByInsuranceType",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$insuranceType",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getClaimsByInsuranceType(string $insuranceType): Collection"
                    },
                    {
                        "name": "getClaimsByDateRange",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$dateFrom",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "string",
                                "name": "$dateTo",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getClaimsByDateRange(string $dateFrom, string $dateTo): Collection"
                    },
                    {
                        "name": "getClaimStatistics",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getClaimStatistics(): array"
                    },
                    {
                        "name": "searchClaims",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$searchTerm",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$limit",
                                "default": "20",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function searchClaims(string $searchTerm, int $limit = 20): Collection"
                    },
                    {
                        "name": "getClaimsByCustomer",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$customerId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getClaimsByCustomer(int $customerId): Collection"
                    },
                    {
                        "name": "getClaimsByCustomerInsurance",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$customerInsuranceId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getClaimsByCustomerInsurance(int $customerInsuranceId): Collection"
                    },
                    {
                        "name": "generateClaimNumber",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function generateClaimNumber(): string"
                    }
                ],
                "method_count": 9,
                "complexity_score": 4.5
            },
            {
                "file_path": "app/Repositories/CustomerInsuranceRepository.php",
                "class_info": {
                    "class_name": "CustomerInsuranceRepository",
                    "extends": "AbstractBaseRepository",
                    "implements": [
                        "CustomerInsuranceRepositoryInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Repositories\\CustomerInsuranceRepositoryInterface",
                        "App\\Models\\CustomerInsurance",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Carbon\\Carbon",
                        "($search) {\r\n                $q->where('customers.name', 'LIKE', '%' . $search . '%')\r\n                  ->orWhere('customer_insurances.policy_no', 'LIKE', '%' . $search . '%')\r\n                  ->orWhere('customer_insurances.registration_no', 'LIKE', '%' . $search . '%')"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getPaginated",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$perPage",
                                "default": "10",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "LengthAwarePaginator",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPaginated(Request $request, int $perPage = 10): LengthAwarePaginator"
                    },
                    {
                        "name": "findWithRelations",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$id",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$relations",
                                "default": "[]",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "?CustomerInsurance",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function findWithRelations(int $id, array $relations = []): ?CustomerInsurance"
                    },
                    {
                        "name": "getByCustomerId",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$customerId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getByCustomerId(int $customerId): Collection"
                    },
                    {
                        "name": "getAllForExport",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getAllForExport(): Collection"
                    },
                    {
                        "name": "getExpiringPolicies",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$days",
                                "default": "30",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getExpiringPolicies(int $days = 30): Collection"
                    },
                    {
                        "name": "getActiveCustomerInsurances",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getActiveCustomerInsurances(): Collection"
                    }
                ],
                "method_count": 6,
                "complexity_score": 3
            },
            {
                "file_path": "app/Repositories/CustomerRepository.php",
                "class_info": {
                    "class_name": "CustomerRepository",
                    "extends": "AbstractBaseRepository",
                    "implements": [
                        "CustomerRepositoryInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Repositories\\CustomerRepositoryInterface",
                        "App\\Models\\Customer",
                        "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Illuminate\\Http\\Request",
                        "($searchTerm) {\r\n                $q->where('name', 'LIKE', $searchTerm)\r\n                  ->orWhere('email', 'LIKE', $searchTerm)\r\n                  ->orWhere('mobile_number', 'LIKE', $searchTerm)"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getAll",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$filters",
                                "default": "[]",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getAll(array $filters = []): Collection"
                    },
                    {
                        "name": "getPaginated",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$perPage",
                                "default": "10",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "LengthAwarePaginator",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPaginated(Request $request, int $perPage = 10): LengthAwarePaginator"
                    },
                    {
                        "name": "findByEmail",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$email",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "?Customer",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function findByEmail(string $email): ?Customer"
                    },
                    {
                        "name": "findByMobileNumber",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$mobileNumber",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "?Customer",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function findByMobileNumber(string $mobileNumber): ?Customer"
                    },
                    {
                        "name": "update",
                        "parameters": [
                            {
                                "type": "Model",
                                "name": "$entity",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "\\Illuminate\\Database\\Eloquent\\Model",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function update(\\Illuminate\\Database\\Eloquent\\Model $entity, array $data): \\Illuminate\\Database\\Eloquent\\Model"
                    },
                    {
                        "name": "delete",
                        "parameters": [
                            {
                                "type": "Model",
                                "name": "$entity",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function delete(\\Illuminate\\Database\\Eloquent\\Model $entity): bool"
                    },
                    {
                        "name": "getByFamilyGroup",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$familyGroupId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getByFamilyGroup(int $familyGroupId): Collection"
                    },
                    {
                        "name": "getByType",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$type",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getByType(string $type): Collection"
                    },
                    {
                        "name": "search",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$query",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function search(string $query): Collection"
                    },
                    {
                        "name": "exists",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$id",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function exists(int $id): bool"
                    },
                    {
                        "name": "count",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "int",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function count(): int"
                    },
                    {
                        "name": "getActiveCustomers",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getActiveCustomers(): Collection"
                    },
                    {
                        "name": "getCustomersWithValidMobileNumbers",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getCustomersWithValidMobileNumbers(): Collection"
                    },
                    {
                        "name": "getCustomersByIds",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$ids",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getCustomersByIds(array $ids): Collection"
                    }
                ],
                "method_count": 14,
                "complexity_score": 7
            },
            {
                "file_path": "app/Repositories/FamilyGroupRepository.php",
                "class_info": {
                    "class_name": "FamilyGroupRepository",
                    "extends": "AbstractBaseRepository",
                    "implements": [
                        "FamilyGroupRepositoryInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Repositories\\FamilyGroupRepositoryInterface",
                        "App\\Models\\FamilyGroup",
                        "App\\Models\\Customer",
                        "App\\Models\\FamilyMember",
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Pagination\\LengthAwarePaginator",
                        "($search) {\r\n                $q->where('name', 'like', \"%{$search}%\")\r\n                  ->orWhereHas('familyHead', function ($subQ) use ($search) {\r\n                      $subQ->where('name', 'like', \"%{$search}%\")\r\n                           ->orWhere('email', 'like', \"%{$search}%\")",
                        "($customerId) {\r\n                $query->where('customer_id', $customerId)",
                        "($familyGroupId) {\r\n                $query->whereNull('family_group_id')\r\n                      ->orWhere('family_group_id', $familyGroupId)",
                        "($familyGroupId) {\r\n                $query->where('family_group_id', '!=', $familyGroupId)",
                        "($searchTerm) {\r\n                $query->where('name', 'like', \"%{$searchTerm}%\")\r\n                      ->orWhereHas('familyHead', function ($subQuery) use ($searchTerm) {\r\n                          $subQuery->where('name', 'like', \"%{$searchTerm}%\")\r\n                                   ->orWhere('email', 'like', \"%{$searchTerm}%\")"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getFamilyGroupsWithFilters",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$perPage",
                                "default": "15",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "LengthAwarePaginator",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getFamilyGroupsWithFilters(Request $request, int $perPage = 15): LengthAwarePaginator"
                    },
                    {
                        "name": "getFamilyGroupWithMembers",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$familyGroupId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "?FamilyGroup",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getFamilyGroupWithMembers(int $familyGroupId): ?FamilyGroup"
                    },
                    {
                        "name": "getFamilyGroupsByHead",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$familyHeadId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getFamilyGroupsByHead(int $familyHeadId): Collection"
                    },
                    {
                        "name": "getFamilyGroupsByCustomer",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$customerId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getFamilyGroupsByCustomer(int $customerId): Collection"
                    },
                    {
                        "name": "getAvailableCustomers",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getAvailableCustomers(): Collection"
                    },
                    {
                        "name": "getAvailableCustomersForEdit",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$familyGroupId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getAvailableCustomersForEdit(int $familyGroupId): Collection"
                    },
                    {
                        "name": "isCustomerInFamilyGroup",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$customerId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function isCustomerInFamilyGroup(int $customerId): bool"
                    },
                    {
                        "name": "getFamilyMembers",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$familyGroupId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getFamilyMembers(int $familyGroupId): Collection"
                    },
                    {
                        "name": "updateFamilyHead",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$familyGroupId",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$newFamilyHeadId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateFamilyHead(int $familyGroupId, int $newFamilyHeadId): bool"
                    },
                    {
                        "name": "removeCustomerFromFamilyGroup",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$customerId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function removeCustomerFromFamilyGroup(int $customerId): bool"
                    },
                    {
                        "name": "getFamilyGroupStatistics",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getFamilyGroupStatistics(): array"
                    },
                    {
                        "name": "searchFamilyGroups",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$searchTerm",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$limit",
                                "default": "20",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function searchFamilyGroups(string $searchTerm, int $limit = 20): Collection"
                    },
                    {
                        "name": "getAllFamilyGroupsWithRelationships",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getAllFamilyGroupsWithRelationships(): Collection"
                    }
                ],
                "method_count": 13,
                "complexity_score": 6.5
            },
            {
                "file_path": "app/Repositories/FuelTypeRepository.php",
                "class_info": {
                    "class_name": "FuelTypeRepository",
                    "extends": "AbstractBaseRepository",
                    "implements": [
                        "FuelTypeRepositoryInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Repositories\\FuelTypeRepositoryInterface",
                        "App\\Models\\FuelType"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [],
                "method_count": 0,
                "complexity_score": 0
            },
            {
                "file_path": "app/Repositories/InsuranceCompanyRepository.php",
                "class_info": {
                    "class_name": "InsuranceCompanyRepository",
                    "extends": "AbstractBaseRepository",
                    "implements": [
                        "InsuranceCompanyRepositoryInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Repositories\\InsuranceCompanyRepositoryInterface",
                        "App\\Models\\InsuranceCompany"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [],
                "method_count": 0,
                "complexity_score": 0
            },
            {
                "file_path": "app/Repositories/MarketingWhatsAppRepository.php",
                "class_info": {
                    "class_name": "MarketingWhatsAppRepository",
                    "extends": "AbstractBaseRepository",
                    "implements": [
                        "MarketingWhatsAppRepositoryInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Repositories\\MarketingWhatsAppRepositoryInterface",
                        "App\\Models\\MarketingWhatsApp",
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Pagination\\LengthAwarePaginator",
                        "($search) {\r\n                foreach ($this->searchableFields as $field) {\r\n                    $q->orWhere($field, 'like', \"%{$search}%\")",
                        "($searchTerm) {\r\n            foreach ($this->searchableFields as $field) {\r\n                $q->orWhere($field, 'like', \"%{$searchTerm}%\")"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getMarketingMessagesWithFilters",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$perPage",
                                "default": "15",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "LengthAwarePaginator",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getMarketingMessagesWithFilters(Request $request, int $perPage = 15): LengthAwarePaginator"
                    },
                    {
                        "name": "getMarketingMessagesByStatus",
                        "parameters": [
                            {
                                "type": "bool",
                                "name": "$status",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getMarketingMessagesByStatus(bool $status): Collection"
                    },
                    {
                        "name": "getMarketingMessagesByType",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$type",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getMarketingMessagesByType(string $type): Collection"
                    },
                    {
                        "name": "getTodayMarketingMessages",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getTodayMarketingMessages(): Collection"
                    },
                    {
                        "name": "getMarketingMessagesByDateRange",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$startDate",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "string",
                                "name": "$endDate",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getMarketingMessagesByDateRange(string $startDate, string $endDate): Collection"
                    },
                    {
                        "name": "getMarketingMessageStatistics",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getMarketingMessageStatistics(): array"
                    },
                    {
                        "name": "searchMarketingMessages",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$searchTerm",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$limit",
                                "default": "20",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function searchMarketingMessages(string $searchTerm, int $limit = 20): Collection"
                    },
                    {
                        "name": "getMarketingMessagesByPhoneNumber",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$phoneNumber",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getMarketingMessagesByPhoneNumber(string $phoneNumber): Collection"
                    },
                    {
                        "name": "getFailedMarketingMessages",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getFailedMarketingMessages(): Collection"
                    },
                    {
                        "name": "getAllMarketingMessagesForExport",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getAllMarketingMessagesForExport(): Collection"
                    },
                    {
                        "name": "markMessageAsSent",
                        "parameters": [
                            {
                                "type": "MarketingWhatsApp",
                                "name": "$marketingMessage",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "string",
                                "name": "$messageId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function markMessageAsSent(MarketingWhatsApp $marketingMessage, string $messageId): bool"
                    },
                    {
                        "name": "markMessageAsFailed",
                        "parameters": [
                            {
                                "type": "MarketingWhatsApp",
                                "name": "$marketingMessage",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "string",
                                "name": "$errorMessage",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function markMessageAsFailed(MarketingWhatsApp $marketingMessage, string $errorMessage): bool"
                    }
                ],
                "method_count": 12,
                "complexity_score": 6
            },
            {
                "file_path": "app/Repositories/PermissionRepository.php",
                "class_info": {
                    "class_name": "PermissionRepository",
                    "extends": "AbstractBaseRepository",
                    "implements": [
                        "PermissionRepositoryInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Repositories\\PermissionRepositoryInterface",
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Pagination\\LengthAwarePaginator",
                        "Spatie\\Permission\\Models\\Permission",
                        "($search) {\r\n                $q->where('name', 'like', \"%{$search}%\")\r\n                  ->orWhere('guard_name', 'like', \"%{$search}%\")",
                        "($roleId) {\r\n            $query->where('id', $roleId)",
                        "($roleId) {\r\n                $query->where('id', $roleId)"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getPermissionsWithFilters",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$perPage",
                                "default": "15",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "LengthAwarePaginator",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPermissionsWithFilters(Request $request, int $perPage = 15): LengthAwarePaginator"
                    },
                    {
                        "name": "getPermissionWithRoles",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$permissionId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "?Permission",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPermissionWithRoles(int $permissionId): ?Permission"
                    },
                    {
                        "name": "getPermissionsWithRolesCount",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPermissionsWithRolesCount(): Collection"
                    },
                    {
                        "name": "searchPermissions",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$searchTerm",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$limit",
                                "default": "20",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function searchPermissions(string $searchTerm, int $limit = 20): Collection"
                    },
                    {
                        "name": "getPermissionsByGuard",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$guardName",
                                "default": "'web'",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPermissionsByGuard(string $guardName = 'web'): Collection"
                    },
                    {
                        "name": "getPermissionsByModule",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$module",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPermissionsByModule(string $module): Collection"
                    },
                    {
                        "name": "getPermissionStatistics",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPermissionStatistics(): array"
                    },
                    {
                        "name": "getPermissionsByRole",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$roleId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPermissionsByRole(int $roleId): Collection"
                    },
                    {
                        "name": "getUnassignedPermissions",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$roleId",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "string",
                                "name": "$guardName",
                                "default": "'web'",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getUnassignedPermissions(int $roleId, string $guardName = 'web'): Collection"
                    }
                ],
                "method_count": 9,
                "complexity_score": 4.5
            },
            {
                "file_path": "app/Repositories/PolicyRepository.php",
                "class_info": {
                    "class_name": "PolicyRepository",
                    "extends": "AbstractBaseRepository",
                    "implements": [
                        "PolicyRepositoryInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Repositories\\PolicyRepositoryInterface",
                        "App\\Models\\CustomerInsurance",
                        "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Support\\Carbon",
                        "($searchTerm) {\r\n                $q->where('policy_number', 'LIKE', $searchTerm)\r\n                  ->orWhereHas('customer', function ($customerQuery) use ($searchTerm) {\r\n                      $customerQuery->where('name', 'LIKE', $searchTerm)\r\n                                   ->orWhere('mobile_number', 'LIKE', $searchTerm)",
                        "($familyGroupId) {\r\n                                    $query->where('family_group_id', $familyGroupId)",
                        "($searchTerm) {\r\n                                    $q->where('policy_number', 'LIKE', $searchTerm)\r\n                                      ->orWhereHas('customer', function ($customerQuery) use ($searchTerm) {\r\n                                          $customerQuery->where('name', 'LIKE', $searchTerm)\r\n                                                       ->orWhere('mobile_number', 'LIKE', $searchTerm)"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getPaginated",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$perPage",
                                "default": "10",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "LengthAwarePaginator",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPaginated(Request $request, int $perPage = 10): LengthAwarePaginator"
                    },
                    {
                        "name": "findById",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$id",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "mixed",
                        "has_return_type": false,
                        "docblock": "",
                        "signature": "function findById(int $id)"
                    },
                    {
                        "name": "update",
                        "parameters": [
                            {
                                "type": "",
                                "name": "$entity",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "mixed",
                        "has_return_type": false,
                        "docblock": "",
                        "signature": "function update($entity, array $data)"
                    },
                    {
                        "name": "delete",
                        "parameters": [
                            {
                                "type": "",
                                "name": "$entity",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function delete($entity): bool"
                    },
                    {
                        "name": "getByCustomer",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$customerId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getByCustomer(int $customerId): Collection"
                    },
                    {
                        "name": "getByInsuranceCompany",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$companyId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getByInsuranceCompany(int $companyId): Collection"
                    },
                    {
                        "name": "getActive",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getActive(): Collection"
                    },
                    {
                        "name": "getExpired",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getExpired(): Collection"
                    },
                    {
                        "name": "getDueForRenewal",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$daysAhead",
                                "default": "30",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getDueForRenewal(int $daysAhead = 30): Collection"
                    },
                    {
                        "name": "getByFamilyGroup",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$familyGroupId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getByFamilyGroup(int $familyGroupId): Collection"
                    },
                    {
                        "name": "getByPolicyType",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$policyTypeId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getByPolicyType(int $policyTypeId): Collection"
                    },
                    {
                        "name": "search",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$query",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function search(string $query): Collection"
                    },
                    {
                        "name": "getStatistics",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getStatistics(): array"
                    },
                    {
                        "name": "exists",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$id",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function exists(int $id): bool"
                    },
                    {
                        "name": "getCountByStatus",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getCountByStatus(): array"
                    }
                ],
                "method_count": 15,
                "complexity_score": 7.5
            },
            {
                "file_path": "app/Repositories/PolicyTypeRepository.php",
                "class_info": {
                    "class_name": "PolicyTypeRepository",
                    "extends": "AbstractBaseRepository",
                    "implements": [
                        "PolicyTypeRepositoryInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Repositories\\PolicyTypeRepositoryInterface",
                        "App\\Models\\PolicyType"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [],
                "method_count": 0,
                "complexity_score": 0
            },
            {
                "file_path": "app/Repositories/PremiumTypeRepository.php",
                "class_info": {
                    "class_name": "PremiumTypeRepository",
                    "extends": "AbstractBaseRepository",
                    "implements": [
                        "PremiumTypeRepositoryInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Repositories\\PremiumTypeRepositoryInterface",
                        "App\\Models\\PremiumType"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [],
                "method_count": 0,
                "complexity_score": 0
            },
            {
                "file_path": "app/Repositories/QuotationRepository.php",
                "class_info": {
                    "class_name": "QuotationRepository",
                    "extends": "AbstractBaseRepository",
                    "implements": [
                        "QuotationRepositoryInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Repositories\\QuotationRepositoryInterface",
                        "App\\Models\\Quotation",
                        "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Illuminate\\Http\\Request",
                        "($searchTerm) {\r\n                $q->whereHas('customer', function ($customerQuery) use ($searchTerm) {\r\n                    $customerQuery->where('name', 'LIKE', $searchTerm)\r\n                                 ->orWhere('mobile_number', 'LIKE', $searchTerm)",
                        "($searchTerm) {\r\n                           $q->whereHas('customer', function ($customerQuery) use ($searchTerm) {\r\n                               $customerQuery->where('name', 'LIKE', $searchTerm)\r\n                                            ->orWhere('mobile_number', 'LIKE', $searchTerm)"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getAll",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$filters",
                                "default": "[]",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getAll(array $filters = []): Collection"
                    },
                    {
                        "name": "getPaginated",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$perPage",
                                "default": "10",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "LengthAwarePaginator",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPaginated(Request $request, int $perPage = 10): LengthAwarePaginator"
                    },
                    {
                        "name": "findById",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$id",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "mixed",
                        "has_return_type": false,
                        "docblock": "",
                        "signature": "function findById(int $id)"
                    },
                    {
                        "name": "update",
                        "parameters": [
                            {
                                "type": "",
                                "name": "$entity",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "mixed",
                        "has_return_type": false,
                        "docblock": "",
                        "signature": "function update($entity, array $data)"
                    },
                    {
                        "name": "delete",
                        "parameters": [
                            {
                                "type": "",
                                "name": "$entity",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function delete($entity): bool"
                    },
                    {
                        "name": "getByCustomer",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$customerId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getByCustomer(int $customerId): Collection"
                    },
                    {
                        "name": "getByStatus",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$status",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getByStatus(string $status): Collection"
                    },
                    {
                        "name": "getRecent",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$limit",
                                "default": "10",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getRecent(int $limit = 10): Collection"
                    },
                    {
                        "name": "search",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$query",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function search(string $query): Collection"
                    },
                    {
                        "name": "getSentQuotations",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getSentQuotations(): Collection"
                    },
                    {
                        "name": "getPendingQuotations",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPendingQuotations(): Collection"
                    },
                    {
                        "name": "getCountByStatus",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getCountByStatus(): array"
                    },
                    {
                        "name": "exists",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$id",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function exists(int $id): bool"
                    }
                ],
                "method_count": 13,
                "complexity_score": 6.5
            },
            {
                "file_path": "app/Repositories/ReferenceUserRepository.php",
                "class_info": {
                    "class_name": "ReferenceUserRepository",
                    "extends": "AbstractBaseRepository",
                    "implements": [
                        "ReferenceUserRepositoryInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Repositories\\ReferenceUserRepositoryInterface",
                        "App\\Models\\ReferenceUser"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [],
                "method_count": 0,
                "complexity_score": 0
            },
            {
                "file_path": "app/Repositories/RelationshipManagerRepository.php",
                "class_info": {
                    "class_name": "RelationshipManagerRepository",
                    "extends": "AbstractBaseRepository",
                    "implements": [
                        "RelationshipManagerRepositoryInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Repositories\\RelationshipManagerRepositoryInterface",
                        "App\\Models\\RelationshipManager"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [],
                "method_count": 0,
                "complexity_score": 0
            },
            {
                "file_path": "app/Repositories/RoleRepository.php",
                "class_info": {
                    "class_name": "RoleRepository",
                    "extends": "AbstractBaseRepository",
                    "implements": [
                        "RoleRepositoryInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Repositories\\RoleRepositoryInterface",
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Pagination\\LengthAwarePaginator",
                        "Spatie\\Permission\\Models\\Role",
                        "($search) {\r\n                $q->where('name', 'like', \"%{$search}%\")\r\n                  ->orWhere('guard_name', 'like', \"%{$search}%\")",
                        "($modelType, $modelId) {\r\n            $query->where('model_type', $modelType)\r\n                  ->where('model_id', $modelId)"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getRolesWithFilters",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$perPage",
                                "default": "15",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "LengthAwarePaginator",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getRolesWithFilters(Request $request, int $perPage = 15): LengthAwarePaginator"
                    },
                    {
                        "name": "getRoleWithPermissions",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$roleId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "?Role",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getRoleWithPermissions(int $roleId): ?Role"
                    },
                    {
                        "name": "getRolesWithPermissionsCount",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getRolesWithPermissionsCount(): Collection"
                    },
                    {
                        "name": "searchRoles",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$searchTerm",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$limit",
                                "default": "20",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function searchRoles(string $searchTerm, int $limit = 20): Collection"
                    },
                    {
                        "name": "getRolesByGuard",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$guardName",
                                "default": "'web'",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getRolesByGuard(string $guardName = 'web'): Collection"
                    },
                    {
                        "name": "getRoleStatistics",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getRoleStatistics(): array"
                    },
                    {
                        "name": "getRolesByModel",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$modelType",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$modelId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getRolesByModel(string $modelType, int $modelId): Collection"
                    }
                ],
                "method_count": 7,
                "complexity_score": 3.5
            },
            {
                "file_path": "app/Repositories/UserRepository.php",
                "class_info": {
                    "class_name": "UserRepository",
                    "extends": "AbstractBaseRepository",
                    "implements": [
                        "UserRepositoryInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Repositories\\UserRepositoryInterface",
                        "App\\Models\\User"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "findWithRoles",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$id",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "?User",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function findWithRoles(int $id): ?User"
                    },
                    {
                        "name": "updatePassword",
                        "parameters": [
                            {
                                "type": "User",
                                "name": "$user",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "string",
                                "name": "$hashedPassword",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updatePassword(User $user, string $hashedPassword): bool"
                    },
                    {
                        "name": "getAllForExport",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "mixed",
                        "has_return_type": false,
                        "docblock": "",
                        "signature": "function getAllForExport()"
                    }
                ],
                "method_count": 3,
                "complexity_score": 1.5
            }
        ],
        "interfaces": [
            {
                "file_path": "app/Contracts/Repositories/AddonCoverRepositoryInterface.php",
                "class_info": {
                    "class_name": "AddonCoverRepositoryInterface",
                    "extends": "BaseRepositoryInterface",
                    "implements": [],
                    "uses": [
                        "App\\Models\\AddonCover"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [],
                "method_count": 0
            },
            {
                "file_path": "app/Contracts/Repositories/BaseRepositoryInterface.php",
                "class_info": {
                    "class_name": "eliminates",
                    "extends": "",
                    "implements": [],
                    "uses": [
                        "Illuminate\\Database\\Eloquent\\Model",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Illuminate\\Database\\Eloquent\\Collection"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getPaginated",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$perPage",
                                "default": "10",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "LengthAwarePaginator;\r\n\r\n    /**\r\n     * Create a new entity\r\n     *\r\n     * @param array $data\r\n     * @return Model\r\n     */\r\n    public function create(array $data): Model;\r\n\r\n    /**\r\n     * Update an existing entity\r\n     *\r\n     * @param Model $entity\r\n     * @param array $data\r\n     * @return Model\r\n     */\r\n    public function update(Model $entity, array $data): Model;\r\n\r\n    /**\r\n     * Delete an entity\r\n     *\r\n     * @param Model $entity\r\n     * @return bool\r\n     */\r\n    public function delete(Model $entity): bool;\r\n\r\n    /**\r\n     * Find entity by ID\r\n     *\r\n     * @param int $id\r\n     * @return Model|null\r\n     */\r\n    public function findById(int $id): ?Model;\r\n\r\n    /**\r\n     * Update entity status\r\n     *\r\n     * @param int $id\r\n     * @param int $status\r\n     * @return bool\r\n     */\r\n    public function updateStatus(int $id, int $status): bool;\r\n\r\n    /**\r\n     * Get all active entities\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getActive(): Collection;\r\n\r\n    /**\r\n     * Get all entities for export (no pagination)\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getAllForExport(): Collection;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPaginated(Request $request, int $perPage = 10): LengthAwarePaginator;\r\n\r\n    /**\r\n     * Create a new entity\r\n     *\r\n     * @param array $data\r\n     * @return Model\r\n     */\r\n    public function create(array $data): Model;\r\n\r\n    /**\r\n     * Update an existing entity\r\n     *\r\n     * @param Model $entity\r\n     * @param array $data\r\n     * @return Model\r\n     */\r\n    public function update(Model $entity, array $data): Model;\r\n\r\n    /**\r\n     * Delete an entity\r\n     *\r\n     * @param Model $entity\r\n     * @return bool\r\n     */\r\n    public function delete(Model $entity): bool;\r\n\r\n    /**\r\n     * Find entity by ID\r\n     *\r\n     * @param int $id\r\n     * @return Model|null\r\n     */\r\n    public function findById(int $id): ?Model;\r\n\r\n    /**\r\n     * Update entity status\r\n     *\r\n     * @param int $id\r\n     * @param int $status\r\n     * @return bool\r\n     */\r\n    public function updateStatus(int $id, int $status): bool;\r\n\r\n    /**\r\n     * Get all active entities\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getActive(): Collection;\r\n\r\n    /**\r\n     * Get all entities for export (no pagination)\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getAllForExport(): Collection;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Repositories/BranchRepositoryInterface.php",
                "class_info": {
                    "class_name": "BranchRepositoryInterface",
                    "extends": "BaseRepositoryInterface",
                    "implements": [],
                    "uses": [
                        "App\\Models\\Branch",
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Pagination\\LengthAwarePaginator"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getBranchesWithFilters",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$perPage",
                                "default": "15",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "LengthAwarePaginator;\r\n\r\n    /**\r\n     * Get branches by status\r\n     *\r\n     * @param bool $status\r\n     * @return Collection\r\n     */\r\n    public function getBranchesByStatus(bool $status): Collection;\r\n\r\n    /**\r\n     * Get active branches for dropdown/select options\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getActiveBranches(): Collection;\r\n\r\n    /**\r\n     * Get branch with customer insurances count\r\n     *\r\n     * @param int $branchId\r\n     * @return Branch|null\r\n     */\r\n    public function getBranchWithInsurancesCount(int $branchId): ?Branch;\r\n\r\n    /**\r\n     * Search branches by name\r\n     *\r\n     * @param string $searchTerm\r\n     * @param int $limit\r\n     * @return Collection\r\n     */\r\n    public function searchBranches(string $searchTerm, int $limit = 20): Collection;\r\n\r\n    /**\r\n     * Get branch statistics\r\n     *\r\n     * @return array\r\n     */\r\n    public function getBranchStatistics(): array;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getBranchesWithFilters(Request $request, int $perPage = 15): LengthAwarePaginator;\r\n\r\n    /**\r\n     * Get branches by status\r\n     *\r\n     * @param bool $status\r\n     * @return Collection\r\n     */\r\n    public function getBranchesByStatus(bool $status): Collection;\r\n\r\n    /**\r\n     * Get active branches for dropdown/select options\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getActiveBranches(): Collection;\r\n\r\n    /**\r\n     * Get branch with customer insurances count\r\n     *\r\n     * @param int $branchId\r\n     * @return Branch|null\r\n     */\r\n    public function getBranchWithInsurancesCount(int $branchId): ?Branch;\r\n\r\n    /**\r\n     * Search branches by name\r\n     *\r\n     * @param string $searchTerm\r\n     * @param int $limit\r\n     * @return Collection\r\n     */\r\n    public function searchBranches(string $searchTerm, int $limit = 20): Collection;\r\n\r\n    /**\r\n     * Get branch statistics\r\n     *\r\n     * @return array\r\n     */\r\n    public function getBranchStatistics(): array;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Repositories/BrokerRepositoryInterface.php",
                "class_info": {
                    "class_name": "BrokerRepositoryInterface",
                    "extends": "BaseRepositoryInterface",
                    "implements": [],
                    "uses": [
                        "App\\Models\\Broker"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [],
                "method_count": 0
            },
            {
                "file_path": "app/Contracts/Repositories/ClaimRepositoryInterface.php",
                "class_info": {
                    "class_name": "ClaimRepositoryInterface",
                    "extends": "BaseRepositoryInterface",
                    "implements": [],
                    "uses": [
                        "App\\Models\\Claim",
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Pagination\\LengthAwarePaginator"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getClaimsWithFilters",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$perPage",
                                "default": "15",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "LengthAwarePaginator;\r\n\r\n    /**\r\n     * Get claims by status\r\n     *\r\n     * @param bool $status\r\n     * @return Collection\r\n     */\r\n    public function getClaimsByStatus(bool $status): Collection;\r\n\r\n    /**\r\n     * Get claims by insurance type\r\n     *\r\n     * @param string $insuranceType\r\n     * @return Collection\r\n     */\r\n    public function getClaimsByInsuranceType(string $insuranceType): Collection;\r\n\r\n    /**\r\n     * Get claims within date range\r\n     *\r\n     * @param string $dateFrom\r\n     * @param string $dateTo\r\n     * @return Collection\r\n     */\r\n    public function getClaimsByDateRange(string $dateFrom, string $dateTo): Collection;\r\n\r\n    /**\r\n     * Get claim statistics for dashboard\r\n     *\r\n     * @return array\r\n     */\r\n    public function getClaimStatistics(): array;\r\n\r\n    /**\r\n     * Search claims by multiple criteria\r\n     *\r\n     * @param string $searchTerm\r\n     * @param int $limit\r\n     * @return Collection\r\n     */\r\n    public function searchClaims(string $searchTerm, int $limit = 20): Collection;\r\n\r\n    /**\r\n     * Get claims for specific customer\r\n     *\r\n     * @param int $customerId\r\n     * @return Collection\r\n     */\r\n    public function getClaimsByCustomer(int $customerId): Collection;\r\n\r\n    /**\r\n     * Get claims for specific customer insurance\r\n     *\r\n     * @param int $customerInsuranceId\r\n     * @return Collection\r\n     */\r\n    public function getClaimsByCustomerInsurance(int $customerInsuranceId): Collection;\r\n\r\n    /**\r\n     * Generate next claim number\r\n     *\r\n     * @return string\r\n     */\r\n    public function generateClaimNumber(): string;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getClaimsWithFilters(Request $request, int $perPage = 15): LengthAwarePaginator;\r\n\r\n    /**\r\n     * Get claims by status\r\n     *\r\n     * @param bool $status\r\n     * @return Collection\r\n     */\r\n    public function getClaimsByStatus(bool $status): Collection;\r\n\r\n    /**\r\n     * Get claims by insurance type\r\n     *\r\n     * @param string $insuranceType\r\n     * @return Collection\r\n     */\r\n    public function getClaimsByInsuranceType(string $insuranceType): Collection;\r\n\r\n    /**\r\n     * Get claims within date range\r\n     *\r\n     * @param string $dateFrom\r\n     * @param string $dateTo\r\n     * @return Collection\r\n     */\r\n    public function getClaimsByDateRange(string $dateFrom, string $dateTo): Collection;\r\n\r\n    /**\r\n     * Get claim statistics for dashboard\r\n     *\r\n     * @return array\r\n     */\r\n    public function getClaimStatistics(): array;\r\n\r\n    /**\r\n     * Search claims by multiple criteria\r\n     *\r\n     * @param string $searchTerm\r\n     * @param int $limit\r\n     * @return Collection\r\n     */\r\n    public function searchClaims(string $searchTerm, int $limit = 20): Collection;\r\n\r\n    /**\r\n     * Get claims for specific customer\r\n     *\r\n     * @param int $customerId\r\n     * @return Collection\r\n     */\r\n    public function getClaimsByCustomer(int $customerId): Collection;\r\n\r\n    /**\r\n     * Get claims for specific customer insurance\r\n     *\r\n     * @param int $customerInsuranceId\r\n     * @return Collection\r\n     */\r\n    public function getClaimsByCustomerInsurance(int $customerInsuranceId): Collection;\r\n\r\n    /**\r\n     * Generate next claim number\r\n     *\r\n     * @return string\r\n     */\r\n    public function generateClaimNumber(): string;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Repositories/CustomerInsuranceRepositoryInterface.php",
                "class_info": {
                    "class_name": "CustomerInsuranceRepositoryInterface",
                    "extends": "BaseRepositoryInterface",
                    "implements": [],
                    "uses": [
                        "App\\Models\\CustomerInsurance",
                        "Illuminate\\Database\\Eloquent\\Collection"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getByCustomerId",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$customerId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection;\r\n\r\n    /**\r\n     * Get expiring policies within specified days.\r\n     */\r\n    public function getExpiringPolicies(int $days = 30): Collection;\r\n\r\n    /**\r\n     * Find customer insurance with specific relations.\r\n     */\r\n    public function findWithRelations(int $id, array $relations = []): ?CustomerInsurance;\r\n\r\n    /**\r\n     * Get active customer insurances.\r\n     */\r\n    public function getActiveCustomerInsurances(): Collection;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getByCustomerId(int $customerId): Collection;\r\n\r\n    /**\r\n     * Get expiring policies within specified days.\r\n     */\r\n    public function getExpiringPolicies(int $days = 30): Collection;\r\n\r\n    /**\r\n     * Find customer insurance with specific relations.\r\n     */\r\n    public function findWithRelations(int $id, array $relations = []): ?CustomerInsurance;\r\n\r\n    /**\r\n     * Get active customer insurances.\r\n     */\r\n    public function getActiveCustomerInsurances(): Collection;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Repositories/CustomerRepositoryInterface.php",
                "class_info": {
                    "class_name": "CustomerRepositoryInterface",
                    "extends": "BaseRepositoryInterface",
                    "implements": [],
                    "uses": [
                        "App\\Models\\Customer",
                        "Illuminate\\Database\\Eloquent\\Collection"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getAll",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$filters",
                                "default": "[]",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection;\r\n\r\n    /**\r\n     * Find customer by email.\r\n     */\r\n    public function findByEmail(string $email): ?Customer;\r\n\r\n    /**\r\n     * Find customer by mobile number.\r\n     */\r\n    public function findByMobileNumber(string $mobileNumber): ?Customer;\r\n\r\n    /**\r\n     * Get customers by family group.\r\n     */\r\n    public function getByFamilyGroup(int $familyGroupId): Collection;\r\n\r\n    /**\r\n     * Get customers by type (Retail/Corporate).\r\n     */\r\n    public function getByType(string $type): Collection;\r\n\r\n    /**\r\n     * Search customers by name, email, or mobile.\r\n     */\r\n    public function search(string $query): Collection;\r\n\r\n    /**\r\n     * Check if customer exists by ID.\r\n     */\r\n    public function exists(int $id): bool;\r\n\r\n    /**\r\n     * Get customer count.\r\n     */\r\n    public function count(): int;\r\n\r\n    /**\r\n     * Get active customers\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getActiveCustomers(): Collection;\r\n\r\n    /**\r\n     * Get customers with valid mobile numbers\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getCustomersWithValidMobileNumbers(): Collection;\r\n\r\n    /**\r\n     * Get customers by array of IDs\r\n     *\r\n     * @param array $ids\r\n     * @return Collection\r\n     */\r\n    public function getCustomersByIds(array $ids): Collection;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getAll(array $filters = []): Collection;\r\n\r\n    /**\r\n     * Find customer by email.\r\n     */\r\n    public function findByEmail(string $email): ?Customer;\r\n\r\n    /**\r\n     * Find customer by mobile number.\r\n     */\r\n    public function findByMobileNumber(string $mobileNumber): ?Customer;\r\n\r\n    /**\r\n     * Get customers by family group.\r\n     */\r\n    public function getByFamilyGroup(int $familyGroupId): Collection;\r\n\r\n    /**\r\n     * Get customers by type (Retail/Corporate).\r\n     */\r\n    public function getByType(string $type): Collection;\r\n\r\n    /**\r\n     * Search customers by name, email, or mobile.\r\n     */\r\n    public function search(string $query): Collection;\r\n\r\n    /**\r\n     * Check if customer exists by ID.\r\n     */\r\n    public function exists(int $id): bool;\r\n\r\n    /**\r\n     * Get customer count.\r\n     */\r\n    public function count(): int;\r\n\r\n    /**\r\n     * Get active customers\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getActiveCustomers(): Collection;\r\n\r\n    /**\r\n     * Get customers with valid mobile numbers\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getCustomersWithValidMobileNumbers(): Collection;\r\n\r\n    /**\r\n     * Get customers by array of IDs\r\n     *\r\n     * @param array $ids\r\n     * @return Collection\r\n     */\r\n    public function getCustomersByIds(array $ids): Collection;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Repositories/FamilyGroupRepositoryInterface.php",
                "class_info": {
                    "class_name": "FamilyGroupRepositoryInterface",
                    "extends": "BaseRepositoryInterface",
                    "implements": [],
                    "uses": [
                        "App\\Models\\FamilyGroup",
                        "App\\Models\\Customer",
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Pagination\\LengthAwarePaginator"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getFamilyGroupsWithFilters",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$perPage",
                                "default": "15",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "LengthAwarePaginator;\r\n\r\n    /**\r\n     * Get family group with all relationships loaded\r\n     *\r\n     * @param int $familyGroupId\r\n     * @return FamilyGroup|null\r\n     */\r\n    public function getFamilyGroupWithMembers(int $familyGroupId): ?FamilyGroup;\r\n\r\n    /**\r\n     * Get family groups by family head\r\n     *\r\n     * @param int $familyHeadId\r\n     * @return Collection\r\n     */\r\n    public function getFamilyGroupsByHead(int $familyHeadId): Collection;\r\n\r\n    /**\r\n     * Get family groups by customer (either as head or member)\r\n     *\r\n     * @param int $customerId\r\n     * @return Collection\r\n     */\r\n    public function getFamilyGroupsByCustomer(int $customerId): Collection;\r\n\r\n    /**\r\n     * Get available customers for family group creation\r\n     * (customers not in any family group)\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getAvailableCustomers(): Collection;\r\n\r\n    /**\r\n     * Get available customers for family group editing\r\n     * (customers not in other family groups)\r\n     *\r\n     * @param int $familyGroupId\r\n     * @return Collection\r\n     */\r\n    public function getAvailableCustomersForEdit(int $familyGroupId): Collection;\r\n\r\n    /**\r\n     * Check if customer is already in a family group\r\n     *\r\n     * @param int $customerId\r\n     * @return bool\r\n     */\r\n    public function isCustomerInFamilyGroup(int $customerId): bool;\r\n\r\n    /**\r\n     * Get family members for a specific family group\r\n     *\r\n     * @param int $familyGroupId\r\n     * @return Collection\r\n     */\r\n    public function getFamilyMembers(int $familyGroupId): Collection;\r\n\r\n    /**\r\n     * Update family head for a family group\r\n     *\r\n     * @param int $familyGroupId\r\n     * @param int $newFamilyHeadId\r\n     * @return bool\r\n     */\r\n    public function updateFamilyHead(int $familyGroupId, int $newFamilyHeadId): bool;\r\n\r\n    /**\r\n     * Remove customer from family group\r\n     *\r\n     * @param int $customerId\r\n     * @return bool\r\n     */\r\n    public function removeCustomerFromFamilyGroup(int $customerId): bool;\r\n\r\n    /**\r\n     * Get family group statistics\r\n     *\r\n     * @return array\r\n     */\r\n    public function getFamilyGroupStatistics(): array;\r\n\r\n    /**\r\n     * Search family groups by name or family head\r\n     *\r\n     * @param string $searchTerm\r\n     * @param int $limit\r\n     * @return Collection\r\n     */\r\n    public function searchFamilyGroups(string $searchTerm, int $limit = 20): Collection;\r\n\r\n    /**\r\n     * Get all family groups with relationships for export\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getAllFamilyGroupsWithRelationships(): Collection;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getFamilyGroupsWithFilters(Request $request, int $perPage = 15): LengthAwarePaginator;\r\n\r\n    /**\r\n     * Get family group with all relationships loaded\r\n     *\r\n     * @param int $familyGroupId\r\n     * @return FamilyGroup|null\r\n     */\r\n    public function getFamilyGroupWithMembers(int $familyGroupId): ?FamilyGroup;\r\n\r\n    /**\r\n     * Get family groups by family head\r\n     *\r\n     * @param int $familyHeadId\r\n     * @return Collection\r\n     */\r\n    public function getFamilyGroupsByHead(int $familyHeadId): Collection;\r\n\r\n    /**\r\n     * Get family groups by customer (either as head or member)\r\n     *\r\n     * @param int $customerId\r\n     * @return Collection\r\n     */\r\n    public function getFamilyGroupsByCustomer(int $customerId): Collection;\r\n\r\n    /**\r\n     * Get available customers for family group creation\r\n     * (customers not in any family group)\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getAvailableCustomers(): Collection;\r\n\r\n    /**\r\n     * Get available customers for family group editing\r\n     * (customers not in other family groups)\r\n     *\r\n     * @param int $familyGroupId\r\n     * @return Collection\r\n     */\r\n    public function getAvailableCustomersForEdit(int $familyGroupId): Collection;\r\n\r\n    /**\r\n     * Check if customer is already in a family group\r\n     *\r\n     * @param int $customerId\r\n     * @return bool\r\n     */\r\n    public function isCustomerInFamilyGroup(int $customerId): bool;\r\n\r\n    /**\r\n     * Get family members for a specific family group\r\n     *\r\n     * @param int $familyGroupId\r\n     * @return Collection\r\n     */\r\n    public function getFamilyMembers(int $familyGroupId): Collection;\r\n\r\n    /**\r\n     * Update family head for a family group\r\n     *\r\n     * @param int $familyGroupId\r\n     * @param int $newFamilyHeadId\r\n     * @return bool\r\n     */\r\n    public function updateFamilyHead(int $familyGroupId, int $newFamilyHeadId): bool;\r\n\r\n    /**\r\n     * Remove customer from family group\r\n     *\r\n     * @param int $customerId\r\n     * @return bool\r\n     */\r\n    public function removeCustomerFromFamilyGroup(int $customerId): bool;\r\n\r\n    /**\r\n     * Get family group statistics\r\n     *\r\n     * @return array\r\n     */\r\n    public function getFamilyGroupStatistics(): array;\r\n\r\n    /**\r\n     * Search family groups by name or family head\r\n     *\r\n     * @param string $searchTerm\r\n     * @param int $limit\r\n     * @return Collection\r\n     */\r\n    public function searchFamilyGroups(string $searchTerm, int $limit = 20): Collection;\r\n\r\n    /**\r\n     * Get all family groups with relationships for export\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getAllFamilyGroupsWithRelationships(): Collection;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Repositories/FuelTypeRepositoryInterface.php",
                "class_info": {
                    "class_name": "FuelTypeRepositoryInterface",
                    "extends": "BaseRepositoryInterface",
                    "implements": [],
                    "uses": [
                        "App\\Models\\FuelType"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [],
                "method_count": 0
            },
            {
                "file_path": "app/Contracts/Repositories/InsuranceCompanyRepositoryInterface.php",
                "class_info": {
                    "class_name": "InsuranceCompanyRepositoryInterface",
                    "extends": "BaseRepositoryInterface",
                    "implements": [],
                    "uses": [
                        "App\\Models\\InsuranceCompany"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [],
                "method_count": 0
            },
            {
                "file_path": "app/Contracts/Repositories/MarketingWhatsAppRepositoryInterface.php",
                "class_info": {
                    "class_name": "MarketingWhatsAppRepositoryInterface",
                    "extends": "BaseRepositoryInterface",
                    "implements": [],
                    "uses": [
                        "App\\Models\\MarketingWhatsApp",
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Pagination\\LengthAwarePaginator"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getMarketingMessagesWithFilters",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$perPage",
                                "default": "15",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "LengthAwarePaginator;\r\n\r\n    /**\r\n     * Get marketing messages by status\r\n     *\r\n     * @param bool $status\r\n     * @return Collection\r\n     */\r\n    public function getMarketingMessagesByStatus(bool $status): Collection;\r\n\r\n    /**\r\n     * Get marketing messages by type\r\n     *\r\n     * @param string $type\r\n     * @return Collection\r\n     */\r\n    public function getMarketingMessagesByType(string $type): Collection;\r\n\r\n    /**\r\n     * Get marketing messages sent today\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getTodayMarketingMessages(): Collection;\r\n\r\n    /**\r\n     * Get marketing messages by date range\r\n     *\r\n     * @param string $startDate\r\n     * @param string $endDate\r\n     * @return Collection\r\n     */\r\n    public function getMarketingMessagesByDateRange(string $startDate, string $endDate): Collection;\r\n\r\n    /**\r\n     * Get marketing message statistics\r\n     *\r\n     * @return array\r\n     */\r\n    public function getMarketingMessageStatistics(): array;\r\n\r\n    /**\r\n     * Search marketing messages by content\r\n     *\r\n     * @param string $searchTerm\r\n     * @param int $limit\r\n     * @return Collection\r\n     */\r\n    public function searchMarketingMessages(string $searchTerm, int $limit = 20): Collection;\r\n\r\n    /**\r\n     * Get marketing messages by phone number\r\n     *\r\n     * @param string $phoneNumber\r\n     * @return Collection\r\n     */\r\n    public function getMarketingMessagesByPhoneNumber(string $phoneNumber): Collection;\r\n\r\n    /**\r\n     * Get failed marketing messages for retry\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getFailedMarketingMessages(): Collection;\r\n\r\n    /**\r\n     * Get all marketing messages for export\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getAllMarketingMessagesForExport(): Collection;\r\n\r\n    /**\r\n     * Mark message as sent\r\n     *\r\n     * @param MarketingWhatsApp $marketingMessage\r\n     * @param string $messageId\r\n     * @return bool\r\n     */\r\n    public function markMessageAsSent(MarketingWhatsApp $marketingMessage, string $messageId): bool;\r\n\r\n    /**\r\n     * Mark message as failed\r\n     *\r\n     * @param MarketingWhatsApp $marketingMessage\r\n     * @param string $errorMessage\r\n     * @return bool\r\n     */\r\n    public function markMessageAsFailed(MarketingWhatsApp $marketingMessage, string $errorMessage): bool;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getMarketingMessagesWithFilters(Request $request, int $perPage = 15): LengthAwarePaginator;\r\n\r\n    /**\r\n     * Get marketing messages by status\r\n     *\r\n     * @param bool $status\r\n     * @return Collection\r\n     */\r\n    public function getMarketingMessagesByStatus(bool $status): Collection;\r\n\r\n    /**\r\n     * Get marketing messages by type\r\n     *\r\n     * @param string $type\r\n     * @return Collection\r\n     */\r\n    public function getMarketingMessagesByType(string $type): Collection;\r\n\r\n    /**\r\n     * Get marketing messages sent today\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getTodayMarketingMessages(): Collection;\r\n\r\n    /**\r\n     * Get marketing messages by date range\r\n     *\r\n     * @param string $startDate\r\n     * @param string $endDate\r\n     * @return Collection\r\n     */\r\n    public function getMarketingMessagesByDateRange(string $startDate, string $endDate): Collection;\r\n\r\n    /**\r\n     * Get marketing message statistics\r\n     *\r\n     * @return array\r\n     */\r\n    public function getMarketingMessageStatistics(): array;\r\n\r\n    /**\r\n     * Search marketing messages by content\r\n     *\r\n     * @param string $searchTerm\r\n     * @param int $limit\r\n     * @return Collection\r\n     */\r\n    public function searchMarketingMessages(string $searchTerm, int $limit = 20): Collection;\r\n\r\n    /**\r\n     * Get marketing messages by phone number\r\n     *\r\n     * @param string $phoneNumber\r\n     * @return Collection\r\n     */\r\n    public function getMarketingMessagesByPhoneNumber(string $phoneNumber): Collection;\r\n\r\n    /**\r\n     * Get failed marketing messages for retry\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getFailedMarketingMessages(): Collection;\r\n\r\n    /**\r\n     * Get all marketing messages for export\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getAllMarketingMessagesForExport(): Collection;\r\n\r\n    /**\r\n     * Mark message as sent\r\n     *\r\n     * @param MarketingWhatsApp $marketingMessage\r\n     * @param string $messageId\r\n     * @return bool\r\n     */\r\n    public function markMessageAsSent(MarketingWhatsApp $marketingMessage, string $messageId): bool;\r\n\r\n    /**\r\n     * Mark message as failed\r\n     *\r\n     * @param MarketingWhatsApp $marketingMessage\r\n     * @param string $errorMessage\r\n     * @return bool\r\n     */\r\n    public function markMessageAsFailed(MarketingWhatsApp $marketingMessage, string $errorMessage): bool;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Repositories/PermissionRepositoryInterface.php",
                "class_info": {
                    "class_name": "PermissionRepositoryInterface",
                    "extends": "BaseRepositoryInterface",
                    "implements": [],
                    "uses": [
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Pagination\\LengthAwarePaginator",
                        "Spatie\\Permission\\Models\\Permission"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getPermissionsWithFilters",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$perPage",
                                "default": "15",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "LengthAwarePaginator;\r\n\r\n    /**\r\n     * Get permission with roles loaded\r\n     *\r\n     * @param int $permissionId\r\n     * @return Permission|null\r\n     */\r\n    public function getPermissionWithRoles(int $permissionId): ?Permission;\r\n\r\n    /**\r\n     * Get permissions with roles count\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getPermissionsWithRolesCount(): Collection;\r\n\r\n    /**\r\n     * Search permissions by name\r\n     *\r\n     * @param string $searchTerm\r\n     * @param int $limit\r\n     * @return Collection\r\n     */\r\n    public function searchPermissions(string $searchTerm, int $limit = 20): Collection;\r\n\r\n    /**\r\n     * Get permissions for specific guard\r\n     *\r\n     * @param string $guardName\r\n     * @return Collection\r\n     */\r\n    public function getPermissionsByGuard(string $guardName = 'web'): Collection;\r\n\r\n    /**\r\n     * Get permissions by module/prefix\r\n     *\r\n     * @param string $module\r\n     * @return Collection\r\n     */\r\n    public function getPermissionsByModule(string $module): Collection;\r\n\r\n    /**\r\n     * Get permission statistics\r\n     *\r\n     * @return array\r\n     */\r\n    public function getPermissionStatistics(): array;\r\n\r\n    /**\r\n     * Get permissions assigned to specific role\r\n     *\r\n     * @param int $roleId\r\n     * @return Collection\r\n     */\r\n    public function getPermissionsByRole(int $roleId): Collection;\r\n\r\n    /**\r\n     * Get permissions not assigned to specific role\r\n     *\r\n     * @param int $roleId\r\n     * @param string $guardName\r\n     * @return Collection\r\n     */\r\n    public function getUnassignedPermissions(int $roleId, string $guardName = 'web'): Collection;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPermissionsWithFilters(Request $request, int $perPage = 15): LengthAwarePaginator;\r\n\r\n    /**\r\n     * Get permission with roles loaded\r\n     *\r\n     * @param int $permissionId\r\n     * @return Permission|null\r\n     */\r\n    public function getPermissionWithRoles(int $permissionId): ?Permission;\r\n\r\n    /**\r\n     * Get permissions with roles count\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getPermissionsWithRolesCount(): Collection;\r\n\r\n    /**\r\n     * Search permissions by name\r\n     *\r\n     * @param string $searchTerm\r\n     * @param int $limit\r\n     * @return Collection\r\n     */\r\n    public function searchPermissions(string $searchTerm, int $limit = 20): Collection;\r\n\r\n    /**\r\n     * Get permissions for specific guard\r\n     *\r\n     * @param string $guardName\r\n     * @return Collection\r\n     */\r\n    public function getPermissionsByGuard(string $guardName = 'web'): Collection;\r\n\r\n    /**\r\n     * Get permissions by module/prefix\r\n     *\r\n     * @param string $module\r\n     * @return Collection\r\n     */\r\n    public function getPermissionsByModule(string $module): Collection;\r\n\r\n    /**\r\n     * Get permission statistics\r\n     *\r\n     * @return array\r\n     */\r\n    public function getPermissionStatistics(): array;\r\n\r\n    /**\r\n     * Get permissions assigned to specific role\r\n     *\r\n     * @param int $roleId\r\n     * @return Collection\r\n     */\r\n    public function getPermissionsByRole(int $roleId): Collection;\r\n\r\n    /**\r\n     * Get permissions not assigned to specific role\r\n     *\r\n     * @param int $roleId\r\n     * @param string $guardName\r\n     * @return Collection\r\n     */\r\n    public function getUnassignedPermissions(int $roleId, string $guardName = 'web'): Collection;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Repositories/PolicyRepositoryInterface.php",
                "class_info": {
                    "class_name": "PolicyRepositoryInterface",
                    "extends": "BaseRepositoryInterface",
                    "implements": [],
                    "uses": [
                        "App\\Models\\CustomerInsurance",
                        "Illuminate\\Database\\Eloquent\\Collection"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getAll",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$filters",
                                "default": "[]",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection;\r\n\r\n    /**\r\n     * Get policies by customer ID.\r\n     */\r\n    public function getByCustomer(int $customerId): Collection;\r\n\r\n    /**\r\n     * Get policies by insurance company.\r\n     */\r\n    public function getByInsuranceCompany(int $companyId): Collection;\r\n\r\n    /**\r\n     * Get expired policies.\r\n     */\r\n    public function getExpired(): Collection;\r\n\r\n    /**\r\n     * Get policies due for renewal within specified days.\r\n     */\r\n    public function getDueForRenewal(int $daysAhead = 30): Collection;\r\n\r\n    /**\r\n     * Get policies by family group.\r\n     */\r\n    public function getByFamilyGroup(int $familyGroupId): Collection;\r\n\r\n    /**\r\n     * Get policies by policy type.\r\n     */\r\n    public function getByPolicyType(int $policyTypeId): Collection;\r\n\r\n    /**\r\n     * Search policies by policy number or customer name.\r\n     */\r\n    public function search(string $query): Collection;\r\n\r\n    /**\r\n     * Get policy statistics.\r\n     */\r\n    public function getStatistics(): array;\r\n\r\n    /**\r\n     * Check if policy exists.\r\n     */\r\n    public function exists(int $id): bool;\r\n\r\n    /**\r\n     * Get policy count by status.\r\n     */\r\n    public function getCountByStatus(): array;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getAll(array $filters = []): Collection;\r\n\r\n    /**\r\n     * Get policies by customer ID.\r\n     */\r\n    public function getByCustomer(int $customerId): Collection;\r\n\r\n    /**\r\n     * Get policies by insurance company.\r\n     */\r\n    public function getByInsuranceCompany(int $companyId): Collection;\r\n\r\n    /**\r\n     * Get expired policies.\r\n     */\r\n    public function getExpired(): Collection;\r\n\r\n    /**\r\n     * Get policies due for renewal within specified days.\r\n     */\r\n    public function getDueForRenewal(int $daysAhead = 30): Collection;\r\n\r\n    /**\r\n     * Get policies by family group.\r\n     */\r\n    public function getByFamilyGroup(int $familyGroupId): Collection;\r\n\r\n    /**\r\n     * Get policies by policy type.\r\n     */\r\n    public function getByPolicyType(int $policyTypeId): Collection;\r\n\r\n    /**\r\n     * Search policies by policy number or customer name.\r\n     */\r\n    public function search(string $query): Collection;\r\n\r\n    /**\r\n     * Get policy statistics.\r\n     */\r\n    public function getStatistics(): array;\r\n\r\n    /**\r\n     * Check if policy exists.\r\n     */\r\n    public function exists(int $id): bool;\r\n\r\n    /**\r\n     * Get policy count by status.\r\n     */\r\n    public function getCountByStatus(): array;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Repositories/PolicyTypeRepositoryInterface.php",
                "class_info": {
                    "class_name": "PolicyTypeRepositoryInterface",
                    "extends": "BaseRepositoryInterface",
                    "implements": [],
                    "uses": [
                        "App\\Models\\PolicyType"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [],
                "method_count": 0
            },
            {
                "file_path": "app/Contracts/Repositories/PremiumTypeRepositoryInterface.php",
                "class_info": {
                    "class_name": "PremiumTypeRepositoryInterface",
                    "extends": "BaseRepositoryInterface",
                    "implements": [],
                    "uses": [
                        "App\\Models\\PremiumType"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [],
                "method_count": 0
            },
            {
                "file_path": "app/Contracts/Repositories/QuotationRepositoryInterface.php",
                "class_info": {
                    "class_name": "QuotationRepositoryInterface",
                    "extends": "BaseRepositoryInterface",
                    "implements": [],
                    "uses": [
                        "App\\Models\\Quotation",
                        "Illuminate\\Database\\Eloquent\\Collection"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getAll",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$filters",
                                "default": "[]",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection;\r\n\r\n    /**\r\n     * Get quotations by customer ID.\r\n     */\r\n    public function getByCustomer(int $customerId): Collection;\r\n\r\n    /**\r\n     * Get quotations by status.\r\n     */\r\n    public function getByStatus(string $status): Collection;\r\n\r\n    /**\r\n     * Get recent quotations.\r\n     */\r\n    public function getRecent(int $limit = 10): Collection;\r\n\r\n    /**\r\n     * Search quotations by vehicle number or customer details.\r\n     */\r\n    public function search(string $query): Collection;\r\n\r\n    /**\r\n     * Get quotations sent via WhatsApp.\r\n     */\r\n    public function getSentQuotations(): Collection;\r\n\r\n    /**\r\n     * Get quotations pending to be sent.\r\n     */\r\n    public function getPendingQuotations(): Collection;\r\n\r\n    /**\r\n     * Get quotation count by status.\r\n     */\r\n    public function getCountByStatus(): array;\r\n\r\n    /**\r\n     * Check if quotation exists.\r\n     */\r\n    public function exists(int $id): bool;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getAll(array $filters = []): Collection;\r\n\r\n    /**\r\n     * Get quotations by customer ID.\r\n     */\r\n    public function getByCustomer(int $customerId): Collection;\r\n\r\n    /**\r\n     * Get quotations by status.\r\n     */\r\n    public function getByStatus(string $status): Collection;\r\n\r\n    /**\r\n     * Get recent quotations.\r\n     */\r\n    public function getRecent(int $limit = 10): Collection;\r\n\r\n    /**\r\n     * Search quotations by vehicle number or customer details.\r\n     */\r\n    public function search(string $query): Collection;\r\n\r\n    /**\r\n     * Get quotations sent via WhatsApp.\r\n     */\r\n    public function getSentQuotations(): Collection;\r\n\r\n    /**\r\n     * Get quotations pending to be sent.\r\n     */\r\n    public function getPendingQuotations(): Collection;\r\n\r\n    /**\r\n     * Get quotation count by status.\r\n     */\r\n    public function getCountByStatus(): array;\r\n\r\n    /**\r\n     * Check if quotation exists.\r\n     */\r\n    public function exists(int $id): bool;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Repositories/ReferenceUserRepositoryInterface.php",
                "class_info": {
                    "class_name": "ReferenceUserRepositoryInterface",
                    "extends": "BaseRepositoryInterface",
                    "implements": [],
                    "uses": [
                        "App\\Models\\ReferenceUser"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [],
                "method_count": 0
            },
            {
                "file_path": "app/Contracts/Repositories/RelationshipManagerRepositoryInterface.php",
                "class_info": {
                    "class_name": "RelationshipManagerRepositoryInterface",
                    "extends": "BaseRepositoryInterface",
                    "implements": [],
                    "uses": [
                        "App\\Models\\RelationshipManager"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [],
                "method_count": 0
            },
            {
                "file_path": "app/Contracts/Repositories/RoleRepositoryInterface.php",
                "class_info": {
                    "class_name": "RoleRepositoryInterface",
                    "extends": "BaseRepositoryInterface",
                    "implements": [],
                    "uses": [
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Pagination\\LengthAwarePaginator",
                        "Spatie\\Permission\\Models\\Role"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getRolesWithFilters",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$perPage",
                                "default": "15",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "LengthAwarePaginator;\r\n\r\n    /**\r\n     * Get role with permissions loaded\r\n     *\r\n     * @param int $roleId\r\n     * @return Role|null\r\n     */\r\n    public function getRoleWithPermissions(int $roleId): ?Role;\r\n\r\n    /**\r\n     * Get roles with permissions count\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getRolesWithPermissionsCount(): Collection;\r\n\r\n    /**\r\n     * Search roles by name\r\n     *\r\n     * @param string $searchTerm\r\n     * @param int $limit\r\n     * @return Collection\r\n     */\r\n    public function searchRoles(string $searchTerm, int $limit = 20): Collection;\r\n\r\n    /**\r\n     * Get roles for specific guard\r\n     *\r\n     * @param string $guardName\r\n     * @return Collection\r\n     */\r\n    public function getRolesByGuard(string $guardName = 'web'): Collection;\r\n\r\n    /**\r\n     * Get role statistics\r\n     *\r\n     * @return array\r\n     */\r\n    public function getRoleStatistics(): array;\r\n\r\n    /**\r\n     * Get roles assigned to specific model\r\n     *\r\n     * @param string $modelType\r\n     * @param int $modelId\r\n     * @return Collection\r\n     */\r\n    public function getRolesByModel(string $modelType, int $modelId): Collection;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getRolesWithFilters(Request $request, int $perPage = 15): LengthAwarePaginator;\r\n\r\n    /**\r\n     * Get role with permissions loaded\r\n     *\r\n     * @param int $roleId\r\n     * @return Role|null\r\n     */\r\n    public function getRoleWithPermissions(int $roleId): ?Role;\r\n\r\n    /**\r\n     * Get roles with permissions count\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getRolesWithPermissionsCount(): Collection;\r\n\r\n    /**\r\n     * Search roles by name\r\n     *\r\n     * @param string $searchTerm\r\n     * @param int $limit\r\n     * @return Collection\r\n     */\r\n    public function searchRoles(string $searchTerm, int $limit = 20): Collection;\r\n\r\n    /**\r\n     * Get roles for specific guard\r\n     *\r\n     * @param string $guardName\r\n     * @return Collection\r\n     */\r\n    public function getRolesByGuard(string $guardName = 'web'): Collection;\r\n\r\n    /**\r\n     * Get role statistics\r\n     *\r\n     * @return array\r\n     */\r\n    public function getRoleStatistics(): array;\r\n\r\n    /**\r\n     * Get roles assigned to specific model\r\n     *\r\n     * @param string $modelType\r\n     * @param int $modelId\r\n     * @return Collection\r\n     */\r\n    public function getRolesByModel(string $modelType, int $modelId): Collection;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Repositories/UserRepositoryInterface.php",
                "class_info": {
                    "class_name": "UserRepositoryInterface",
                    "extends": "BaseRepositoryInterface",
                    "implements": [],
                    "uses": [
                        "App\\Models\\User"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "findWithRoles",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$id",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "?User;\r\n\r\n    /**\r\n     * Update user password.\r\n     */\r\n    public function updatePassword(User $user, string $hashedPassword): bool;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function findWithRoles(int $id): ?User;\r\n\r\n    /**\r\n     * Update user password.\r\n     */\r\n    public function updatePassword(User $user, string $hashedPassword): bool;\r\n}"
                    }
                ],
                "method_count": 1
            }
        ]
    },
    "services": {
        "implementations": [
            {
                "file_path": "app/Services/AddonCoverService.php",
                "class_info": {
                    "class_name": "AddonCoverService",
                    "extends": "BaseService",
                    "implements": [
                        "AddonCoverServiceInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Services\\AddonCoverServiceInterface",
                        "App\\Contracts\\Repositories\\AddonCoverRepositoryInterface",
                        "App\\Exports\\AddonCoverExport",
                        "App\\Models\\AddonCover",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Maatwebsite\\Excel\\Facades\\Excel"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "__construct",
                        "parameters": [
                            {
                                "type": "AddonCoverRepositoryInterface",
                                "name": "$addonCoverRepository",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "mixed",
                        "has_return_type": false,
                        "docblock": "",
                        "signature": "function __construct(private AddonCoverRepositoryInterface $addonCoverRepository)"
                    },
                    {
                        "name": "getAddonCovers",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "LengthAwarePaginator",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getAddonCovers(Request $request): LengthAwarePaginator"
                    },
                    {
                        "name": "createAddonCover",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "AddonCover",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function createAddonCover(array $data): AddonCover"
                    },
                    {
                        "name": "updateAddonCover",
                        "parameters": [
                            {
                                "type": "AddonCover",
                                "name": "$addonCover",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "AddonCover",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateAddonCover(AddonCover $addonCover, array $data): AddonCover"
                    },
                    {
                        "name": "deleteAddonCover",
                        "parameters": [
                            {
                                "type": "AddonCover",
                                "name": "$addonCover",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function deleteAddonCover(AddonCover $addonCover): bool"
                    },
                    {
                        "name": "updateStatus",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$addonCoverId",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$status",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateStatus(int $addonCoverId, int $status): bool"
                    },
                    {
                        "name": "exportAddonCovers",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "\\Symfony\\Component\\HttpFoundation\\BinaryFileResponse",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function exportAddonCovers(): \\Symfony\\Component\\HttpFoundation\\BinaryFileResponse"
                    },
                    {
                        "name": "getActiveAddonCovers",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getActiveAddonCovers(): Collection"
                    },
                    {
                        "name": "getStoreValidationRules",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getStoreValidationRules(): array"
                    },
                    {
                        "name": "getUpdateValidationRules",
                        "parameters": [
                            {
                                "type": "AddonCover",
                                "name": "$addonCover",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getUpdateValidationRules(AddonCover $addonCover): array"
                    }
                ],
                "method_count": 10,
                "complexity_score": 5
            },
            {
                "file_path": "app/Services/BaseService.php",
                "class_info": {
                    "class_name": "BaseService",
                    "extends": "",
                    "implements": [],
                    "uses": [
                        "Illuminate\\Support\\Facades\\DB",
                        "($callbacks) {\r\n            $results = []"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "executeInTransaction",
                        "parameters": [
                            {
                                "type": "callable",
                                "name": "$callback",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "mixed",
                        "has_return_type": false,
                        "docblock": "",
                        "signature": "function executeInTransaction(callable $callback)"
                    },
                    {
                        "name": "createInTransaction",
                        "parameters": [
                            {
                                "type": "callable",
                                "name": "$createCallback",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "mixed",
                        "has_return_type": false,
                        "docblock": "",
                        "signature": "function createInTransaction(callable $createCallback)"
                    },
                    {
                        "name": "updateInTransaction",
                        "parameters": [
                            {
                                "type": "callable",
                                "name": "$updateCallback",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "mixed",
                        "has_return_type": false,
                        "docblock": "",
                        "signature": "function updateInTransaction(callable $updateCallback)"
                    },
                    {
                        "name": "deleteInTransaction",
                        "parameters": [
                            {
                                "type": "callable",
                                "name": "$deleteCallback",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "mixed",
                        "has_return_type": false,
                        "docblock": "",
                        "signature": "function deleteInTransaction(callable $deleteCallback)"
                    },
                    {
                        "name": "executeMultipleInTransaction",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$callbacks",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function executeMultipleInTransaction(array $callbacks): array"
                    }
                ],
                "method_count": 5,
                "complexity_score": 2.5
            },
            {
                "file_path": "app/Services/BranchService.php",
                "class_info": {
                    "class_name": "BranchService",
                    "extends": "BaseService",
                    "implements": [
                        "BranchServiceInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Repositories\\BranchRepositoryInterface",
                        "App\\Contracts\\Services\\BranchServiceInterface",
                        "App\\Models\\Branch",
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Pagination\\LengthAwarePaginator",
                        "($data) {\r\n            return $this->branchRepository->create($data)",
                        "($branch, $data) {\r\n            return $this->branchRepository->update($branch, $data)",
                        "($branch) {\r\n            return $this->branchRepository->delete($branch)",
                        "($branchId, $status) {\r\n            $branch = $this->branchRepository->findById($branchId)"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "__construct",
                        "parameters": [
                            {
                                "type": "BranchRepositoryInterface",
                                "name": "$branchRepository",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "mixed",
                        "has_return_type": false,
                        "docblock": "",
                        "signature": "function __construct(private BranchRepositoryInterface $branchRepository)"
                    },
                    {
                        "name": "getBranches",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$perPage",
                                "default": "10",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "LengthAwarePaginator",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getBranches(Request $request, int $perPage = 10): LengthAwarePaginator"
                    },
                    {
                        "name": "createBranch",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Branch",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function createBranch(array $data): Branch"
                    },
                    {
                        "name": "updateBranch",
                        "parameters": [
                            {
                                "type": "Branch",
                                "name": "$branch",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateBranch(Branch $branch, array $data): bool"
                    },
                    {
                        "name": "deleteBranch",
                        "parameters": [
                            {
                                "type": "Branch",
                                "name": "$branch",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function deleteBranch(Branch $branch): bool"
                    },
                    {
                        "name": "updateBranchStatus",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$branchId",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "bool",
                                "name": "$status",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateBranchStatus(int $branchId, bool $status): bool"
                    },
                    {
                        "name": "getActiveBranches",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getActiveBranches(): Collection"
                    },
                    {
                        "name": "getBranchWithInsurancesCount",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$branchId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "?Branch",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getBranchWithInsurancesCount(int $branchId): ?Branch"
                    },
                    {
                        "name": "searchBranches",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$searchTerm",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$limit",
                                "default": "20",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function searchBranches(string $searchTerm, int $limit = 20): Collection"
                    },
                    {
                        "name": "getBranchStatistics",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getBranchStatistics(): array"
                    },
                    {
                        "name": "getAllBranchesForExport",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getAllBranchesForExport(): Collection"
                    }
                ],
                "method_count": 11,
                "complexity_score": 5.5
            },
            {
                "file_path": "app/Services/BrokerService.php",
                "class_info": {
                    "class_name": "BrokerService",
                    "extends": "BaseService",
                    "implements": [
                        "BrokerServiceInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Services\\BrokerServiceInterface",
                        "App\\Contracts\\Repositories\\BrokerRepositoryInterface",
                        "App\\Exports\\BrokerExport",
                        "App\\Models\\Broker",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Maatwebsite\\Excel\\Facades\\Excel"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "__construct",
                        "parameters": [
                            {
                                "type": "BrokerRepositoryInterface",
                                "name": "$brokerRepository",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "mixed",
                        "has_return_type": false,
                        "docblock": "",
                        "signature": "function __construct(private BrokerRepositoryInterface $brokerRepository)"
                    },
                    {
                        "name": "getBrokers",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "LengthAwarePaginator",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getBrokers(Request $request): LengthAwarePaginator"
                    },
                    {
                        "name": "createBroker",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Broker",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function createBroker(array $data): Broker"
                    },
                    {
                        "name": "updateBroker",
                        "parameters": [
                            {
                                "type": "Broker",
                                "name": "$broker",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "Broker",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateBroker(Broker $broker, array $data): Broker"
                    },
                    {
                        "name": "deleteBroker",
                        "parameters": [
                            {
                                "type": "Broker",
                                "name": "$broker",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function deleteBroker(Broker $broker): bool"
                    },
                    {
                        "name": "updateStatus",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$brokerId",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$status",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateStatus(int $brokerId, int $status): bool"
                    },
                    {
                        "name": "exportBrokers",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "\\Symfony\\Component\\HttpFoundation\\BinaryFileResponse",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function exportBrokers(): \\Symfony\\Component\\HttpFoundation\\BinaryFileResponse"
                    },
                    {
                        "name": "getActiveBrokers",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getActiveBrokers(): Collection"
                    }
                ],
                "method_count": 8,
                "complexity_score": 4
            },
            {
                "file_path": "app/Services/CacheService.php",
                "class_info": {
                    "class_name": "CacheService",
                    "extends": "",
                    "implements": [],
                    "uses": [
                        "Illuminate\\Support\\Facades\\Cache"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getInsuranceCompanies",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "\\Illuminate\\Database\\Eloquent\\Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getInsuranceCompanies(): \\Illuminate\\Database\\Eloquent\\Collection"
                    },
                    {
                        "name": "getBrokers",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "\\Illuminate\\Database\\Eloquent\\Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getBrokers(): \\Illuminate\\Database\\Eloquent\\Collection"
                    },
                    {
                        "name": "getPolicyTypes",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "\\Illuminate\\Database\\Eloquent\\Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPolicyTypes(): \\Illuminate\\Database\\Eloquent\\Collection"
                    },
                    {
                        "name": "getPremiumTypes",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "\\Illuminate\\Database\\Eloquent\\Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPremiumTypes(): \\Illuminate\\Database\\Eloquent\\Collection"
                    },
                    {
                        "name": "getFuelTypes",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "\\Illuminate\\Database\\Eloquent\\Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getFuelTypes(): \\Illuminate\\Database\\Eloquent\\Collection"
                    },
                    {
                        "name": "getActiveUsers",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "\\Illuminate\\Database\\Eloquent\\Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getActiveUsers(): \\Illuminate\\Database\\Eloquent\\Collection"
                    },
                    {
                        "name": "invalidateInsuranceCompanies",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function invalidateInsuranceCompanies(): void"
                    },
                    {
                        "name": "invalidateBrokers",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function invalidateBrokers(): void"
                    },
                    {
                        "name": "invalidatePolicyTypes",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function invalidatePolicyTypes(): void"
                    },
                    {
                        "name": "invalidatePremiumTypes",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function invalidatePremiumTypes(): void"
                    },
                    {
                        "name": "invalidateFuelTypes",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function invalidateFuelTypes(): void"
                    },
                    {
                        "name": "invalidateUsers",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function invalidateUsers(): void"
                    },
                    {
                        "name": "invalidateAll",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function invalidateAll(): void"
                    },
                    {
                        "name": "clearApplicationCache",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function clearApplicationCache(): void"
                    },
                    {
                        "name": "warmupCache",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function warmupCache(): void"
                    },
                    {
                        "name": "cacheCustomerStatistics",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function cacheCustomerStatistics(): array"
                    },
                    {
                        "name": "invalidateCustomerStatistics",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function invalidateCustomerStatistics(): void"
                    },
                    {
                        "name": "cacheQuery",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$method",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$parameters",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "callable",
                                "name": "$query",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$ttl",
                                "default": "null",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 4,
                        "return_type": "mixed",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function cacheQuery(string $method, array $parameters, callable $query, int $ttl = null): mixed"
                    },
                    {
                        "name": "cacheReport",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$reportType",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$parameters",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "callable",
                                "name": "$query",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$ttl",
                                "default": "null",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 4,
                        "return_type": "mixed",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function cacheReport(string $reportType, array $parameters, callable $query, int $ttl = null): mixed"
                    },
                    {
                        "name": "invalidateQueryPattern",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$pattern",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function invalidateQueryPattern(string $pattern): void"
                    },
                    {
                        "name": "invalidateReportPattern",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$pattern",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function invalidateReportPattern(string $pattern): void"
                    },
                    {
                        "name": "getCacheStatistics",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getCacheStatistics(): array"
                    },
                    {
                        "name": "warmupCriticalCaches",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function warmupCriticalCaches(): void"
                    },
                    {
                        "name": "cacheRecentCustomers",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "\\Illuminate\\Database\\Eloquent\\Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function cacheRecentCustomers(): \\Illuminate\\Database\\Eloquent\\Collection"
                    },
                    {
                        "name": "cacheExpiringPolicies",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "\\Illuminate\\Database\\Eloquent\\Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function cacheExpiringPolicies(): \\Illuminate\\Database\\Eloquent\\Collection"
                    },
                    {
                        "name": "generateQueryKey",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$method",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$parameters",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function generateQueryKey(string $method, array $parameters): string"
                    },
                    {
                        "name": "generateReportKey",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$reportType",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$parameters",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function generateReportKey(string $reportType, array $parameters): string"
                    },
                    {
                        "name": "getKeysByPattern",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$pattern",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getKeysByPattern(string $pattern): array"
                    },
                    {
                        "name": "clearPerformanceCaches",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function clearPerformanceCaches(): void"
                    },
                    {
                        "name": "invalidateModelCache",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$model",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "",
                                "name": "$id",
                                "default": "null",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function invalidateModelCache(string $model, $id = null): void"
                    }
                ],
                "method_count": 30,
                "complexity_score": 15
            },
            {
                "file_path": "app/Services/ClaimService.php",
                "class_info": {
                    "class_name": "ClaimService",
                    "extends": "BaseService",
                    "implements": [
                        "ClaimServiceInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Repositories\\ClaimRepositoryInterface",
                        "App\\Contracts\\Services\\ClaimServiceInterface",
                        "App\\Http\\Requests\\StoreClaimRequest",
                        "App\\Http\\Requests\\UpdateClaimRequest",
                        "App\\Models\\Claim",
                        "App\\Models\\CustomerInsurance",
                        "Illuminate\\Database\\Eloquent\\Builder",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Pagination\\LengthAwarePaginator",
                        "Illuminate\\Support\\Facades\\Log",
                        "($request) {\r\n            // Get customer insurance details\r\n            $customerInsurance = CustomerInsurance::with('customer')->findOrFail($request->customer_insurance_id)",
                        "($request, $claim) {\r\n            // Get customer insurance details if changed\r\n            if ($request->customer_insurance_id !== $claim->customer_insurance_id) {\r\n                $customerInsurance = CustomerInsurance::with('customer')->findOrFail($request->customer_insurance_id)",
                        "($searchTerm) {\r\n            $query->where('policy_no', 'like', \"%{$searchTerm}%\")\r\n                  ->orWhere('registration_no', 'like', \"%{$searchTerm}%\")\r\n                  ->orWhereHas('customer', function (Builder $customerQuery) use ($searchTerm) {\r\n                      $customerQuery->where('name', 'like', \"%{$searchTerm}%\")\r\n                                   ->orWhere('email', 'like', \"%{$searchTerm}%\")\r\n                                   ->orWhere('mobile_number', 'like', \"%{$searchTerm}%\")"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "__construct",
                        "parameters": [
                            {
                                "type": "ClaimRepositoryInterface",
                                "name": "$claimRepository",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "mixed",
                        "has_return_type": false,
                        "docblock": "",
                        "signature": "function __construct(ClaimRepositoryInterface $claimRepository)"
                    },
                    {
                        "name": "getClaims",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "LengthAwarePaginator",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getClaims(Request $request): LengthAwarePaginator"
                    },
                    {
                        "name": "createClaim",
                        "parameters": [
                            {
                                "type": "StoreClaimRequest",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Claim",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function createClaim(StoreClaimRequest $request): Claim"
                    },
                    {
                        "name": "updateClaim",
                        "parameters": [
                            {
                                "type": "UpdateClaimRequest",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "Claim",
                                "name": "$claim",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateClaim(UpdateClaimRequest $request, Claim $claim): bool"
                    },
                    {
                        "name": "updateClaimStatus",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$claimId",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "bool",
                                "name": "$status",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateClaimStatus(int $claimId, bool $status): bool"
                    },
                    {
                        "name": "deleteClaim",
                        "parameters": [
                            {
                                "type": "Claim",
                                "name": "$claim",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function deleteClaim(Claim $claim): bool"
                    },
                    {
                        "name": "searchPolicies",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$searchTerm",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function searchPolicies(string $searchTerm): array"
                    },
                    {
                        "name": "formatPolicyText",
                        "parameters": [
                            {
                                "type": "CustomerInsurance",
                                "name": "$policy",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function formatPolicyText(CustomerInsurance $policy): string"
                    },
                    {
                        "name": "suggestInsuranceType",
                        "parameters": [
                            {
                                "type": "CustomerInsurance",
                                "name": "$policy",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function suggestInsuranceType(CustomerInsurance $policy): string"
                    },
                    {
                        "name": "getClaimStatistics",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getClaimStatistics(): array"
                    }
                ],
                "method_count": 10,
                "complexity_score": 5
            },
            {
                "file_path": "app/Services/ContentSecurityPolicyService.php",
                "class_info": {
                    "class_name": "ContentSecurityPolicyService",
                    "extends": "",
                    "implements": [],
                    "uses": [
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Support\\Str"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "__construct",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "mixed",
                        "has_return_type": false,
                        "docblock": "",
                        "signature": "function __construct()"
                    },
                    {
                        "name": "getNonce",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getNonce(): string"
                    },
                    {
                        "name": "getContentSecurityPolicy",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getContentSecurityPolicy(Request $request): array"
                    },
                    {
                        "name": "getSecurityHeaders",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getSecurityHeaders(): array"
                    },
                    {
                        "name": "getCspHeaderName",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getCspHeaderName(): string"
                    },
                    {
                        "name": "buildCspString",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$policy",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function buildCspString(array $policy): string"
                    },
                    {
                        "name": "getScriptSrc",
                        "parameters": [
                            {
                                "type": "bool",
                                "name": "$isAdminPanel",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getScriptSrc(bool $isAdminPanel): string"
                    },
                    {
                        "name": "getStyleSrc",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getStyleSrc(): string"
                    },
                    {
                        "name": "getImageSrc",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getImageSrc(): string"
                    },
                    {
                        "name": "getFontSrc",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getFontSrc(): string"
                    },
                    {
                        "name": "getConnectSrc",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getConnectSrc(): string"
                    },
                    {
                        "name": "getHstsHeader",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getHstsHeader(): string"
                    },
                    {
                        "name": "getPermissionsPolicy",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPermissionsPolicy(): string"
                    },
                    {
                        "name": "isAdminPanel",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function isAdminPanel(Request $request): bool"
                    },
                    {
                        "name": "generateNonceForView",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function generateNonceForView(): string"
                    },
                    {
                        "name": "isNonceValid",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$providedNonce",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function isNonceValid(string $providedNonce): bool"
                    },
                    {
                        "name": "logCspViolation",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$violationData",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function logCspViolation(array $violationData): void"
                    }
                ],
                "method_count": 17,
                "complexity_score": 8.5
            },
            {
                "file_path": "app/Services/CustomerInsuranceService.php",
                "class_info": {
                    "class_name": "CustomerInsuranceService",
                    "extends": "BaseService",
                    "implements": [
                        "CustomerInsuranceServiceInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Services\\CustomerInsuranceServiceInterface",
                        "App\\Contracts\\Repositories\\CustomerInsuranceRepositoryInterface",
                        "App\\Exports\\CustomerInsurancesExport",
                        "App\\Models\\{Branch, Broker, Customer, CustomerInsurance, FuelType, InsuranceCompany, PolicyType, PremiumType, ReferenceUser, RelationshipManager}",
                        "App\\Traits\\WhatsAppApiTrait",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Illuminate\\Support\\{Carbon, Facades\\DB, Facades\\Storage}",
                        "Maatwebsite\\Excel\\Facades\\Excel",
                        "WhatsAppApiTrait",
                        "($search) {\r\n                $q->where('registration_no', 'LIKE', '%' . $search . '%')\r\n                  ->orWhere('policy_no', 'LIKE', '%' . $search . '%')\r\n                  ->orWhere('customers.name', 'LIKE', '%' . $search . '%')\r\n                  ->orWhere('customers.mobile_number', 'LIKE', '%' . $search . '%')",
                        "($data) {\r\n            // Calculate commission breakdown\r\n            $data = $this->calculateCommissionFields($data)",
                        "($customerInsurance, $data) {\r\n            // Calculate commission breakdown\r\n            $data = $this->calculateCommissionFields($data)",
                        "($customerInsurance) {\r\n            // Delete policy document if exists\r\n            if ($customerInsurance->policy_document_path && Storage::exists($customerInsurance->policy_document_path)) {\r\n                Storage::delete($customerInsurance->policy_document_path)",
                        "($customerInsurance, $data) {\r\n            // Calculate commission breakdown for renewal data\r\n            $data = $this->calculateCommissionFields($data)"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "__construct",
                        "parameters": [
                            {
                                "type": "CustomerInsuranceRepositoryInterface",
                                "name": "$customerInsuranceRepository",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "CacheService",
                                "name": "$cacheService",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "mixed",
                        "has_return_type": false,
                        "docblock": "",
                        "signature": "function __construct(private CustomerInsuranceRepositoryInterface $customerInsuranceRepository,\r\n        private CacheService $cacheService)"
                    },
                    {
                        "name": "getCustomerInsurances",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "LengthAwarePaginator",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getCustomerInsurances(Request $request): LengthAwarePaginator"
                    },
                    {
                        "name": "getFormData",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getFormData(): array"
                    },
                    {
                        "name": "getStoreValidationRules",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getStoreValidationRules(): array"
                    },
                    {
                        "name": "getUpdateValidationRules",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getUpdateValidationRules(): array"
                    },
                    {
                        "name": "getRenewalValidationRules",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getRenewalValidationRules(): array"
                    },
                    {
                        "name": "prepareStorageData",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function prepareStorageData(Request $request): array"
                    },
                    {
                        "name": "createCustomerInsurance",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "CustomerInsurance",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function createCustomerInsurance(array $data): CustomerInsurance"
                    },
                    {
                        "name": "updateCustomerInsurance",
                        "parameters": [
                            {
                                "type": "CustomerInsurance",
                                "name": "$customerInsurance",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "CustomerInsurance",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateCustomerInsurance(CustomerInsurance $customerInsurance, array $data): CustomerInsurance"
                    },
                    {
                        "name": "deleteCustomerInsurance",
                        "parameters": [
                            {
                                "type": "CustomerInsurance",
                                "name": "$customerInsurance",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function deleteCustomerInsurance(CustomerInsurance $customerInsurance): bool"
                    },
                    {
                        "name": "updateStatus",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$customerInsuranceId",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$status",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateStatus(int $customerInsuranceId, int $status): bool"
                    },
                    {
                        "name": "handleFileUpload",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "CustomerInsurance",
                                "name": "$customerInsurance",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function handleFileUpload(Request $request, CustomerInsurance $customerInsurance): void"
                    },
                    {
                        "name": "sendWhatsAppDocument",
                        "parameters": [
                            {
                                "type": "CustomerInsurance",
                                "name": "$customerInsurance",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function sendWhatsAppDocument(CustomerInsurance $customerInsurance): bool"
                    },
                    {
                        "name": "sendRenewalReminderWhatsApp",
                        "parameters": [
                            {
                                "type": "CustomerInsurance",
                                "name": "$customerInsurance",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function sendRenewalReminderWhatsApp(CustomerInsurance $customerInsurance): bool"
                    },
                    {
                        "name": "renewPolicy",
                        "parameters": [
                            {
                                "type": "CustomerInsurance",
                                "name": "$customerInsurance",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "CustomerInsurance",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function renewPolicy(CustomerInsurance $customerInsurance, array $data): CustomerInsurance"
                    },
                    {
                        "name": "exportCustomerInsurances",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "\\Symfony\\Component\\HttpFoundation\\BinaryFileResponse",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function exportCustomerInsurances(): \\Symfony\\Component\\HttpFoundation\\BinaryFileResponse"
                    },
                    {
                        "name": "getCustomerPolicies",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$customerId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getCustomerPolicies(int $customerId): Collection"
                    },
                    {
                        "name": "sendPolicyWhatsApp",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$customerInsuranceId",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "string",
                                "name": "$whatsappNumber",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function sendPolicyWhatsApp(int $customerInsuranceId, string $whatsappNumber): array"
                    },
                    {
                        "name": "getExpiringPolicies",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$days",
                                "default": "30",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getExpiringPolicies(int $days = 30): Collection"
                    },
                    {
                        "name": "calculateCommissionBreakdown",
                        "parameters": [
                            {
                                "type": "CustomerInsurance",
                                "name": "$customerInsurance",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function calculateCommissionBreakdown(CustomerInsurance $customerInsurance): array"
                    },
                    {
                        "name": "calculateCommissionFields",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function calculateCommissionFields(array $data): array"
                    },
                    {
                        "name": "prepareRenewalStorageData",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$renewalData",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function prepareRenewalStorageData(array $renewalData): array"
                    }
                ],
                "method_count": 22,
                "complexity_score": 11
            },
            {
                "file_path": "app/Services/CustomerService.php",
                "class_info": {
                    "class_name": "CustomerService",
                    "extends": "BaseService",
                    "implements": [
                        "CustomerServiceInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Repositories\\CustomerRepositoryInterface",
                        "App\\Contracts\\Services\\CustomerServiceInterface",
                        "App\\Events\\Customer\\CustomerRegistered",
                        "App\\Events\\Customer\\CustomerProfileUpdated",
                        "App\\Http\\Requests\\StoreCustomerRequest",
                        "App\\Http\\Requests\\UpdateCustomerRequest",
                        "App\\Models\\Customer",
                        "App\\Services\\FileUploadService",
                        "App\\Traits\\WhatsAppApiTrait",
                        "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Support\\Facades\\DB",
                        "Illuminate\\Support\\Facades\\Validator",
                        "WhatsAppApiTrait",
                        "a different email address.')",
                        "($request) {\r\n            // Create customer with validated data\r\n            $customer = $this->customerRepository->create([\r\n                'name' => $request->name,\r\n                'email' => $request->email,\r\n                'mobile_number' => $request->mobile_number,\r\n                'status' => $request->status,\r\n                'wedding_anniversary_date' => $request->wedding_anniversary_date,\r\n                'engagement_anniversary_date' => $request->engagement_anniversary_date,\r\n                'date_of_birth' => $request->date_of_birth,\r\n                'type' => $request->type,\r\n                'pan_card_number' => $request->pan_card_number,\r\n                'aadhar_card_number' => $request->aadhar_card_number,\r\n                'gst_number' => $request->gst_number,\r\n            ])",
                        "rollback if email sending fails\r\n            try {\r\n                $this->sendWelcomeEmailSync($customer)",
                        "($request, $customer) {\r\n            // Capture original values for change tracking\r\n            $originalValues = $customer->only([\r\n                'name', 'email', 'mobile_number', 'status', 'type',\r\n                'pan_card_number', 'aadhar_card_number', 'gst_number'\r\n            ])",
                        "($customer) {\r\n                $message->to($customer->email, $customer->name)\r\n                        ->subject('Welcome to ' . config('app.name') . ' - Your Customer Account is Ready!')"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "__construct",
                        "parameters": [
                            {
                                "type": "CustomerRepositoryInterface",
                                "name": "$customerRepository",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "FileUploadService",
                                "name": "$fileUploadService",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "mixed",
                        "has_return_type": false,
                        "docblock": "",
                        "signature": "function __construct(private CustomerRepositoryInterface $customerRepository,\r\n        private FileUploadService $fileUploadService)"
                    },
                    {
                        "name": "getCustomers",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "LengthAwarePaginator",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getCustomers(Request $request): LengthAwarePaginator"
                    },
                    {
                        "name": "createCustomer",
                        "parameters": [
                            {
                                "type": "StoreCustomerRequest",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Customer",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function createCustomer(StoreCustomerRequest $request): Customer"
                    },
                    {
                        "name": "updateCustomer",
                        "parameters": [
                            {
                                "type": "UpdateCustomerRequest",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "Customer",
                                "name": "$customer",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateCustomer(UpdateCustomerRequest $request, Customer $customer): bool"
                    },
                    {
                        "name": "updateCustomerStatus",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$customerId",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$status",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateCustomerStatus(int $customerId, int $status): bool"
                    },
                    {
                        "name": "deleteCustomer",
                        "parameters": [
                            {
                                "type": "Customer",
                                "name": "$customer",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function deleteCustomer(Customer $customer): bool"
                    },
                    {
                        "name": "handleCustomerDocuments",
                        "parameters": [
                            {
                                "type": "UpdateCustomerRequest",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "Customer",
                                "name": "$customer",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function handleCustomerDocuments(StoreCustomerRequest|UpdateCustomerRequest $request, Customer $customer): void"
                    },
                    {
                        "name": "sendOnboardingMessage",
                        "parameters": [
                            {
                                "type": "Customer",
                                "name": "$customer",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function sendOnboardingMessage(Customer $customer): bool"
                    },
                    {
                        "name": "getActiveCustomersForSelection",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getActiveCustomersForSelection(): Collection"
                    },
                    {
                        "name": "getCustomersByFamily",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$familyGroupId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getCustomersByFamily(int $familyGroupId): Collection"
                    },
                    {
                        "name": "getCustomersByType",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$type",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getCustomersByType(string $type): Collection"
                    },
                    {
                        "name": "searchCustomers",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$query",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function searchCustomers(string $query): Collection"
                    },
                    {
                        "name": "getCustomerStatistics",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getCustomerStatistics(): array"
                    },
                    {
                        "name": "customerExists",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$customerId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function customerExists(int $customerId): bool"
                    },
                    {
                        "name": "findByEmail",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$email",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "?Customer",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function findByEmail(string $email): ?Customer"
                    },
                    {
                        "name": "findByMobileNumber",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$mobileNumber",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "?Customer",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function findByMobileNumber(string $mobileNumber): ?Customer"
                    },
                    {
                        "name": "generateOnboardingMessage",
                        "parameters": [
                            {
                                "type": "Customer",
                                "name": "$customer",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function generateOnboardingMessage(Customer $customer): string"
                    },
                    {
                        "name": "sendWelcomeEmailSync",
                        "parameters": [
                            {
                                "type": "Customer",
                                "name": "$customer",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function sendWelcomeEmailSync(Customer $customer): void"
                    }
                ],
                "method_count": 18,
                "complexity_score": 9
            },
            {
                "file_path": "app/Services/ErrorTrackingService.php",
                "class_info": {
                    "class_name": "ErrorTrackingService",
                    "extends": "",
                    "implements": [],
                    "uses": [
                        "Illuminate\\Support\\Facades\\Log",
                        "Illuminate\\Support\\Facades\\Mail",
                        "Illuminate\\Support\\Facades\\Cache",
                        "Throwable"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "__construct",
                        "parameters": [
                            {
                                "type": "LoggingService",
                                "name": "$logger",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "mixed",
                        "has_return_type": false,
                        "docblock": "",
                        "signature": "function __construct(LoggingService $logger)"
                    },
                    {
                        "name": "trackError",
                        "parameters": [
                            {
                                "type": "Throwable",
                                "name": "$exception",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$context",
                                "default": "[]",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function trackError(Throwable $exception, array $context = []): void"
                    },
                    {
                        "name": "analyzeError",
                        "parameters": [
                            {
                                "type": "Throwable",
                                "name": "$exception",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$context",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function analyzeError(Throwable $exception, array $context): array"
                    },
                    {
                        "name": "categorizeError",
                        "parameters": [
                            {
                                "type": "Throwable",
                                "name": "$exception",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$context",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function categorizeError(Throwable $exception, array $context): string"
                    },
                    {
                        "name": "determineSeverity",
                        "parameters": [
                            {
                                "type": "Throwable",
                                "name": "$exception",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$context",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "string",
                                "name": "$category",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 3,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function determineSeverity(Throwable $exception, array $context, string $category): string"
                    },
                    {
                        "name": "generateErrorFingerprint",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$class",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "string",
                                "name": "$file",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$line",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "string",
                                "name": "$message",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 4,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function generateErrorFingerprint(string $class, string $file, int $line, string $message): string"
                    },
                    {
                        "name": "handleCriticalError",
                        "parameters": [
                            {
                                "type": "Throwable",
                                "name": "$exception",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$errorData",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$context",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 3,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function handleCriticalError(Throwable $exception, array $errorData, array $context): void"
                    },
                    {
                        "name": "checkErrorRateSpike",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$errorData",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function checkErrorRateSpike(array $errorData): void"
                    },
                    {
                        "name": "updateErrorStatistics",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$errorData",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateErrorStatistics(array $errorData): void"
                    },
                    {
                        "name": "sendCriticalAlert",
                        "parameters": [
                            {
                                "type": "Throwable",
                                "name": "$exception",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$errorData",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$context",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 3,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function sendCriticalAlert(Throwable $exception, array $errorData, array $context): void"
                    },
                    {
                        "name": "sendErrorRateAlert",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$errorCount",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function sendErrorRateAlert(int $errorCount): void"
                    },
                    {
                        "name": "getErrorStatistics",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$days",
                                "default": "7",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getErrorStatistics(int $days = 7): array"
                    },
                    {
                        "name": "clearStatistics",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function clearStatistics(): void"
                    }
                ],
                "method_count": 13,
                "complexity_score": 6.5
            },
            {
                "file_path": "app/Services/FamilyGroupService.php",
                "class_info": {
                    "class_name": "FamilyGroupService",
                    "extends": "BaseService",
                    "implements": [
                        "FamilyGroupServiceInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Repositories\\FamilyGroupRepositoryInterface",
                        "App\\Contracts\\Services\\FamilyGroupServiceInterface",
                        "App\\Models\\FamilyGroup",
                        "App\\Models\\FamilyMember",
                        "App\\Models\\Customer",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Pagination\\LengthAwarePaginator",
                        "Illuminate\\Support\\Facades\\Log",
                        "($data) {\r\n            // Create family group\r\n            $familyGroup = $this->familyGroupRepository->create([\r\n                'name' => $data['name'],\r\n                'family_head_id' => $data['family_head_id'],\r\n                'status' => $data['status'] ?? true,\r\n                'created_by' => auth()->id(),\r\n            ])",
                        "($familyGroup, $data) {\r\n            // Update basic family group data\r\n            $updated = $this->familyGroupRepository->update($familyGroup, [\r\n                'name' => $data['name'],\r\n                'status' => $data['status'] ?? $familyGroup->status,\r\n            ])",
                        "($familyGroup) {\r\n            // Remove all family members\r\n            FamilyMember::where('family_group_id', $familyGroup->id)->delete()",
                        "($familyGroupId, $memberData) {\r\n            // Update customer's family_group_id\r\n            Customer::where('id', $memberData['customer_id'])\r\n                ->update(['family_group_id' => $familyGroupId])",
                        "($familyGroupId, $memberId) {\r\n            // Check if member is family head\r\n            $familyMember = FamilyMember::where('family_group_id', $familyGroupId)\r\n                ->where('customer_id', $memberId)\r\n                ->first()",
                        "($familyGroupId, $newFamilyHeadId) {\r\n            return $this->familyGroupRepository->updateFamilyHead($familyGroupId, $newFamilyHeadId)",
                        "($familyMember) {\r\n            // Prevent removing family head\r\n            if ($familyMember->is_head) {\r\n                throw new \\Exception('Cannot remove family head. Please change family head first or delete the entire family group.')"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "__construct",
                        "parameters": [
                            {
                                "type": "FamilyGroupRepositoryInterface",
                                "name": "$familyGroupRepository",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "mixed",
                        "has_return_type": false,
                        "docblock": "",
                        "signature": "function __construct(FamilyGroupRepositoryInterface $familyGroupRepository)"
                    },
                    {
                        "name": "getFamilyGroups",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "LengthAwarePaginator",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getFamilyGroups(Request $request): LengthAwarePaginator"
                    },
                    {
                        "name": "getFamilyGroupWithMembers",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$familyGroupId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "?FamilyGroup",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getFamilyGroupWithMembers(int $familyGroupId): ?FamilyGroup"
                    },
                    {
                        "name": "createFamilyGroup",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "FamilyGroup",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function createFamilyGroup(array $data): FamilyGroup"
                    },
                    {
                        "name": "updateFamilyGroup",
                        "parameters": [
                            {
                                "type": "FamilyGroup",
                                "name": "$familyGroup",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateFamilyGroup(FamilyGroup $familyGroup, array $data): bool"
                    },
                    {
                        "name": "deleteFamilyGroup",
                        "parameters": [
                            {
                                "type": "FamilyGroup",
                                "name": "$familyGroup",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function deleteFamilyGroup(FamilyGroup $familyGroup): bool"
                    },
                    {
                        "name": "updateFamilyGroupStatus",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$familyGroupId",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "bool",
                                "name": "$status",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateFamilyGroupStatus(int $familyGroupId, bool $status): bool"
                    },
                    {
                        "name": "addFamilyMember",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$familyGroupId",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$memberData",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "FamilyMember",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function addFamilyMember(int $familyGroupId, array $memberData): FamilyMember"
                    },
                    {
                        "name": "removeFamilyMember",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$familyGroupId",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$memberId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function removeFamilyMember(int $familyGroupId, int $memberId): bool"
                    },
                    {
                        "name": "updateFamilyMember",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$familyMemberId",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateFamilyMember(int $familyMemberId, array $data): bool"
                    },
                    {
                        "name": "changeFamilyHead",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$familyGroupId",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$newFamilyHeadId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function changeFamilyHead(int $familyGroupId, int $newFamilyHeadId): bool"
                    },
                    {
                        "name": "setupMemberPasswords",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$memberIds",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "bool",
                                "name": "$forceChange",
                                "default": "true",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function setupMemberPasswords(array $memberIds, bool $forceChange = true): array"
                    },
                    {
                        "name": "sendPasswordNotifications",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$passwordNotifications",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "FamilyGroup",
                                "name": "$familyGroup",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function sendPasswordNotifications(array $passwordNotifications, FamilyGroup $familyGroup): bool"
                    },
                    {
                        "name": "getAvailableCustomers",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$familyGroupId",
                                "default": "null",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "\\Illuminate\\Database\\Eloquent\\Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getAvailableCustomers(?int $familyGroupId = null): \\Illuminate\\Database\\Eloquent\\Collection"
                    },
                    {
                        "name": "cleanupOrphanedRecords",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "int",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function cleanupOrphanedRecords(): int"
                    },
                    {
                        "name": "getFamilyGroupStatistics",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getFamilyGroupStatistics(): array"
                    },
                    {
                        "name": "updateFamilyMembers",
                        "parameters": [
                            {
                                "type": "FamilyGroup",
                                "name": "$familyGroup",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$memberIds",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$relationships",
                                "default": "[]",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 3,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateFamilyMembers(FamilyGroup $familyGroup, array $memberIds, array $relationships = []): void"
                    },
                    {
                        "name": "getAllFamilyGroupsForExport",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "\\Illuminate\\Database\\Eloquent\\Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getAllFamilyGroupsForExport(): \\Illuminate\\Database\\Eloquent\\Collection"
                    },
                    {
                        "name": "removeFamilyMemberByObject",
                        "parameters": [
                            {
                                "type": "FamilyMember",
                                "name": "$familyMember",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function removeFamilyMemberByObject(FamilyMember $familyMember): bool"
                    }
                ],
                "method_count": 19,
                "complexity_score": 9.5
            },
            {
                "file_path": "app/Services/FileUploadService.php",
                "class_info": {
                    "class_name": "FileUploadService",
                    "extends": "",
                    "implements": [],
                    "uses": [
                        "Illuminate\\Http\\UploadedFile",
                        "Illuminate\\Support\\Facades\\Storage"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "uploadCustomerDocument",
                        "parameters": [
                            {
                                "type": "UploadedFile",
                                "name": "$file",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$customerId",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "string",
                                "name": "$documentType",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "string",
                                "name": "$customerName",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 4,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function uploadCustomerDocument(UploadedFile $file, int $customerId, string $documentType, string $customerName): string"
                    },
                    {
                        "name": "deleteFile",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$path",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function deleteFile(string $path): bool"
                    },
                    {
                        "name": "getFileUrl",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$path",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getFileUrl(string $path): string"
                    },
                    {
                        "name": "sanitizeFilename",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$filename",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function sanitizeFilename(string $filename): string"
                    },
                    {
                        "name": "validateFileType",
                        "parameters": [
                            {
                                "type": "UploadedFile",
                                "name": "$file",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$allowedMimes",
                                "default": "['application/pdf'",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function validateFileType(UploadedFile $file, array $allowedMimes = ['application/pdf', 'image/jpeg', 'image/png']): bool"
                    },
                    {
                        "name": "validateFileSize",
                        "parameters": [
                            {
                                "type": "UploadedFile",
                                "name": "$file",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$maxSizeKB",
                                "default": "1024",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function validateFileSize(UploadedFile $file, int $maxSizeKB = 1024): bool"
                    },
                    {
                        "name": "uploadFile",
                        "parameters": [
                            {
                                "type": "UploadedFile",
                                "name": "$file",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "string",
                                "name": "$directory",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function uploadFile(UploadedFile $file, string $directory): array"
                    }
                ],
                "method_count": 7,
                "complexity_score": 3.5
            },
            {
                "file_path": "app/Services/FuelTypeService.php",
                "class_info": {
                    "class_name": "FuelTypeService",
                    "extends": "BaseService",
                    "implements": [],
                    "uses": [
                        "App\\Models\\FuelType"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "createFuelType",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "FuelType",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function createFuelType(array $data): FuelType"
                    },
                    {
                        "name": "updateFuelType",
                        "parameters": [
                            {
                                "type": "FuelType",
                                "name": "$fuelType",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateFuelType(FuelType $fuelType, array $data): bool"
                    },
                    {
                        "name": "deleteFuelType",
                        "parameters": [
                            {
                                "type": "FuelType",
                                "name": "$fuelType",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function deleteFuelType(FuelType $fuelType): bool"
                    },
                    {
                        "name": "updateStatus",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$fuelTypeId",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$status",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateStatus(int $fuelTypeId, int $status): bool"
                    }
                ],
                "method_count": 4,
                "complexity_score": 2
            },
            {
                "file_path": "app/Services/HealthCheckService.php",
                "class_info": {
                    "class_name": "HealthCheckService",
                    "extends": "",
                    "implements": [],
                    "uses": [
                        "Illuminate\\Support\\Facades\\Cache",
                        "Illuminate\\Support\\Facades\\DB",
                        "Illuminate\\Support\\Facades\\Storage",
                        "Throwable"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "__construct",
                        "parameters": [
                            {
                                "type": "LoggingService",
                                "name": "$logger",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "mixed",
                        "has_return_type": false,
                        "docblock": "",
                        "signature": "function __construct(LoggingService $logger)"
                    },
                    {
                        "name": "runHealthChecks",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function runHealthChecks(): array"
                    },
                    {
                        "name": "checkDatabase",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function checkDatabase(): array"
                    },
                    {
                        "name": "checkCache",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function checkCache(): array"
                    },
                    {
                        "name": "checkStorage",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function checkStorage(): array"
                    },
                    {
                        "name": "checkQueue",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function checkQueue(): array"
                    },
                    {
                        "name": "checkMemory",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function checkMemory(): array"
                    },
                    {
                        "name": "checkDisk",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function checkDisk(): array"
                    },
                    {
                        "name": "getMemoryLimit",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "int",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getMemoryLimit(): int"
                    },
                    {
                        "name": "determineOverallStatus",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$checks",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function determineOverallStatus(array $checks): string"
                    },
                    {
                        "name": "getSystemMetrics",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getSystemMetrics(): array"
                    }
                ],
                "method_count": 11,
                "complexity_score": 5.5
            },
            {
                "file_path": "app/Services/InsuranceCompanyService.php",
                "class_info": {
                    "class_name": "InsuranceCompanyService",
                    "extends": "BaseService",
                    "implements": [
                        "InsuranceCompanyServiceInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Services\\InsuranceCompanyServiceInterface",
                        "App\\Contracts\\Repositories\\InsuranceCompanyRepositoryInterface",
                        "App\\Exports\\InsuranceCompanyExport",
                        "App\\Models\\InsuranceCompany",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Maatwebsite\\Excel\\Facades\\Excel"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "__construct",
                        "parameters": [
                            {
                                "type": "InsuranceCompanyRepositoryInterface",
                                "name": "$insuranceCompanyRepository",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "mixed",
                        "has_return_type": false,
                        "docblock": "",
                        "signature": "function __construct(private InsuranceCompanyRepositoryInterface $insuranceCompanyRepository)"
                    },
                    {
                        "name": "getInsuranceCompanies",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "LengthAwarePaginator",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getInsuranceCompanies(Request $request): LengthAwarePaginator"
                    },
                    {
                        "name": "createInsuranceCompany",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "InsuranceCompany",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function createInsuranceCompany(array $data): InsuranceCompany"
                    },
                    {
                        "name": "updateInsuranceCompany",
                        "parameters": [
                            {
                                "type": "InsuranceCompany",
                                "name": "$insuranceCompany",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "InsuranceCompany",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateInsuranceCompany(InsuranceCompany $insuranceCompany, array $data): InsuranceCompany"
                    },
                    {
                        "name": "deleteInsuranceCompany",
                        "parameters": [
                            {
                                "type": "InsuranceCompany",
                                "name": "$insuranceCompany",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function deleteInsuranceCompany(InsuranceCompany $insuranceCompany): bool"
                    },
                    {
                        "name": "updateStatus",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$insuranceCompanyId",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$status",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateStatus(int $insuranceCompanyId, int $status): bool"
                    },
                    {
                        "name": "exportInsuranceCompanies",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "\\Symfony\\Component\\HttpFoundation\\BinaryFileResponse",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function exportInsuranceCompanies(): \\Symfony\\Component\\HttpFoundation\\BinaryFileResponse"
                    },
                    {
                        "name": "getActiveInsuranceCompanies",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getActiveInsuranceCompanies(): Collection"
                    }
                ],
                "method_count": 8,
                "complexity_score": 4
            },
            {
                "file_path": "app/Services/LoggingService.php",
                "class_info": {
                    "class_name": "LoggingService",
                    "extends": "",
                    "implements": [],
                    "uses": [
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Support\\Facades\\Log",
                        "Illuminate\\Support\\Facades\\DB",
                        "Illuminate\\Support\\Str",
                        "Throwable"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "__construct",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "mixed",
                        "has_return_type": false,
                        "docblock": "",
                        "signature": "function __construct()"
                    },
                    {
                        "name": "logEvent",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$event",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$data",
                                "default": "[]",
                                "has_default": true
                            },
                            {
                                "type": "string",
                                "name": "$level",
                                "default": "'info'",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 3,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function logEvent(string $event, array $data = [], string $level = 'info'): void"
                    },
                    {
                        "name": "logUserActivity",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$action",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$userId",
                                "default": "null",
                                "has_default": true
                            },
                            {
                                "type": "array",
                                "name": "$metadata",
                                "default": "[]",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 3,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function logUserActivity(string $action, ?int $userId = null, array $metadata = []): void"
                    },
                    {
                        "name": "logBusinessEvent",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$event",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$businessData",
                                "default": "[]",
                                "has_default": true
                            },
                            {
                                "type": "string",
                                "name": "$entityType",
                                "default": "null",
                                "has_default": true
                            },
                            {
                                "type": "int",
                                "name": "$entityId",
                                "default": "null",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 4,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function logBusinessEvent(string $event, array $businessData = [], string $entityType = null, ?int $entityId = null): void"
                    },
                    {
                        "name": "logPerformanceMetric",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$operation",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "float",
                                "name": "$duration",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$metadata",
                                "default": "[]",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 3,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function logPerformanceMetric(string $operation, float $duration, array $metadata = []): void"
                    },
                    {
                        "name": "logDatabaseQuery",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$query",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "float",
                                "name": "$duration",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$bindings",
                                "default": "[]",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 3,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function logDatabaseQuery(string $query, float $duration, array $bindings = []): void"
                    },
                    {
                        "name": "logSecurityEvent",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$event",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$securityData",
                                "default": "[]",
                                "has_default": true
                            },
                            {
                                "type": "string",
                                "name": "$severity",
                                "default": "'warning'",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 3,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function logSecurityEvent(string $event, array $securityData = [], string $severity = 'warning'): void"
                    },
                    {
                        "name": "logError",
                        "parameters": [
                            {
                                "type": "Throwable",
                                "name": "$exception",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$context",
                                "default": "[]",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function logError(Throwable $exception, array $context = []): void"
                    },
                    {
                        "name": "logApiRequest",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "",
                                "name": "$response",
                                "default": "null",
                                "has_default": true
                            },
                            {
                                "type": "float",
                                "name": "$duration",
                                "default": "0",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 3,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function logApiRequest(Request $request, $response = null, float $duration = 0): void"
                    },
                    {
                        "name": "logCacheOperation",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$operation",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "string",
                                "name": "$key",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "",
                                "name": "$value",
                                "default": "null",
                                "has_default": true
                            },
                            {
                                "type": "bool",
                                "name": "$hit",
                                "default": "null",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 4,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function logCacheOperation(string $operation, string $key, $value = null, bool $hit = null): void"
                    },
                    {
                        "name": "generateTraceId",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function generateTraceId(): string"
                    },
                    {
                        "name": "generateCorrelationId",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function generateCorrelationId(): string"
                    },
                    {
                        "name": "addContext",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$key",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "",
                                "name": "$value",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "self",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function addContext(string $key, $value): self"
                    },
                    {
                        "name": "withContext",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$context",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "self",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function withContext(array $context): self"
                    },
                    {
                        "name": "logSystemHealth",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$healthData",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function logSystemHealth(array $healthData): void"
                    }
                ],
                "method_count": 15,
                "complexity_score": 7.5
            },
            {
                "file_path": "app/Services/MarketingWhatsAppService.php",
                "class_info": {
                    "class_name": "MarketingWhatsAppService",
                    "extends": "BaseService",
                    "implements": [
                        "MarketingWhatsAppServiceInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Repositories\\CustomerRepositoryInterface",
                        "App\\Contracts\\Services\\MarketingWhatsAppServiceInterface",
                        "App\\Services\\FileUploadService",
                        "App\\Traits\\WhatsAppApiTrait",
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Illuminate\\Support\\Facades\\Log",
                        "WhatsAppApiTrait",
                        "($campaignData) {\r\n            $customers = $this->getValidCustomersForMarketing(\r\n                $campaignData['recipients'],\r\n                $campaignData['selected_customers'] ?? []\r\n            )"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "__construct",
                        "parameters": [
                            {
                                "type": "CustomerRepositoryInterface",
                                "name": "$customerRepository",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "FileUploadService",
                                "name": "$fileUploadService",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "mixed",
                        "has_return_type": false,
                        "docblock": "",
                        "signature": "function __construct(CustomerRepositoryInterface $customerRepository,\r\n        FileUploadService $fileUploadService)"
                    },
                    {
                        "name": "getActiveCustomers",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getActiveCustomers(): Collection"
                    },
                    {
                        "name": "getValidCustomersForMarketing",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$recipients",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$selectedCustomerIds",
                                "default": "[]",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getValidCustomersForMarketing(string $recipients, array $selectedCustomerIds = []): Collection"
                    },
                    {
                        "name": "sendMarketingCampaign",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$campaignData",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function sendMarketingCampaign(array $campaignData): array"
                    },
                    {
                        "name": "previewCustomerList",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$recipients",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$selectedCustomerIds",
                                "default": "[]",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function previewCustomerList(string $recipients, array $selectedCustomerIds = []): array"
                    },
                    {
                        "name": "sendTextMessage",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$message",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "string",
                                "name": "$mobileNumber",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$customerId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 3,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function sendTextMessage(string $message, string $mobileNumber, int $customerId): bool"
                    },
                    {
                        "name": "sendImageMessage",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$message",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "string",
                                "name": "$mobileNumber",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "string",
                                "name": "$imagePath",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$customerId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 4,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function sendImageMessage(string $message, string $mobileNumber, string $imagePath, int $customerId): bool"
                    },
                    {
                        "name": "getMarketingStatistics",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getMarketingStatistics(): array"
                    },
                    {
                        "name": "logMarketingAttempt",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$customerId",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "string",
                                "name": "$messageType",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "bool",
                                "name": "$success",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "string",
                                "name": "$error",
                                "default": "null",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 4,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function logMarketingAttempt(int $customerId, string $messageType, bool $success, ?string $error = null): void"
                    },
                    {
                        "name": "getLastCampaignDate",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "?string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getLastCampaignDate(): ?string"
                    },
                    {
                        "name": "getCampaignsThisMonth",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "int",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getCampaignsThisMonth(): int"
                    }
                ],
                "method_count": 11,
                "complexity_score": 5.5
            },
            {
                "file_path": "app/Services/PdfGenerationService.php",
                "class_info": {
                    "class_name": "PdfGenerationService",
                    "extends": "",
                    "implements": [],
                    "uses": [
                        "App\\Models\\Quotation",
                        "Barryvdh\\DomPDF\\Facade\\Pdf",
                        "Illuminate\\Http\\Response"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "generateQuotationPdf",
                        "parameters": [
                            {
                                "type": "Quotation",
                                "name": "$quotation",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Response",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function generateQuotationPdf(Quotation $quotation): Response"
                    },
                    {
                        "name": "generateQuotationPdfForWhatsApp",
                        "parameters": [
                            {
                                "type": "Quotation",
                                "name": "$quotation",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function generateQuotationPdfForWhatsApp(Quotation $quotation): string"
                    },
                    {
                        "name": "generateComparisonPdf",
                        "parameters": [
                            {
                                "type": "Quotation",
                                "name": "$quotation",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Response",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function generateComparisonPdf(Quotation $quotation): Response"
                    },
                    {
                        "name": "calculateSavings",
                        "parameters": [
                            {
                                "type": "Quotation",
                                "name": "$quotation",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function calculateSavings(Quotation $quotation): array"
                    },
                    {
                        "name": "sanitizeFilename",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$filename",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function sanitizeFilename(string $filename): string"
                    }
                ],
                "method_count": 5,
                "complexity_score": 2.5
            },
            {
                "file_path": "app/Services/PermissionService.php",
                "class_info": {
                    "class_name": "PermissionService",
                    "extends": "BaseService",
                    "implements": [
                        "PermissionServiceInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Repositories\\PermissionRepositoryInterface",
                        "App\\Contracts\\Repositories\\RoleRepositoryInterface",
                        "App\\Contracts\\Services\\PermissionServiceInterface",
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Pagination\\LengthAwarePaginator",
                        "Spatie\\Permission\\Models\\Permission",
                        "Spatie\\Permission\\Models\\Role",
                        "($data) {\r\n            return $this->permissionRepository->create($data)",
                        "($permission, $data) {\r\n            return $this->permissionRepository->update($permission, $data)",
                        "($permission) {\r\n            // First remove the permission from all roles\r\n            $permission->roles()->detach()",
                        "($roleId, $permissionIds) {\r\n            $role = $this->roleRepository->findById($roleId)"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "__construct",
                        "parameters": [
                            {
                                "type": "PermissionRepositoryInterface",
                                "name": "$permissionRepository",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "RoleRepositoryInterface",
                                "name": "$roleRepository",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "mixed",
                        "has_return_type": false,
                        "docblock": "",
                        "signature": "function __construct(private PermissionRepositoryInterface $permissionRepository,\r\n        private RoleRepositoryInterface $roleRepository)"
                    },
                    {
                        "name": "getPermissions",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$perPage",
                                "default": "10",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "LengthAwarePaginator",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPermissions(Request $request, int $perPage = 10): LengthAwarePaginator"
                    },
                    {
                        "name": "createPermission",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Permission",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function createPermission(array $data): Permission"
                    },
                    {
                        "name": "updatePermission",
                        "parameters": [
                            {
                                "type": "Permission",
                                "name": "$permission",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updatePermission(Permission $permission, array $data): bool"
                    },
                    {
                        "name": "deletePermission",
                        "parameters": [
                            {
                                "type": "Permission",
                                "name": "$permission",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function deletePermission(Permission $permission): bool"
                    },
                    {
                        "name": "getAllPermissions",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getAllPermissions(): Collection"
                    },
                    {
                        "name": "getPermissionsByRole",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$roleId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPermissionsByRole(int $roleId): Collection"
                    },
                    {
                        "name": "searchPermissions",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$searchTerm",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$limit",
                                "default": "20",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function searchPermissions(string $searchTerm, int $limit = 20): Collection"
                    },
                    {
                        "name": "getPermissionStatistics",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPermissionStatistics(): array"
                    },
                    {
                        "name": "syncRolePermissions",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$roleId",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$permissionIds",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function syncRolePermissions(int $roleId, array $permissionIds): bool"
                    },
                    {
                        "name": "getPermissionsGroupedByModule",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPermissionsGroupedByModule(): array"
                    }
                ],
                "method_count": 11,
                "complexity_score": 5.5
            },
            {
                "file_path": "app/Services/PolicyService.php",
                "class_info": {
                    "class_name": "PolicyService",
                    "extends": "BaseService",
                    "implements": [
                        "PolicyServiceInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Repositories\\PolicyRepositoryInterface",
                        "App\\Contracts\\Services\\PolicyServiceInterface",
                        "App\\Models\\Customer",
                        "App\\Models\\CustomerInsurance",
                        "App\\Traits\\WhatsAppApiTrait",
                        "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Support\\Facades\\DB",
                        "Illuminate\\Support\\Facades\\Log",
                        "WhatsAppApiTrait"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "__construct",
                        "parameters": [
                            {
                                "type": "PolicyRepositoryInterface",
                                "name": "$policyRepository",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "mixed",
                        "has_return_type": false,
                        "docblock": "",
                        "signature": "function __construct(private PolicyRepositoryInterface $policyRepository)"
                    },
                    {
                        "name": "getPolicies",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "LengthAwarePaginator",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPolicies(Request $request): LengthAwarePaginator"
                    },
                    {
                        "name": "createPolicy",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "CustomerInsurance",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function createPolicy(array $data): CustomerInsurance"
                    },
                    {
                        "name": "updatePolicy",
                        "parameters": [
                            {
                                "type": "CustomerInsurance",
                                "name": "$policy",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updatePolicy(CustomerInsurance $policy, array $data): bool"
                    },
                    {
                        "name": "getCustomerPolicies",
                        "parameters": [
                            {
                                "type": "Customer",
                                "name": "$customer",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getCustomerPolicies(Customer $customer): Collection"
                    },
                    {
                        "name": "getPoliciesDueForRenewal",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$daysAhead",
                                "default": "30",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPoliciesDueForRenewal(int $daysAhead = 30): Collection"
                    },
                    {
                        "name": "sendRenewalReminder",
                        "parameters": [
                            {
                                "type": "CustomerInsurance",
                                "name": "$policy",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function sendRenewalReminder(CustomerInsurance $policy): bool"
                    },
                    {
                        "name": "getFamilyPolicies",
                        "parameters": [
                            {
                                "type": "Customer",
                                "name": "$customer",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getFamilyPolicies(Customer $customer): Collection"
                    },
                    {
                        "name": "canCustomerViewPolicy",
                        "parameters": [
                            {
                                "type": "Customer",
                                "name": "$customer",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "CustomerInsurance",
                                "name": "$policy",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function canCustomerViewPolicy(Customer $customer, CustomerInsurance $policy): bool"
                    },
                    {
                        "name": "getPolicyStatistics",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPolicyStatistics(): array"
                    },
                    {
                        "name": "getPoliciesByCompany",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$companyId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPoliciesByCompany(int $companyId): Collection"
                    },
                    {
                        "name": "getActivePolicies",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getActivePolicies(): Collection"
                    },
                    {
                        "name": "getExpiredPolicies",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getExpiredPolicies(): Collection"
                    },
                    {
                        "name": "getPoliciesByType",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$policyTypeId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPoliciesByType(int $policyTypeId): Collection"
                    },
                    {
                        "name": "searchPolicies",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$query",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function searchPolicies(string $query): Collection"
                    },
                    {
                        "name": "deletePolicy",
                        "parameters": [
                            {
                                "type": "CustomerInsurance",
                                "name": "$policy",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function deletePolicy(CustomerInsurance $policy): bool"
                    },
                    {
                        "name": "updatePolicyStatus",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$policyId",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$status",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updatePolicyStatus(int $policyId, int $status): bool"
                    },
                    {
                        "name": "getPolicyCountByStatus",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPolicyCountByStatus(): array"
                    },
                    {
                        "name": "policyExists",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$policyId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function policyExists(int $policyId): bool"
                    },
                    {
                        "name": "getPoliciesForRenewalProcessing",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPoliciesForRenewalProcessing(): Collection"
                    },
                    {
                        "name": "sendBulkRenewalReminders",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$daysAhead",
                                "default": "null",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function sendBulkRenewalReminders(?int $daysAhead = null): array"
                    },
                    {
                        "name": "generateRenewalReminderMessage",
                        "parameters": [
                            {
                                "type": "CustomerInsurance",
                                "name": "$policy",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function generateRenewalReminderMessage(CustomerInsurance $policy): string"
                    }
                ],
                "method_count": 22,
                "complexity_score": 11
            },
            {
                "file_path": "app/Services/PolicyTypeService.php",
                "class_info": {
                    "class_name": "PolicyTypeService",
                    "extends": "BaseService",
                    "implements": [],
                    "uses": [
                        "App\\Models\\PolicyType"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "createPolicyType",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "PolicyType",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function createPolicyType(array $data): PolicyType"
                    },
                    {
                        "name": "updatePolicyType",
                        "parameters": [
                            {
                                "type": "PolicyType",
                                "name": "$policyType",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updatePolicyType(PolicyType $policyType, array $data): bool"
                    },
                    {
                        "name": "deletePolicyType",
                        "parameters": [
                            {
                                "type": "PolicyType",
                                "name": "$policyType",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function deletePolicyType(PolicyType $policyType): bool"
                    },
                    {
                        "name": "updateStatus",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$policyTypeId",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$status",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateStatus(int $policyTypeId, int $status): bool"
                    }
                ],
                "method_count": 4,
                "complexity_score": 2
            },
            {
                "file_path": "app/Services/PremiumTypeService.php",
                "class_info": {
                    "class_name": "PremiumTypeService",
                    "extends": "BaseService",
                    "implements": [],
                    "uses": [
                        "App\\Models\\PremiumType"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "createPremiumType",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "PremiumType",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function createPremiumType(array $data): PremiumType"
                    },
                    {
                        "name": "updatePremiumType",
                        "parameters": [
                            {
                                "type": "PremiumType",
                                "name": "$premiumType",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updatePremiumType(PremiumType $premiumType, array $data): bool"
                    },
                    {
                        "name": "deletePremiumType",
                        "parameters": [
                            {
                                "type": "PremiumType",
                                "name": "$premiumType",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function deletePremiumType(PremiumType $premiumType): bool"
                    },
                    {
                        "name": "updateStatus",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$premiumTypeId",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$status",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateStatus(int $premiumTypeId, int $status): bool"
                    },
                    {
                        "name": "validateVehicleAndLifeInsurance",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function validateVehicleAndLifeInsurance(array $data): void"
                    }
                ],
                "method_count": 5,
                "complexity_score": 2.5
            },
            {
                "file_path": "app/Services/QuotationService.php",
                "class_info": {
                    "class_name": "QuotationService",
                    "extends": "BaseService",
                    "implements": [
                        "QuotationServiceInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Repositories\\QuotationRepositoryInterface",
                        "App\\Contracts\\Services\\QuotationServiceInterface",
                        "App\\Events\\Quotation\\QuotationGenerated",
                        "App\\Models\\Customer",
                        "App\\Models\\InsuranceCompany",
                        "App\\Models\\Quotation",
                        "App\\Models\\QuotationCompany",
                        "App\\Services\\PdfGenerationService",
                        "App\\Traits\\WhatsAppApiTrait",
                        "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Support\\Facades\\DB",
                        "WhatsAppApiTrait",
                        "($data) {\r\n            // Note: QuotationRequested event disabled - policy types handled at company level\r\n\r\n            $data['total_idv'] = $this->calculateTotalIdv($data)",
                        "for commercial purposes.\""
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "__construct",
                        "parameters": [
                            {
                                "type": "PdfGenerationService",
                                "name": "$pdfService",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "QuotationRepositoryInterface",
                                "name": "$quotationRepository",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "mixed",
                        "has_return_type": false,
                        "docblock": "",
                        "signature": "function __construct(private PdfGenerationService $pdfService,\r\n        private QuotationRepositoryInterface $quotationRepository)"
                    },
                    {
                        "name": "createQuotation",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Quotation",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function createQuotation(array $data): Quotation"
                    },
                    {
                        "name": "generateCompanyQuotes",
                        "parameters": [
                            {
                                "type": "Quotation",
                                "name": "$quotation",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function generateCompanyQuotes(Quotation $quotation): void"
                    },
                    {
                        "name": "generateQuotesForSelectedCompanies",
                        "parameters": [
                            {
                                "type": "Quotation",
                                "name": "$quotation",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$companyIds",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function generateQuotesForSelectedCompanies(Quotation $quotation, array $companyIds): void"
                    },
                    {
                        "name": "generateCompanyQuote",
                        "parameters": [
                            {
                                "type": "Quotation",
                                "name": "$quotation",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "InsuranceCompany",
                                "name": "$company",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "QuotationCompany",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function generateCompanyQuote(Quotation $quotation, InsuranceCompany $company): QuotationCompany"
                    },
                    {
                        "name": "calculateBasePremium",
                        "parameters": [
                            {
                                "type": "Quotation",
                                "name": "$quotation",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "InsuranceCompany",
                                "name": "$company",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function calculateBasePremium(Quotation $quotation, InsuranceCompany $company): array"
                    },
                    {
                        "name": "calculateAddonPremiums",
                        "parameters": [
                            {
                                "type": "Quotation",
                                "name": "$quotation",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "InsuranceCompany",
                                "name": "$company",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function calculateAddonPremiums(Quotation $quotation, InsuranceCompany $company): array"
                    },
                    {
                        "name": "calculateAddonPremium",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$addon",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "Quotation",
                                "name": "$quotation",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$rates",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "float",
                                "name": "$companyFactor",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 4,
                        "return_type": "float",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function calculateAddonPremium(string $addon, Quotation $quotation, array $rates, float $companyFactor): float"
                    },
                    {
                        "name": "setRecommendations",
                        "parameters": [
                            {
                                "type": "Quotation",
                                "name": "$quotation",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function setRecommendations(Quotation $quotation): void"
                    },
                    {
                        "name": "sendQuotationViaWhatsApp",
                        "parameters": [
                            {
                                "type": "Quotation",
                                "name": "$quotation",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function sendQuotationViaWhatsApp(Quotation $quotation): void"
                    },
                    {
                        "name": "generateWhatsAppMessageWithAttachment",
                        "parameters": [
                            {
                                "type": "Quotation",
                                "name": "$quotation",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function generateWhatsAppMessageWithAttachment(Quotation $quotation): string"
                    },
                    {
                        "name": "generatePdf",
                        "parameters": [
                            {
                                "type": "Quotation",
                                "name": "$quotation",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "mixed",
                        "has_return_type": false,
                        "docblock": "",
                        "signature": "function generatePdf(Quotation $quotation)"
                    },
                    {
                        "name": "calculateTotalIdv",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "float",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function calculateTotalIdv(array $data): float"
                    },
                    {
                        "name": "generateQuoteNumber",
                        "parameters": [
                            {
                                "type": "Quotation",
                                "name": "$quotation",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "",
                                "name": "$companyId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function generateQuoteNumber(Quotation $quotation, $companyId): string"
                    },
                    {
                        "name": "getCompanyRatingFactor",
                        "parameters": [
                            {
                                "type": "InsuranceCompany",
                                "name": "$company",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "float",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getCompanyRatingFactor(InsuranceCompany $company): float"
                    },
                    {
                        "name": "getBasicOdRate",
                        "parameters": [
                            {
                                "type": "Quotation",
                                "name": "$quotation",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "float",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getBasicOdRate(Quotation $quotation): float"
                    },
                    {
                        "name": "getAddonRates",
                        "parameters": [
                            {
                                "type": "InsuranceCompany",
                                "name": "$company",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getAddonRates(InsuranceCompany $company): array"
                    },
                    {
                        "name": "calculateRoadsideAssistance",
                        "parameters": [
                            {
                                "type": "InsuranceCompany",
                                "name": "$company",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "float",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function calculateRoadsideAssistance(InsuranceCompany $company): float"
                    },
                    {
                        "name": "getCompanyBenefits",
                        "parameters": [
                            {
                                "type": "InsuranceCompany",
                                "name": "$company",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getCompanyBenefits(InsuranceCompany $company): string"
                    },
                    {
                        "name": "getCompanyExclusions",
                        "parameters": [
                            {
                                "type": "InsuranceCompany",
                                "name": "$company",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getCompanyExclusions(InsuranceCompany $company): string"
                    },
                    {
                        "name": "createManualCompanyQuotes",
                        "parameters": [
                            {
                                "type": "Quotation",
                                "name": "$quotation",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$companies",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function createManualCompanyQuotes(Quotation $quotation, array $companies): void"
                    },
                    {
                        "name": "processAddonBreakdown",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function processAddonBreakdown(array $data): array"
                    },
                    {
                        "name": "createManualCompanyQuote",
                        "parameters": [
                            {
                                "type": "Quotation",
                                "name": "$quotation",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "QuotationCompany",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function createManualCompanyQuote(Quotation $quotation, array $data): QuotationCompany"
                    },
                    {
                        "name": "updateQuotationWithCompanies",
                        "parameters": [
                            {
                                "type": "Quotation",
                                "name": "$quotation",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateQuotationWithCompanies(Quotation $quotation, array $data): void"
                    },
                    {
                        "name": "setRankings",
                        "parameters": [
                            {
                                "type": "Quotation",
                                "name": "$quotation",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function setRankings(Quotation $quotation): void"
                    },
                    {
                        "name": "getQuotations",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "LengthAwarePaginator",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getQuotations(Request $request): LengthAwarePaginator"
                    },
                    {
                        "name": "deleteQuotation",
                        "parameters": [
                            {
                                "type": "Quotation",
                                "name": "$quotation",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function deleteQuotation(Quotation $quotation): bool"
                    },
                    {
                        "name": "calculatePremium",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "float",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function calculatePremium(array $data): float"
                    },
                    {
                        "name": "getQuotationFormData",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getQuotationFormData(): array"
                    }
                ],
                "method_count": 29,
                "complexity_score": 14.5
            },
            {
                "file_path": "app/Services/ReferenceUserService.php",
                "class_info": {
                    "class_name": "ReferenceUserService",
                    "extends": "BaseService",
                    "implements": [],
                    "uses": [
                        "App\\Models\\ReferenceUser"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "createReferenceUser",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "ReferenceUser",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function createReferenceUser(array $data): ReferenceUser"
                    },
                    {
                        "name": "updateReferenceUser",
                        "parameters": [
                            {
                                "type": "ReferenceUser",
                                "name": "$referenceUser",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateReferenceUser(ReferenceUser $referenceUser, array $data): bool"
                    },
                    {
                        "name": "deleteReferenceUser",
                        "parameters": [
                            {
                                "type": "ReferenceUser",
                                "name": "$referenceUser",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function deleteReferenceUser(ReferenceUser $referenceUser): bool"
                    },
                    {
                        "name": "updateStatus",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$referenceUserId",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$status",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateStatus(int $referenceUserId, int $status): bool"
                    }
                ],
                "method_count": 4,
                "complexity_score": 2
            },
            {
                "file_path": "app/Services/RelationshipManagerService.php",
                "class_info": {
                    "class_name": "RelationshipManagerService",
                    "extends": "BaseService",
                    "implements": [],
                    "uses": [
                        "App\\Models\\RelationshipManager"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "createRelationshipManager",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "RelationshipManager",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function createRelationshipManager(array $data): RelationshipManager"
                    },
                    {
                        "name": "updateRelationshipManager",
                        "parameters": [
                            {
                                "type": "RelationshipManager",
                                "name": "$relationshipManager",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateRelationshipManager(RelationshipManager $relationshipManager, array $data): bool"
                    },
                    {
                        "name": "deleteRelationshipManager",
                        "parameters": [
                            {
                                "type": "RelationshipManager",
                                "name": "$relationshipManager",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function deleteRelationshipManager(RelationshipManager $relationshipManager): bool"
                    },
                    {
                        "name": "updateStatus",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$relationshipManagerId",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$status",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateStatus(int $relationshipManagerId, int $status): bool"
                    }
                ],
                "method_count": 4,
                "complexity_score": 2
            },
            {
                "file_path": "app/Services/ReportService.php",
                "class_info": {
                    "class_name": "ReportService",
                    "extends": "",
                    "implements": [
                        "ReportServiceInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Services\\ReportServiceInterface",
                        "App\\Exports\\CrossSellingExport",
                        "App\\Exports\\CustomerInsurancesExport1",
                        "App\\Models\\Branch",
                        "App\\Models\\Broker",
                        "App\\Models\\Customer",
                        "App\\Models\\FuelType",
                        "App\\Models\\InsuranceCompany",
                        "App\\Models\\PolicyType",
                        "App\\Models\\PremiumType",
                        "App\\Models\\ReferenceUser",
                        "App\\Models\\RelationshipManager",
                        "App\\Models\\Report",
                        "Illuminate\\Support\\Carbon",
                        "Maatwebsite\\Excel\\Facades\\Excel",
                        "Symfony\\Component\\HttpFoundation\\BinaryFileResponse",
                        "($parameters) {\n                if (!empty($parameters['issue_start_date'])) {\n                    try {\n                        $startDate = Carbon::createFromFormat('d/m/Y', $parameters['issue_start_date'])->format('Y-m-d')",
                        "($parameters) {\n                $query->where('broker_id', $parameters['broker_id'])",
                        "($parameters) {\n                $query->where('relationship_manager_id', $parameters['relationship_manager_id'])",
                        "($parameters) {\n                $query->where('insurance_company_id', $parameters['insurance_company_id'])",
                        "($premiumTypes, $oneYearAgo, $hasDateFilter) {\n            $customerData = ['Customer Name' => $customer->name]",
                        "($premiumType) {\n                    return $insurance->premiumType->id === $premiumType->id",
                        "($premiumType) {\n                return $insurance->premiumType->id === $premiumType->id",
                        "($oneYearAgo) {\n                    return $query->where('start_date', '>=', $oneYearAgo)",
                        "($oneYearAgo) {\n                    return $query->where('actual_earnings', '>=', $oneYearAgo)"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "__construct",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "mixed",
                        "has_return_type": false,
                        "docblock": "",
                        "signature": "function __construct()"
                    },
                    {
                        "name": "getInitialData",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getInitialData(): array"
                    },
                    {
                        "name": "generateCrossSellingReport",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$parameters",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function generateCrossSellingReport(array $parameters): array"
                    },
                    {
                        "name": "generateCustomerInsuranceReport",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$parameters",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function generateCustomerInsuranceReport(array $parameters): array"
                    },
                    {
                        "name": "exportCrossSellingReport",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$parameters",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "BinaryFileResponse",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function exportCrossSellingReport(array $parameters): BinaryFileResponse"
                    },
                    {
                        "name": "exportCustomerInsuranceReport",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$parameters",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "BinaryFileResponse",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function exportCustomerInsuranceReport(array $parameters): BinaryFileResponse"
                    },
                    {
                        "name": "saveUserReportColumns",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$reportName",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$selectedColumns",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$userId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 3,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function saveUserReportColumns(string $reportName, array $selectedColumns, int $userId): void"
                    },
                    {
                        "name": "loadUserReportColumns",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$reportName",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$userId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "?array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function loadUserReportColumns(string $reportName, int $userId): ?array"
                    },
                    {
                        "name": "analyzeCustomerCrossSellingData",
                        "parameters": [
                            {
                                "type": "",
                                "name": "$customer",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "",
                                "name": "$premiumTypes",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "",
                                "name": "$oneYearAgo",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "",
                                "name": "$hasDateFilter",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 4,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function analyzeCustomerCrossSellingData($customer, $premiumTypes, $oneYearAgo, $hasDateFilter): array"
                    }
                ],
                "method_count": 9,
                "complexity_score": 4.5
            },
            {
                "file_path": "app/Services/RoleService.php",
                "class_info": {
                    "class_name": "RoleService",
                    "extends": "BaseService",
                    "implements": [
                        "RoleServiceInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Repositories\\RoleRepositoryInterface",
                        "App\\Contracts\\Repositories\\UserRepositoryInterface",
                        "App\\Contracts\\Services\\RoleServiceInterface",
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Pagination\\LengthAwarePaginator",
                        "Spatie\\Permission\\Models\\Role",
                        "($data) {\r\n            $role = $this->roleRepository->create([\r\n                'name' => $data['name'],\r\n                'guard_name' => $data['guard_name'] ?? 'web'\r\n            ])",
                        "($role, $data) {\r\n            $updated = $this->roleRepository->update($role, [\r\n                'name' => $data['name'],\r\n                'guard_name' => $data['guard_name'] ?? $role->guard_name\r\n            ])",
                        "($role) {\r\n            // First remove the role from all users\r\n            $role->users()->detach()",
                        "($roleId, $permissionIds) {\r\n            $role = $this->roleRepository->findById($roleId)",
                        "($roleId, $permissionIds) {\r\n            $role = $this->roleRepository->findById($roleId)",
                        "($userId, $roleId) {\r\n            $user = $this->userRepository->findById($userId)",
                        "($userId, $roleId) {\r\n            $user = $this->userRepository->findById($userId)"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "__construct",
                        "parameters": [
                            {
                                "type": "RoleRepositoryInterface",
                                "name": "$roleRepository",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "UserRepositoryInterface",
                                "name": "$userRepository",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "mixed",
                        "has_return_type": false,
                        "docblock": "",
                        "signature": "function __construct(private RoleRepositoryInterface $roleRepository,\r\n        private UserRepositoryInterface $userRepository)"
                    },
                    {
                        "name": "getRoles",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$perPage",
                                "default": "10",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "LengthAwarePaginator",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getRoles(Request $request, int $perPage = 10): LengthAwarePaginator"
                    },
                    {
                        "name": "createRole",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Role",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function createRole(array $data): Role"
                    },
                    {
                        "name": "updateRole",
                        "parameters": [
                            {
                                "type": "Role",
                                "name": "$role",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateRole(Role $role, array $data): bool"
                    },
                    {
                        "name": "deleteRole",
                        "parameters": [
                            {
                                "type": "Role",
                                "name": "$role",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function deleteRole(Role $role): bool"
                    },
                    {
                        "name": "getAllRoles",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getAllRoles(): Collection"
                    },
                    {
                        "name": "getRolesByUser",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$userId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getRolesByUser(int $userId): Collection"
                    },
                    {
                        "name": "searchRoles",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$searchTerm",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$limit",
                                "default": "20",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function searchRoles(string $searchTerm, int $limit = 20): Collection"
                    },
                    {
                        "name": "getRoleStatistics",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getRoleStatistics(): array"
                    },
                    {
                        "name": "assignPermissionsToRole",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$roleId",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$permissionIds",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function assignPermissionsToRole(int $roleId, array $permissionIds): bool"
                    },
                    {
                        "name": "removePermissionsFromRole",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$roleId",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$permissionIds",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function removePermissionsFromRole(int $roleId, array $permissionIds): bool"
                    },
                    {
                        "name": "assignRoleToUser",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$userId",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$roleId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function assignRoleToUser(int $userId, int $roleId): bool"
                    },
                    {
                        "name": "removeRoleFromUser",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$userId",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$roleId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function removeRoleFromUser(int $userId, int $roleId): bool"
                    },
                    {
                        "name": "getRoleWithPermissions",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$roleId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "?Role",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getRoleWithPermissions(int $roleId): ?Role"
                    },
                    {
                        "name": "getUsersCountByRole",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$roleId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "int",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getUsersCountByRole(int $roleId): int"
                    }
                ],
                "method_count": 15,
                "complexity_score": 7.5
            },
            {
                "file_path": "app/Services/SecurityService.php",
                "class_info": {
                    "class_name": "SecurityService",
                    "extends": "",
                    "implements": [],
                    "uses": [],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getContentSecurityPolicy",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getContentSecurityPolicy(): array"
                    },
                    {
                        "name": "getSecurityHeaders",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getSecurityHeaders(): array"
                    },
                    {
                        "name": "sanitizeInput",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$input",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function sanitizeInput(string $input): string"
                    },
                    {
                        "name": "validateFileUpload",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$filePath",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$allowedTypes",
                                "default": "['jpg'",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function validateFileUpload(string $filePath, array $allowedTypes = ['jpg', 'jpeg', 'png', 'pdf']): bool"
                    },
                    {
                        "name": "generateSecureToken",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$length",
                                "default": "32",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "string",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function generateSecureToken(int $length = 32): string"
                    },
                    {
                        "name": "logSecurityEvent",
                        "parameters": [
                            {
                                "type": "string",
                                "name": "$event",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$context",
                                "default": "[]",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function logSecurityEvent(string $event, array $context = []): void"
                    }
                ],
                "method_count": 6,
                "complexity_score": 3
            },
            {
                "file_path": "app/Services/UserService.php",
                "class_info": {
                    "class_name": "UserService",
                    "extends": "BaseService",
                    "implements": [
                        "UserServiceInterface"
                    ],
                    "uses": [
                        "App\\Contracts\\Services\\UserServiceInterface",
                        "App\\Contracts\\Repositories\\UserRepositoryInterface",
                        "App\\Exports\\UserExport",
                        "App\\Models\\User",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Illuminate\\Support\\Facades\\Hash",
                        "Maatwebsite\\Excel\\Facades\\Excel",
                        "Spatie\\Permission\\Models\\Role",
                        "($data) {\r\n            if (isset($data['password'])) {\r\n                $data['password'] = Hash::make($data['password'])",
                        "($user, $data) {\r\n            if (isset($data['password']) && !empty($data['password'])) {\r\n                $data['password'] = Hash::make($data['password'])",
                        "($user, $roles) {\r\n            $user->syncRoles($roles)",
                        "($user, $newPassword) {\r\n            $hashedPassword = Hash::make($newPassword)"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "__construct",
                        "parameters": [
                            {
                                "type": "UserRepositoryInterface",
                                "name": "$userRepository",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "mixed",
                        "has_return_type": false,
                        "docblock": "",
                        "signature": "function __construct(private UserRepositoryInterface $userRepository)"
                    },
                    {
                        "name": "getUsers",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "LengthAwarePaginator",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getUsers(Request $request): LengthAwarePaginator"
                    },
                    {
                        "name": "createUser",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "User",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function createUser(array $data): User"
                    },
                    {
                        "name": "updateUser",
                        "parameters": [
                            {
                                "type": "User",
                                "name": "$user",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "User",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateUser(User $user, array $data): User"
                    },
                    {
                        "name": "deleteUser",
                        "parameters": [
                            {
                                "type": "User",
                                "name": "$user",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function deleteUser(User $user): bool"
                    },
                    {
                        "name": "updateStatus",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$userId",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$status",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function updateStatus(int $userId, int $status): bool"
                    },
                    {
                        "name": "assignRoles",
                        "parameters": [
                            {
                                "type": "User",
                                "name": "$user",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "array",
                                "name": "$roles",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "void",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function assignRoles(User $user, array $roles): void"
                    },
                    {
                        "name": "exportUsers",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "\\Symfony\\Component\\HttpFoundation\\BinaryFileResponse",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function exportUsers(): \\Symfony\\Component\\HttpFoundation\\BinaryFileResponse"
                    },
                    {
                        "name": "getActiveUsers",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getActiveUsers(): Collection"
                    },
                    {
                        "name": "changePassword",
                        "parameters": [
                            {
                                "type": "User",
                                "name": "$user",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "string",
                                "name": "$newPassword",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "bool",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function changePassword(User $user, string $newPassword): bool"
                    },
                    {
                        "name": "getUserWithRoles",
                        "parameters": [
                            {
                                "type": "int",
                                "name": "$userId",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "?User",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getUserWithRoles(int $userId): ?User"
                    },
                    {
                        "name": "getStoreValidationRules",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getStoreValidationRules(): array"
                    },
                    {
                        "name": "getUpdateValidationRules",
                        "parameters": [
                            {
                                "type": "User",
                                "name": "$user",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getUpdateValidationRules(User $user): array"
                    },
                    {
                        "name": "getPasswordValidationRules",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPasswordValidationRules(): array"
                    },
                    {
                        "name": "getRoles",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getRoles(): Collection"
                    }
                ],
                "method_count": 15,
                "complexity_score": 7.5
            }
        ],
        "interfaces": [
            {
                "file_path": "app/Contracts/Services/AddonCoverServiceInterface.php",
                "class_info": {
                    "class_name": "AddonCoverServiceInterface",
                    "extends": "",
                    "implements": [],
                    "uses": [
                        "App\\Models\\AddonCover",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getAddonCovers",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "LengthAwarePaginator;\r\n    \r\n    public function createAddonCover(array $data): AddonCover;\r\n    \r\n    public function updateAddonCover(AddonCover $addonCover, array $data): AddonCover;\r\n    \r\n    public function deleteAddonCover(AddonCover $addonCover): bool;\r\n    \r\n    public function updateStatus(int $addonCoverId, int $status): bool;\r\n    \r\n    public function exportAddonCovers(): \\Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\r\n    \r\n    public function getActiveAddonCovers(): \\Illuminate\\Database\\Eloquent\\Collection;\r\n    \r\n    public function getStoreValidationRules(): array;\r\n    \r\n    public function getUpdateValidationRules(AddonCover $addonCover): array;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getAddonCovers(Request $request): LengthAwarePaginator;\r\n    \r\n    public function createAddonCover(array $data): AddonCover;\r\n    \r\n    public function updateAddonCover(AddonCover $addonCover, array $data): AddonCover;\r\n    \r\n    public function deleteAddonCover(AddonCover $addonCover): bool;\r\n    \r\n    public function updateStatus(int $addonCoverId, int $status): bool;\r\n    \r\n    public function exportAddonCovers(): \\Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\r\n    \r\n    public function getActiveAddonCovers(): \\Illuminate\\Database\\Eloquent\\Collection;\r\n    \r\n    public function getStoreValidationRules(): array;\r\n    \r\n    public function getUpdateValidationRules(AddonCover $addonCover): array;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Services/BranchServiceInterface.php",
                "class_info": {
                    "class_name": "BranchServiceInterface",
                    "extends": "",
                    "implements": [],
                    "uses": [
                        "App\\Models\\Branch",
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Pagination\\LengthAwarePaginator"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getBranches",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$perPage",
                                "default": "10",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "LengthAwarePaginator;\r\n\r\n    /**\r\n     * Create a new branch\r\n     *\r\n     * @param array $data\r\n     * @return Branch\r\n     */\r\n    public function createBranch(array $data): Branch;\r\n\r\n    /**\r\n     * Update an existing branch\r\n     *\r\n     * @param Branch $branch\r\n     * @param array $data\r\n     * @return bool\r\n     */\r\n    public function updateBranch(Branch $branch, array $data): bool;\r\n\r\n    /**\r\n     * Delete a branch\r\n     *\r\n     * @param Branch $branch\r\n     * @return bool\r\n     */\r\n    public function deleteBranch(Branch $branch): bool;\r\n\r\n    /**\r\n     * Update branch status\r\n     *\r\n     * @param int $branchId\r\n     * @param bool $status\r\n     * @return bool\r\n     */\r\n    public function updateBranchStatus(int $branchId, bool $status): bool;\r\n\r\n    /**\r\n     * Get active branches for dropdown/select options\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getActiveBranches(): Collection;\r\n\r\n    /**\r\n     * Get branch with customer insurances count\r\n     *\r\n     * @param int $branchId\r\n     * @return Branch|null\r\n     */\r\n    public function getBranchWithInsurancesCount(int $branchId): ?Branch;\r\n\r\n    /**\r\n     * Search branches by name\r\n     *\r\n     * @param string $searchTerm\r\n     * @param int $limit\r\n     * @return Collection\r\n     */\r\n    public function searchBranches(string $searchTerm, int $limit = 20): Collection;\r\n\r\n    /**\r\n     * Get branch statistics\r\n     *\r\n     * @return array\r\n     */\r\n    public function getBranchStatistics(): array;\r\n\r\n    /**\r\n     * Get all branches for export\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getAllBranchesForExport(): Collection;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getBranches(Request $request, int $perPage = 10): LengthAwarePaginator;\r\n\r\n    /**\r\n     * Create a new branch\r\n     *\r\n     * @param array $data\r\n     * @return Branch\r\n     */\r\n    public function createBranch(array $data): Branch;\r\n\r\n    /**\r\n     * Update an existing branch\r\n     *\r\n     * @param Branch $branch\r\n     * @param array $data\r\n     * @return bool\r\n     */\r\n    public function updateBranch(Branch $branch, array $data): bool;\r\n\r\n    /**\r\n     * Delete a branch\r\n     *\r\n     * @param Branch $branch\r\n     * @return bool\r\n     */\r\n    public function deleteBranch(Branch $branch): bool;\r\n\r\n    /**\r\n     * Update branch status\r\n     *\r\n     * @param int $branchId\r\n     * @param bool $status\r\n     * @return bool\r\n     */\r\n    public function updateBranchStatus(int $branchId, bool $status): bool;\r\n\r\n    /**\r\n     * Get active branches for dropdown/select options\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getActiveBranches(): Collection;\r\n\r\n    /**\r\n     * Get branch with customer insurances count\r\n     *\r\n     * @param int $branchId\r\n     * @return Branch|null\r\n     */\r\n    public function getBranchWithInsurancesCount(int $branchId): ?Branch;\r\n\r\n    /**\r\n     * Search branches by name\r\n     *\r\n     * @param string $searchTerm\r\n     * @param int $limit\r\n     * @return Collection\r\n     */\r\n    public function searchBranches(string $searchTerm, int $limit = 20): Collection;\r\n\r\n    /**\r\n     * Get branch statistics\r\n     *\r\n     * @return array\r\n     */\r\n    public function getBranchStatistics(): array;\r\n\r\n    /**\r\n     * Get all branches for export\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getAllBranchesForExport(): Collection;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Services/BrokerServiceInterface.php",
                "class_info": {
                    "class_name": "BrokerServiceInterface",
                    "extends": "",
                    "implements": [],
                    "uses": [
                        "App\\Models\\Broker",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getBrokers",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "LengthAwarePaginator;\r\n    \r\n    public function createBroker(array $data): Broker;\r\n    \r\n    public function updateBroker(Broker $broker, array $data): Broker;\r\n    \r\n    public function deleteBroker(Broker $broker): bool;\r\n    \r\n    public function updateStatus(int $brokerId, int $status): bool;\r\n    \r\n    public function exportBrokers(): \\Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\r\n    \r\n    public function getActiveBrokers(): \\Illuminate\\Database\\Eloquent\\Collection;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getBrokers(Request $request): LengthAwarePaginator;\r\n    \r\n    public function createBroker(array $data): Broker;\r\n    \r\n    public function updateBroker(Broker $broker, array $data): Broker;\r\n    \r\n    public function deleteBroker(Broker $broker): bool;\r\n    \r\n    public function updateStatus(int $brokerId, int $status): bool;\r\n    \r\n    public function exportBrokers(): \\Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\r\n    \r\n    public function getActiveBrokers(): \\Illuminate\\Database\\Eloquent\\Collection;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Services/ClaimServiceInterface.php",
                "class_info": {
                    "class_name": "ClaimServiceInterface",
                    "extends": "",
                    "implements": [],
                    "uses": [
                        "App\\Http\\Requests\\StoreClaimRequest",
                        "App\\Http\\Requests\\UpdateClaimRequest",
                        "App\\Models\\Claim",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Pagination\\LengthAwarePaginator"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getClaims",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "LengthAwarePaginator;\r\n\r\n    /**\r\n     * Create a new claim with default documents and initial stage\r\n     *\r\n     * @param StoreClaimRequest $request\r\n     * @return Claim\r\n     */\r\n    public function createClaim(StoreClaimRequest $request): Claim;\r\n\r\n    /**\r\n     * Update an existing claim\r\n     *\r\n     * @param UpdateClaimRequest $request\r\n     * @param Claim $claim\r\n     * @return bool\r\n     */\r\n    public function updateClaim(UpdateClaimRequest $request, Claim $claim): bool;\r\n\r\n    /**\r\n     * Update claim status\r\n     *\r\n     * @param int $claimId\r\n     * @param bool $status\r\n     * @return bool\r\n     */\r\n    public function updateClaimStatus(int $claimId, bool $status): bool;\r\n\r\n    /**\r\n     * Delete a claim (soft delete)\r\n     *\r\n     * @param Claim $claim\r\n     * @return bool\r\n     */\r\n    public function deleteClaim(Claim $claim): bool;\r\n\r\n    /**\r\n     * Search for policies/insurances with wildcard functionality\r\n     *\r\n     * @param string $searchTerm\r\n     * @return array\r\n     */\r\n    public function searchPolicies(string $searchTerm): array;\r\n\r\n    /**\r\n     * Get claim statistics for dashboard\r\n     *\r\n     * @return array\r\n     */\r\n    public function getClaimStatistics(): array;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getClaims(Request $request): LengthAwarePaginator;\r\n\r\n    /**\r\n     * Create a new claim with default documents and initial stage\r\n     *\r\n     * @param StoreClaimRequest $request\r\n     * @return Claim\r\n     */\r\n    public function createClaim(StoreClaimRequest $request): Claim;\r\n\r\n    /**\r\n     * Update an existing claim\r\n     *\r\n     * @param UpdateClaimRequest $request\r\n     * @param Claim $claim\r\n     * @return bool\r\n     */\r\n    public function updateClaim(UpdateClaimRequest $request, Claim $claim): bool;\r\n\r\n    /**\r\n     * Update claim status\r\n     *\r\n     * @param int $claimId\r\n     * @param bool $status\r\n     * @return bool\r\n     */\r\n    public function updateClaimStatus(int $claimId, bool $status): bool;\r\n\r\n    /**\r\n     * Delete a claim (soft delete)\r\n     *\r\n     * @param Claim $claim\r\n     * @return bool\r\n     */\r\n    public function deleteClaim(Claim $claim): bool;\r\n\r\n    /**\r\n     * Search for policies/insurances with wildcard functionality\r\n     *\r\n     * @param string $searchTerm\r\n     * @return array\r\n     */\r\n    public function searchPolicies(string $searchTerm): array;\r\n\r\n    /**\r\n     * Get claim statistics for dashboard\r\n     *\r\n     * @return array\r\n     */\r\n    public function getClaimStatistics(): array;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Services/CustomerInsuranceServiceInterface.php",
                "class_info": {
                    "class_name": "CustomerInsuranceServiceInterface",
                    "extends": "",
                    "implements": [],
                    "uses": [
                        "App\\Models\\CustomerInsurance",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Illuminate\\Database\\Eloquent\\Collection"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getCustomerInsurances",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "LengthAwarePaginator;\r\n    \r\n    /**\r\n     * Get data for create/edit forms\r\n     */\r\n    public function getFormData(): array;\r\n    \r\n    /**\r\n     * Get validation rules for store operation\r\n     */\r\n    public function getStoreValidationRules(): array;\r\n    \r\n    /**\r\n     * Get validation rules for update operation\r\n     */\r\n    public function getUpdateValidationRules(): array;\r\n    \r\n    /**\r\n     * Get validation rules for renewal operation\r\n     */\r\n    public function getRenewalValidationRules(): array;\r\n    \r\n    /**\r\n     * Prepare data for storage from request\r\n     */\r\n    public function prepareStorageData(Request $request): array;\r\n    \r\n    /**\r\n     * Create customer insurance with business logic\r\n     */\r\n    public function createCustomerInsurance(array $data): CustomerInsurance;\r\n    \r\n    /**\r\n     * Update customer insurance with business logic\r\n     */\r\n    public function updateCustomerInsurance(CustomerInsurance $customerInsurance, array $data): CustomerInsurance;\r\n    \r\n    /**\r\n     * Delete customer insurance with cleanup\r\n     */\r\n    public function deleteCustomerInsurance(CustomerInsurance $customerInsurance): bool;\r\n    \r\n    /**\r\n     * Update status with validation\r\n     */\r\n    public function updateStatus(int $customerInsuranceId, int $status): bool;\r\n    \r\n    /**\r\n     * Renew policy with full business logic\r\n     */\r\n    public function renewPolicy(CustomerInsurance $customerInsurance, array $data): CustomerInsurance;\r\n    \r\n    /**\r\n     * Handle file uploads with naming conventions\r\n     */\r\n    public function handleFileUpload(Request $request, CustomerInsurance $customerInsurance): void;\r\n    \r\n    /**\r\n     * Send WhatsApp document with message\r\n     */\r\n    public function sendWhatsAppDocument(CustomerInsurance $customerInsurance): bool;\r\n    \r\n    /**\r\n     * Send renewal reminder via WhatsApp\r\n     */\r\n    public function sendRenewalReminderWhatsApp(CustomerInsurance $customerInsurance): bool;\r\n    \r\n    /**\r\n     * Export customer insurances to Excel\r\n     */\r\n    public function exportCustomerInsurances(): \\Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\r\n    \r\n    /**\r\n     * Get customer policies by customer ID\r\n     */\r\n    public function getCustomerPolicies(int $customerId): Collection;\r\n    \r\n    /**\r\n     * Get expiring policies within specified days\r\n     */\r\n    public function getExpiringPolicies(int $days = 30): Collection;\r\n    \r\n    /**\r\n     * Calculate commission breakdown for policy\r\n     */\r\n    public function calculateCommissionBreakdown(CustomerInsurance $customerInsurance): array;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getCustomerInsurances(Request $request): LengthAwarePaginator;\r\n    \r\n    /**\r\n     * Get data for create/edit forms\r\n     */\r\n    public function getFormData(): array;\r\n    \r\n    /**\r\n     * Get validation rules for store operation\r\n     */\r\n    public function getStoreValidationRules(): array;\r\n    \r\n    /**\r\n     * Get validation rules for update operation\r\n     */\r\n    public function getUpdateValidationRules(): array;\r\n    \r\n    /**\r\n     * Get validation rules for renewal operation\r\n     */\r\n    public function getRenewalValidationRules(): array;\r\n    \r\n    /**\r\n     * Prepare data for storage from request\r\n     */\r\n    public function prepareStorageData(Request $request): array;\r\n    \r\n    /**\r\n     * Create customer insurance with business logic\r\n     */\r\n    public function createCustomerInsurance(array $data): CustomerInsurance;\r\n    \r\n    /**\r\n     * Update customer insurance with business logic\r\n     */\r\n    public function updateCustomerInsurance(CustomerInsurance $customerInsurance, array $data): CustomerInsurance;\r\n    \r\n    /**\r\n     * Delete customer insurance with cleanup\r\n     */\r\n    public function deleteCustomerInsurance(CustomerInsurance $customerInsurance): bool;\r\n    \r\n    /**\r\n     * Update status with validation\r\n     */\r\n    public function updateStatus(int $customerInsuranceId, int $status): bool;\r\n    \r\n    /**\r\n     * Renew policy with full business logic\r\n     */\r\n    public function renewPolicy(CustomerInsurance $customerInsurance, array $data): CustomerInsurance;\r\n    \r\n    /**\r\n     * Handle file uploads with naming conventions\r\n     */\r\n    public function handleFileUpload(Request $request, CustomerInsurance $customerInsurance): void;\r\n    \r\n    /**\r\n     * Send WhatsApp document with message\r\n     */\r\n    public function sendWhatsAppDocument(CustomerInsurance $customerInsurance): bool;\r\n    \r\n    /**\r\n     * Send renewal reminder via WhatsApp\r\n     */\r\n    public function sendRenewalReminderWhatsApp(CustomerInsurance $customerInsurance): bool;\r\n    \r\n    /**\r\n     * Export customer insurances to Excel\r\n     */\r\n    public function exportCustomerInsurances(): \\Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\r\n    \r\n    /**\r\n     * Get customer policies by customer ID\r\n     */\r\n    public function getCustomerPolicies(int $customerId): Collection;\r\n    \r\n    /**\r\n     * Get expiring policies within specified days\r\n     */\r\n    public function getExpiringPolicies(int $days = 30): Collection;\r\n    \r\n    /**\r\n     * Calculate commission breakdown for policy\r\n     */\r\n    public function calculateCommissionBreakdown(CustomerInsurance $customerInsurance): array;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Services/CustomerServiceInterface.php",
                "class_info": {
                    "class_name": "CustomerServiceInterface",
                    "extends": "",
                    "implements": [],
                    "uses": [
                        "App\\Http\\Requests\\StoreCustomerRequest",
                        "App\\Http\\Requests\\UpdateCustomerRequest",
                        "App\\Models\\Customer",
                        "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Illuminate\\Http\\Request"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getCustomers",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "LengthAwarePaginator;\r\n\r\n    /**\r\n     * Create a new customer with document handling.\r\n     */\r\n    public function createCustomer(StoreCustomerRequest $request): Customer;\r\n\r\n    /**\r\n     * Update an existing customer with document handling.\r\n     */\r\n    public function updateCustomer(UpdateCustomerRequest $request, Customer $customer): bool;\r\n\r\n    /**\r\n     * Update customer status with validation.\r\n     */\r\n    public function updateCustomerStatus(int $customerId, int $status): bool;\r\n\r\n    /**\r\n     * Delete customer with proper cleanup.\r\n     */\r\n    public function deleteCustomer(Customer $customer): bool;\r\n\r\n    /**\r\n     * Handle file uploads for customer documents.\r\n     */\r\n    public function handleCustomerDocuments(StoreCustomerRequest|UpdateCustomerRequest $request, Customer $customer): void;\r\n\r\n    /**\r\n     * Send WhatsApp onboarding message to customer.\r\n     */\r\n    public function sendOnboardingMessage(Customer $customer): bool;\r\n\r\n    /**\r\n     * Get customers for dropdown/selection.\r\n     */\r\n    public function getActiveCustomersForSelection(): \\Illuminate\\Database\\Eloquent\\Collection;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getCustomers(Request $request): LengthAwarePaginator;\r\n\r\n    /**\r\n     * Create a new customer with document handling.\r\n     */\r\n    public function createCustomer(StoreCustomerRequest $request): Customer;\r\n\r\n    /**\r\n     * Update an existing customer with document handling.\r\n     */\r\n    public function updateCustomer(UpdateCustomerRequest $request, Customer $customer): bool;\r\n\r\n    /**\r\n     * Update customer status with validation.\r\n     */\r\n    public function updateCustomerStatus(int $customerId, int $status): bool;\r\n\r\n    /**\r\n     * Delete customer with proper cleanup.\r\n     */\r\n    public function deleteCustomer(Customer $customer): bool;\r\n\r\n    /**\r\n     * Handle file uploads for customer documents.\r\n     */\r\n    public function handleCustomerDocuments(StoreCustomerRequest|UpdateCustomerRequest $request, Customer $customer): void;\r\n\r\n    /**\r\n     * Send WhatsApp onboarding message to customer.\r\n     */\r\n    public function sendOnboardingMessage(Customer $customer): bool;\r\n\r\n    /**\r\n     * Get customers for dropdown/selection.\r\n     */\r\n    public function getActiveCustomersForSelection(): \\Illuminate\\Database\\Eloquent\\Collection;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Services/FamilyGroupServiceInterface.php",
                "class_info": {
                    "class_name": "FamilyGroupServiceInterface",
                    "extends": "",
                    "implements": [],
                    "uses": [
                        "App\\Models\\FamilyGroup",
                        "App\\Models\\FamilyMember",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Pagination\\LengthAwarePaginator"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getFamilyGroups",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "LengthAwarePaginator;\r\n\r\n    /**\r\n     * Get family group with all relationships loaded\r\n     *\r\n     * @param int $familyGroupId\r\n     * @return FamilyGroup|null\r\n     */\r\n    public function getFamilyGroupWithMembers(int $familyGroupId): ?FamilyGroup;\r\n\r\n    /**\r\n     * Create a new family group with family head and members\r\n     *\r\n     * @param array $data\r\n     * @return FamilyGroup\r\n     */\r\n    public function createFamilyGroup(array $data): FamilyGroup;\r\n\r\n    /**\r\n     * Update an existing family group\r\n     *\r\n     * @param FamilyGroup $familyGroup\r\n     * @param array $data\r\n     * @return bool\r\n     */\r\n    public function updateFamilyGroup(FamilyGroup $familyGroup, array $data): bool;\r\n\r\n    /**\r\n     * Delete a family group and handle member cleanup\r\n     *\r\n     * @param FamilyGroup $familyGroup\r\n     * @return bool\r\n     */\r\n    public function deleteFamilyGroup(FamilyGroup $familyGroup): bool;\r\n\r\n    /**\r\n     * Update family group status\r\n     *\r\n     * @param int $familyGroupId\r\n     * @param bool $status\r\n     * @return bool\r\n     */\r\n    public function updateFamilyGroupStatus(int $familyGroupId, bool $status): bool;\r\n\r\n    /**\r\n     * Add a new member to family group\r\n     *\r\n     * @param int $familyGroupId\r\n     * @param array $memberData\r\n     * @return FamilyMember\r\n     */\r\n    public function addFamilyMember(int $familyGroupId, array $memberData): FamilyMember;\r\n\r\n    /**\r\n     * Remove a member from family group\r\n     *\r\n     * @param int $familyGroupId\r\n     * @param int $memberId\r\n     * @return bool\r\n     */\r\n    public function removeFamilyMember(int $familyGroupId, int $memberId): bool;\r\n\r\n    /**\r\n     * Remove a specific family member by FamilyMember object\r\n     *\r\n     * @param FamilyMember $familyMember\r\n     * @return bool\r\n     */\r\n    public function removeFamilyMemberByObject(FamilyMember $familyMember): bool;\r\n\r\n    /**\r\n     * Update family member relationship\r\n     *\r\n     * @param int $familyMemberId\r\n     * @param array $data\r\n     * @return bool\r\n     */\r\n    public function updateFamilyMember(int $familyMemberId, array $data): bool;\r\n\r\n    /**\r\n     * Change family head\r\n     *\r\n     * @param int $familyGroupId\r\n     * @param int $newFamilyHeadId\r\n     * @return bool\r\n     */\r\n    public function changeFamilyHead(int $familyGroupId, int $newFamilyHeadId): bool;\r\n\r\n    /**\r\n     * Setup passwords for family members\r\n     *\r\n     * @param array $memberIds\r\n     * @param bool $forceChange\r\n     * @return array\r\n     */\r\n    public function setupMemberPasswords(array $memberIds, bool $forceChange = true): array;\r\n\r\n    /**\r\n     * Send password notifications to family members\r\n     *\r\n     * @param array $passwordNotifications\r\n     * @param FamilyGroup $familyGroup\r\n     * @return bool\r\n     */\r\n    public function sendPasswordNotifications(array $passwordNotifications, FamilyGroup $familyGroup): bool;\r\n\r\n    /**\r\n     * Get available customers for family group\r\n     *\r\n     * @param int|null $familyGroupId\r\n     * @return \\Illuminate\\Database\\Eloquent\\Collection\r\n     */\r\n    public function getAvailableCustomers(?int $familyGroupId = null): \\Illuminate\\Database\\Eloquent\\Collection;\r\n\r\n    /**\r\n     * Cleanup orphaned family member records\r\n     *\r\n     * @return int Number of records cleaned up\r\n     */\r\n    public function cleanupOrphanedRecords(): int;\r\n\r\n    /**\r\n     * Get family group statistics\r\n     *\r\n     * @return array\r\n     */\r\n    public function getFamilyGroupStatistics(): array;\r\n\r\n    /**\r\n     * Get all family groups for export\r\n     *\r\n     * @return \\Illuminate\\Database\\Eloquent\\Collection\r\n     */\r\n    public function getAllFamilyGroupsForExport(): \\Illuminate\\Database\\Eloquent\\Collection;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getFamilyGroups(Request $request): LengthAwarePaginator;\r\n\r\n    /**\r\n     * Get family group with all relationships loaded\r\n     *\r\n     * @param int $familyGroupId\r\n     * @return FamilyGroup|null\r\n     */\r\n    public function getFamilyGroupWithMembers(int $familyGroupId): ?FamilyGroup;\r\n\r\n    /**\r\n     * Create a new family group with family head and members\r\n     *\r\n     * @param array $data\r\n     * @return FamilyGroup\r\n     */\r\n    public function createFamilyGroup(array $data): FamilyGroup;\r\n\r\n    /**\r\n     * Update an existing family group\r\n     *\r\n     * @param FamilyGroup $familyGroup\r\n     * @param array $data\r\n     * @return bool\r\n     */\r\n    public function updateFamilyGroup(FamilyGroup $familyGroup, array $data): bool;\r\n\r\n    /**\r\n     * Delete a family group and handle member cleanup\r\n     *\r\n     * @param FamilyGroup $familyGroup\r\n     * @return bool\r\n     */\r\n    public function deleteFamilyGroup(FamilyGroup $familyGroup): bool;\r\n\r\n    /**\r\n     * Update family group status\r\n     *\r\n     * @param int $familyGroupId\r\n     * @param bool $status\r\n     * @return bool\r\n     */\r\n    public function updateFamilyGroupStatus(int $familyGroupId, bool $status): bool;\r\n\r\n    /**\r\n     * Add a new member to family group\r\n     *\r\n     * @param int $familyGroupId\r\n     * @param array $memberData\r\n     * @return FamilyMember\r\n     */\r\n    public function addFamilyMember(int $familyGroupId, array $memberData): FamilyMember;\r\n\r\n    /**\r\n     * Remove a member from family group\r\n     *\r\n     * @param int $familyGroupId\r\n     * @param int $memberId\r\n     * @return bool\r\n     */\r\n    public function removeFamilyMember(int $familyGroupId, int $memberId): bool;\r\n\r\n    /**\r\n     * Remove a specific family member by FamilyMember object\r\n     *\r\n     * @param FamilyMember $familyMember\r\n     * @return bool\r\n     */\r\n    public function removeFamilyMemberByObject(FamilyMember $familyMember): bool;\r\n\r\n    /**\r\n     * Update family member relationship\r\n     *\r\n     * @param int $familyMemberId\r\n     * @param array $data\r\n     * @return bool\r\n     */\r\n    public function updateFamilyMember(int $familyMemberId, array $data): bool;\r\n\r\n    /**\r\n     * Change family head\r\n     *\r\n     * @param int $familyGroupId\r\n     * @param int $newFamilyHeadId\r\n     * @return bool\r\n     */\r\n    public function changeFamilyHead(int $familyGroupId, int $newFamilyHeadId): bool;\r\n\r\n    /**\r\n     * Setup passwords for family members\r\n     *\r\n     * @param array $memberIds\r\n     * @param bool $forceChange\r\n     * @return array\r\n     */\r\n    public function setupMemberPasswords(array $memberIds, bool $forceChange = true): array;\r\n\r\n    /**\r\n     * Send password notifications to family members\r\n     *\r\n     * @param array $passwordNotifications\r\n     * @param FamilyGroup $familyGroup\r\n     * @return bool\r\n     */\r\n    public function sendPasswordNotifications(array $passwordNotifications, FamilyGroup $familyGroup): bool;\r\n\r\n    /**\r\n     * Get available customers for family group\r\n     *\r\n     * @param int|null $familyGroupId\r\n     * @return \\Illuminate\\Database\\Eloquent\\Collection\r\n     */\r\n    public function getAvailableCustomers(?int $familyGroupId = null): \\Illuminate\\Database\\Eloquent\\Collection;\r\n\r\n    /**\r\n     * Cleanup orphaned family member records\r\n     *\r\n     * @return int Number of records cleaned up\r\n     */\r\n    public function cleanupOrphanedRecords(): int;\r\n\r\n    /**\r\n     * Get family group statistics\r\n     *\r\n     * @return array\r\n     */\r\n    public function getFamilyGroupStatistics(): array;\r\n\r\n    /**\r\n     * Get all family groups for export\r\n     *\r\n     * @return \\Illuminate\\Database\\Eloquent\\Collection\r\n     */\r\n    public function getAllFamilyGroupsForExport(): \\Illuminate\\Database\\Eloquent\\Collection;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Services/FuelTypeServiceInterface.php",
                "class_info": {
                    "class_name": "FuelTypeServiceInterface",
                    "extends": "",
                    "implements": [],
                    "uses": [
                        "App\\Models\\FuelType"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "createFuelType",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "FuelType;\r\n\r\n    /**\r\n     * Update an existing fuel type\r\n     *\r\n     * @param FuelType $fuelType\r\n     * @param array $data\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function updateFuelType(FuelType $fuelType, array $data): bool;\r\n\r\n    /**\r\n     * Delete a fuel type\r\n     *\r\n     * @param FuelType $fuelType\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function deleteFuelType(FuelType $fuelType): bool;\r\n\r\n    /**\r\n     * Update fuel type status\r\n     *\r\n     * @param int $fuelTypeId\r\n     * @param int $status\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function updateStatus(int $fuelTypeId, int $status): bool;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function createFuelType(array $data): FuelType;\r\n\r\n    /**\r\n     * Update an existing fuel type\r\n     *\r\n     * @param FuelType $fuelType\r\n     * @param array $data\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function updateFuelType(FuelType $fuelType, array $data): bool;\r\n\r\n    /**\r\n     * Delete a fuel type\r\n     *\r\n     * @param FuelType $fuelType\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function deleteFuelType(FuelType $fuelType): bool;\r\n\r\n    /**\r\n     * Update fuel type status\r\n     *\r\n     * @param int $fuelTypeId\r\n     * @param int $status\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function updateStatus(int $fuelTypeId, int $status): bool;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Services/InsuranceCompanyServiceInterface.php",
                "class_info": {
                    "class_name": "InsuranceCompanyServiceInterface",
                    "extends": "",
                    "implements": [],
                    "uses": [
                        "App\\Models\\InsuranceCompany",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getInsuranceCompanies",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "LengthAwarePaginator;\r\n    \r\n    public function createInsuranceCompany(array $data): InsuranceCompany;\r\n    \r\n    public function updateInsuranceCompany(InsuranceCompany $insuranceCompany, array $data): InsuranceCompany;\r\n    \r\n    public function deleteInsuranceCompany(InsuranceCompany $insuranceCompany): bool;\r\n    \r\n    public function updateStatus(int $insuranceCompanyId, int $status): bool;\r\n    \r\n    public function exportInsuranceCompanies(): \\Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\r\n    \r\n    public function getActiveInsuranceCompanies(): \\Illuminate\\Database\\Eloquent\\Collection;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getInsuranceCompanies(Request $request): LengthAwarePaginator;\r\n    \r\n    public function createInsuranceCompany(array $data): InsuranceCompany;\r\n    \r\n    public function updateInsuranceCompany(InsuranceCompany $insuranceCompany, array $data): InsuranceCompany;\r\n    \r\n    public function deleteInsuranceCompany(InsuranceCompany $insuranceCompany): bool;\r\n    \r\n    public function updateStatus(int $insuranceCompanyId, int $status): bool;\r\n    \r\n    public function exportInsuranceCompanies(): \\Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\r\n    \r\n    public function getActiveInsuranceCompanies(): \\Illuminate\\Database\\Eloquent\\Collection;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Services/MarketingWhatsAppServiceInterface.php",
                "class_info": {
                    "class_name": "MarketingWhatsAppServiceInterface",
                    "extends": "",
                    "implements": [],
                    "uses": [
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Illuminate\\Http\\Request"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getActiveCustomers",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "Collection;\r\n\r\n    /**\r\n     * Get customers with valid mobile numbers for marketing\r\n     *\r\n     * @param string $recipients ('all' or 'selected')\r\n     * @param array $selectedCustomerIds\r\n     * @return Collection\r\n     */\r\n    public function getValidCustomersForMarketing(string $recipients, array $selectedCustomerIds = []): Collection;\r\n\r\n    /**\r\n     * Send WhatsApp marketing campaign to customers\r\n     *\r\n     * @param array $campaignData\r\n     * @return array Campaign results\r\n     */\r\n    public function sendMarketingCampaign(array $campaignData): array;\r\n\r\n    /**\r\n     * Preview customer list for marketing campaign\r\n     *\r\n     * @param string $recipients\r\n     * @param array $selectedCustomerIds\r\n     * @return array\r\n     */\r\n    public function previewCustomerList(string $recipients, array $selectedCustomerIds = []): array;\r\n\r\n    /**\r\n     * Send text message to customer\r\n     *\r\n     * @param string $message\r\n     * @param string $mobileNumber\r\n     * @param int $customerId\r\n     * @return bool\r\n     */\r\n    public function sendTextMessage(string $message, string $mobileNumber, int $customerId): bool;\r\n\r\n    /**\r\n     * Send image message to customer\r\n     *\r\n     * @param string $message\r\n     * @param string $mobileNumber\r\n     * @param string $imagePath\r\n     * @param int $customerId\r\n     * @return bool\r\n     */\r\n    public function sendImageMessage(string $message, string $mobileNumber, string $imagePath, int $customerId): bool;\r\n\r\n    /**\r\n     * Get marketing campaign statistics\r\n     *\r\n     * @return array\r\n     */\r\n    public function getMarketingStatistics(): array;\r\n\r\n    /**\r\n     * Log marketing message attempt\r\n     *\r\n     * @param int $customerId\r\n     * @param string $messageType\r\n     * @param bool $success\r\n     * @param string|null $error\r\n     * @return void\r\n     */\r\n    public function logMarketingAttempt(int $customerId, string $messageType, bool $success, ?string $error = null): void;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getActiveCustomers(): Collection;\r\n\r\n    /**\r\n     * Get customers with valid mobile numbers for marketing\r\n     *\r\n     * @param string $recipients ('all' or 'selected')\r\n     * @param array $selectedCustomerIds\r\n     * @return Collection\r\n     */\r\n    public function getValidCustomersForMarketing(string $recipients, array $selectedCustomerIds = []): Collection;\r\n\r\n    /**\r\n     * Send WhatsApp marketing campaign to customers\r\n     *\r\n     * @param array $campaignData\r\n     * @return array Campaign results\r\n     */\r\n    public function sendMarketingCampaign(array $campaignData): array;\r\n\r\n    /**\r\n     * Preview customer list for marketing campaign\r\n     *\r\n     * @param string $recipients\r\n     * @param array $selectedCustomerIds\r\n     * @return array\r\n     */\r\n    public function previewCustomerList(string $recipients, array $selectedCustomerIds = []): array;\r\n\r\n    /**\r\n     * Send text message to customer\r\n     *\r\n     * @param string $message\r\n     * @param string $mobileNumber\r\n     * @param int $customerId\r\n     * @return bool\r\n     */\r\n    public function sendTextMessage(string $message, string $mobileNumber, int $customerId): bool;\r\n\r\n    /**\r\n     * Send image message to customer\r\n     *\r\n     * @param string $message\r\n     * @param string $mobileNumber\r\n     * @param string $imagePath\r\n     * @param int $customerId\r\n     * @return bool\r\n     */\r\n    public function sendImageMessage(string $message, string $mobileNumber, string $imagePath, int $customerId): bool;\r\n\r\n    /**\r\n     * Get marketing campaign statistics\r\n     *\r\n     * @return array\r\n     */\r\n    public function getMarketingStatistics(): array;\r\n\r\n    /**\r\n     * Log marketing message attempt\r\n     *\r\n     * @param int $customerId\r\n     * @param string $messageType\r\n     * @param bool $success\r\n     * @param string|null $error\r\n     * @return void\r\n     */\r\n    public function logMarketingAttempt(int $customerId, string $messageType, bool $success, ?string $error = null): void;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Services/PermissionServiceInterface.php",
                "class_info": {
                    "class_name": "PermissionServiceInterface",
                    "extends": "",
                    "implements": [],
                    "uses": [
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Pagination\\LengthAwarePaginator",
                        "Spatie\\Permission\\Models\\Permission"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getPermissions",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$perPage",
                                "default": "10",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "LengthAwarePaginator;\r\n\r\n    /**\r\n     * Create a new permission\r\n     *\r\n     * @param array $data\r\n     * @return Permission\r\n     */\r\n    public function createPermission(array $data): Permission;\r\n\r\n    /**\r\n     * Update an existing permission\r\n     *\r\n     * @param Permission $permission\r\n     * @param array $data\r\n     * @return bool\r\n     */\r\n    public function updatePermission(Permission $permission, array $data): bool;\r\n\r\n    /**\r\n     * Delete a permission\r\n     *\r\n     * @param Permission $permission\r\n     * @return bool\r\n     */\r\n    public function deletePermission(Permission $permission): bool;\r\n\r\n    /**\r\n     * Get all permissions for role assignment\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getAllPermissions(): Collection;\r\n\r\n    /**\r\n     * Get permissions by role\r\n     *\r\n     * @param int $roleId\r\n     * @return Collection\r\n     */\r\n    public function getPermissionsByRole(int $roleId): Collection;\r\n\r\n    /**\r\n     * Search permissions by name\r\n     *\r\n     * @param string $searchTerm\r\n     * @param int $limit\r\n     * @return Collection\r\n     */\r\n    public function searchPermissions(string $searchTerm, int $limit = 20): Collection;\r\n\r\n    /**\r\n     * Get permission statistics\r\n     *\r\n     * @return array\r\n     */\r\n    public function getPermissionStatistics(): array;\r\n\r\n    /**\r\n     * Sync permissions for a role\r\n     *\r\n     * @param int $roleId\r\n     * @param array $permissionIds\r\n     * @return bool\r\n     */\r\n    public function syncRolePermissions(int $roleId, array $permissionIds): bool;\r\n\r\n    /**\r\n     * Get all permissions grouped by module\r\n     *\r\n     * @return array\r\n     */\r\n    public function getPermissionsGroupedByModule(): array;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPermissions(Request $request, int $perPage = 10): LengthAwarePaginator;\r\n\r\n    /**\r\n     * Create a new permission\r\n     *\r\n     * @param array $data\r\n     * @return Permission\r\n     */\r\n    public function createPermission(array $data): Permission;\r\n\r\n    /**\r\n     * Update an existing permission\r\n     *\r\n     * @param Permission $permission\r\n     * @param array $data\r\n     * @return bool\r\n     */\r\n    public function updatePermission(Permission $permission, array $data): bool;\r\n\r\n    /**\r\n     * Delete a permission\r\n     *\r\n     * @param Permission $permission\r\n     * @return bool\r\n     */\r\n    public function deletePermission(Permission $permission): bool;\r\n\r\n    /**\r\n     * Get all permissions for role assignment\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getAllPermissions(): Collection;\r\n\r\n    /**\r\n     * Get permissions by role\r\n     *\r\n     * @param int $roleId\r\n     * @return Collection\r\n     */\r\n    public function getPermissionsByRole(int $roleId): Collection;\r\n\r\n    /**\r\n     * Search permissions by name\r\n     *\r\n     * @param string $searchTerm\r\n     * @param int $limit\r\n     * @return Collection\r\n     */\r\n    public function searchPermissions(string $searchTerm, int $limit = 20): Collection;\r\n\r\n    /**\r\n     * Get permission statistics\r\n     *\r\n     * @return array\r\n     */\r\n    public function getPermissionStatistics(): array;\r\n\r\n    /**\r\n     * Sync permissions for a role\r\n     *\r\n     * @param int $roleId\r\n     * @param array $permissionIds\r\n     * @return bool\r\n     */\r\n    public function syncRolePermissions(int $roleId, array $permissionIds): bool;\r\n\r\n    /**\r\n     * Get all permissions grouped by module\r\n     *\r\n     * @return array\r\n     */\r\n    public function getPermissionsGroupedByModule(): array;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Services/PolicyServiceInterface.php",
                "class_info": {
                    "class_name": "PolicyServiceInterface",
                    "extends": "",
                    "implements": [],
                    "uses": [
                        "App\\Models\\Customer",
                        "App\\Models\\CustomerInsurance",
                        "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Illuminate\\Http\\Request"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getPolicies",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "LengthAwarePaginator;\r\n\r\n    /**\r\n     * Create a new customer insurance policy.\r\n     */\r\n    public function createPolicy(array $data): CustomerInsurance;\r\n\r\n    /**\r\n     * Update an existing policy.\r\n     */\r\n    public function updatePolicy(CustomerInsurance $policy, array $data): bool;\r\n\r\n    /**\r\n     * Get policies for a specific customer.\r\n     */\r\n    public function getCustomerPolicies(Customer $customer): \\Illuminate\\Database\\Eloquent\\Collection;\r\n\r\n    /**\r\n     * Get policies that are due for renewal.\r\n     */\r\n    public function getPoliciesDueForRenewal(int $daysAhead = 30): \\Illuminate\\Database\\Eloquent\\Collection;\r\n\r\n    /**\r\n     * Send renewal reminder for policy.\r\n     */\r\n    public function sendRenewalReminder(CustomerInsurance $policy): bool;\r\n\r\n    /**\r\n     * Get family policies if customer is family head.\r\n     */\r\n    public function getFamilyPolicies(Customer $customer): \\Illuminate\\Database\\Eloquent\\Collection;\r\n\r\n    /**\r\n     * Check if policy belongs to customer or family.\r\n     */\r\n    public function canCustomerViewPolicy(Customer $customer, CustomerInsurance $policy): bool;\r\n\r\n    /**\r\n     * Get policy statistics for dashboard.\r\n     */\r\n    public function getPolicyStatistics(): array;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getPolicies(Request $request): LengthAwarePaginator;\r\n\r\n    /**\r\n     * Create a new customer insurance policy.\r\n     */\r\n    public function createPolicy(array $data): CustomerInsurance;\r\n\r\n    /**\r\n     * Update an existing policy.\r\n     */\r\n    public function updatePolicy(CustomerInsurance $policy, array $data): bool;\r\n\r\n    /**\r\n     * Get policies for a specific customer.\r\n     */\r\n    public function getCustomerPolicies(Customer $customer): \\Illuminate\\Database\\Eloquent\\Collection;\r\n\r\n    /**\r\n     * Get policies that are due for renewal.\r\n     */\r\n    public function getPoliciesDueForRenewal(int $daysAhead = 30): \\Illuminate\\Database\\Eloquent\\Collection;\r\n\r\n    /**\r\n     * Send renewal reminder for policy.\r\n     */\r\n    public function sendRenewalReminder(CustomerInsurance $policy): bool;\r\n\r\n    /**\r\n     * Get family policies if customer is family head.\r\n     */\r\n    public function getFamilyPolicies(Customer $customer): \\Illuminate\\Database\\Eloquent\\Collection;\r\n\r\n    /**\r\n     * Check if policy belongs to customer or family.\r\n     */\r\n    public function canCustomerViewPolicy(Customer $customer, CustomerInsurance $policy): bool;\r\n\r\n    /**\r\n     * Get policy statistics for dashboard.\r\n     */\r\n    public function getPolicyStatistics(): array;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Services/PolicyTypeServiceInterface.php",
                "class_info": {
                    "class_name": "PolicyTypeServiceInterface",
                    "extends": "",
                    "implements": [],
                    "uses": [
                        "App\\Models\\PolicyType"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "createPolicyType",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "PolicyType;\r\n\r\n    /**\r\n     * Update an existing policy type\r\n     *\r\n     * @param PolicyType $policyType\r\n     * @param array $data\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function updatePolicyType(PolicyType $policyType, array $data): bool;\r\n\r\n    /**\r\n     * Delete a policy type\r\n     *\r\n     * @param PolicyType $policyType\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function deletePolicyType(PolicyType $policyType): bool;\r\n\r\n    /**\r\n     * Update policy type status\r\n     *\r\n     * @param int $policyTypeId\r\n     * @param int $status\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function updateStatus(int $policyTypeId, int $status): bool;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function createPolicyType(array $data): PolicyType;\r\n\r\n    /**\r\n     * Update an existing policy type\r\n     *\r\n     * @param PolicyType $policyType\r\n     * @param array $data\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function updatePolicyType(PolicyType $policyType, array $data): bool;\r\n\r\n    /**\r\n     * Delete a policy type\r\n     *\r\n     * @param PolicyType $policyType\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function deletePolicyType(PolicyType $policyType): bool;\r\n\r\n    /**\r\n     * Update policy type status\r\n     *\r\n     * @param int $policyTypeId\r\n     * @param int $status\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function updateStatus(int $policyTypeId, int $status): bool;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Services/PremiumTypeServiceInterface.php",
                "class_info": {
                    "class_name": "PremiumTypeServiceInterface",
                    "extends": "",
                    "implements": [],
                    "uses": [
                        "App\\Models\\PremiumType"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "createPremiumType",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "PremiumType;\r\n\r\n    /**\r\n     * Update an existing premium type\r\n     *\r\n     * @param PremiumType $premiumType\r\n     * @param array $data\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function updatePremiumType(PremiumType $premiumType, array $data): bool;\r\n\r\n    /**\r\n     * Delete a premium type\r\n     *\r\n     * @param PremiumType $premiumType\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function deletePremiumType(PremiumType $premiumType): bool;\r\n\r\n    /**\r\n     * Update premium type status\r\n     *\r\n     * @param int $premiumTypeId\r\n     * @param int $status\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function updateStatus(int $premiumTypeId, int $status): bool;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function createPremiumType(array $data): PremiumType;\r\n\r\n    /**\r\n     * Update an existing premium type\r\n     *\r\n     * @param PremiumType $premiumType\r\n     * @param array $data\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function updatePremiumType(PremiumType $premiumType, array $data): bool;\r\n\r\n    /**\r\n     * Delete a premium type\r\n     *\r\n     * @param PremiumType $premiumType\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function deletePremiumType(PremiumType $premiumType): bool;\r\n\r\n    /**\r\n     * Update premium type status\r\n     *\r\n     * @param int $premiumTypeId\r\n     * @param int $status\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function updateStatus(int $premiumTypeId, int $status): bool;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Services/QuotationServiceInterface.php",
                "class_info": {
                    "class_name": "QuotationServiceInterface",
                    "extends": "",
                    "implements": [],
                    "uses": [
                        "App\\Http\\Requests\\CreateQuotationRequest",
                        "App\\Http\\Requests\\UpdateQuotationRequest",
                        "App\\Models\\Quotation",
                        "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Illuminate\\Http\\Request"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getQuotations",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "LengthAwarePaginator;\r\n\r\n    /**\r\n     * Create a new quotation with company quotes.\r\n     */\r\n    public function createQuotation(array $data): Quotation;\r\n\r\n    /**\r\n     * Update quotation with company data.\r\n     */\r\n    public function updateQuotationWithCompanies(Quotation $quotation, array $data): void;\r\n\r\n    /**\r\n     * Generate automatic quotes from insurance companies.\r\n     */\r\n    public function generateCompanyQuotes(Quotation $quotation): void;\r\n\r\n    /**\r\n     * Generate quotes for specific companies.\r\n     */\r\n    public function generateQuotesForSelectedCompanies(Quotation $quotation, array $companyIds): void;\r\n\r\n    /**\r\n     * Send quotation via WhatsApp.\r\n     */\r\n    public function sendQuotationViaWhatsApp(Quotation $quotation): void;\r\n\r\n    /**\r\n     * Generate PDF for quotation.\r\n     */\r\n    public function generatePdf(Quotation $quotation);\r\n\r\n    /**\r\n     * Delete quotation with related data cleanup.\r\n     */\r\n    public function deleteQuotation(Quotation $quotation): bool;\r\n\r\n    /**\r\n     * Calculate premium for given data.\r\n     */\r\n    public function calculatePremium(array $data): float;\r\n\r\n    /**\r\n     * Get quotation data for form rendering.\r\n     */\r\n    public function getQuotationFormData(): array;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getQuotations(Request $request): LengthAwarePaginator;\r\n\r\n    /**\r\n     * Create a new quotation with company quotes.\r\n     */\r\n    public function createQuotation(array $data): Quotation;\r\n\r\n    /**\r\n     * Update quotation with company data.\r\n     */\r\n    public function updateQuotationWithCompanies(Quotation $quotation, array $data): void;\r\n\r\n    /**\r\n     * Generate automatic quotes from insurance companies.\r\n     */\r\n    public function generateCompanyQuotes(Quotation $quotation): void;\r\n\r\n    /**\r\n     * Generate quotes for specific companies.\r\n     */\r\n    public function generateQuotesForSelectedCompanies(Quotation $quotation, array $companyIds): void;\r\n\r\n    /**\r\n     * Send quotation via WhatsApp.\r\n     */\r\n    public function sendQuotationViaWhatsApp(Quotation $quotation): void;\r\n\r\n    /**\r\n     * Generate PDF for quotation.\r\n     */\r\n    public function generatePdf(Quotation $quotation);\r\n\r\n    /**\r\n     * Delete quotation with related data cleanup.\r\n     */\r\n    public function deleteQuotation(Quotation $quotation): bool;\r\n\r\n    /**\r\n     * Calculate premium for given data.\r\n     */\r\n    public function calculatePremium(array $data): float;\r\n\r\n    /**\r\n     * Get quotation data for form rendering.\r\n     */\r\n    public function getQuotationFormData(): array;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Services/ReferenceUserServiceInterface.php",
                "class_info": {
                    "class_name": "ReferenceUserServiceInterface",
                    "extends": "",
                    "implements": [],
                    "uses": [
                        "App\\Models\\ReferenceUser"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "createReferenceUser",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "ReferenceUser;\r\n\r\n    /**\r\n     * Update an existing reference user\r\n     *\r\n     * @param ReferenceUser $referenceUser\r\n     * @param array $data\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function updateReferenceUser(ReferenceUser $referenceUser, array $data): bool;\r\n\r\n    /**\r\n     * Delete a reference user\r\n     *\r\n     * @param ReferenceUser $referenceUser\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function deleteReferenceUser(ReferenceUser $referenceUser): bool;\r\n\r\n    /**\r\n     * Update reference user status\r\n     *\r\n     * @param int $referenceUserId\r\n     * @param int $status\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function updateStatus(int $referenceUserId, int $status): bool;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function createReferenceUser(array $data): ReferenceUser;\r\n\r\n    /**\r\n     * Update an existing reference user\r\n     *\r\n     * @param ReferenceUser $referenceUser\r\n     * @param array $data\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function updateReferenceUser(ReferenceUser $referenceUser, array $data): bool;\r\n\r\n    /**\r\n     * Delete a reference user\r\n     *\r\n     * @param ReferenceUser $referenceUser\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function deleteReferenceUser(ReferenceUser $referenceUser): bool;\r\n\r\n    /**\r\n     * Update reference user status\r\n     *\r\n     * @param int $referenceUserId\r\n     * @param int $status\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function updateStatus(int $referenceUserId, int $status): bool;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Services/RelationshipManagerServiceInterface.php",
                "class_info": {
                    "class_name": "RelationshipManagerServiceInterface",
                    "extends": "",
                    "implements": [],
                    "uses": [
                        "App\\Models\\RelationshipManager"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "createRelationshipManager",
                        "parameters": [
                            {
                                "type": "array",
                                "name": "$data",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "RelationshipManager;\r\n\r\n    /**\r\n     * Update an existing relationship manager\r\n     *\r\n     * @param RelationshipManager $relationshipManager\r\n     * @param array $data\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function updateRelationshipManager(RelationshipManager $relationshipManager, array $data): bool;\r\n\r\n    /**\r\n     * Delete a relationship manager\r\n     *\r\n     * @param RelationshipManager $relationshipManager\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function deleteRelationshipManager(RelationshipManager $relationshipManager): bool;\r\n\r\n    /**\r\n     * Update relationship manager status\r\n     *\r\n     * @param int $relationshipManagerId\r\n     * @param int $status\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function updateStatus(int $relationshipManagerId, int $status): bool;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function createRelationshipManager(array $data): RelationshipManager;\r\n\r\n    /**\r\n     * Update an existing relationship manager\r\n     *\r\n     * @param RelationshipManager $relationshipManager\r\n     * @param array $data\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function updateRelationshipManager(RelationshipManager $relationshipManager, array $data): bool;\r\n\r\n    /**\r\n     * Delete a relationship manager\r\n     *\r\n     * @param RelationshipManager $relationshipManager\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function deleteRelationshipManager(RelationshipManager $relationshipManager): bool;\r\n\r\n    /**\r\n     * Update relationship manager status\r\n     *\r\n     * @param int $relationshipManagerId\r\n     * @param int $status\r\n     * @return bool\r\n     * @throws \\Throwable\r\n     */\r\n    public function updateStatus(int $relationshipManagerId, int $status): bool;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Services/ReportServiceInterface.php",
                "class_info": {
                    "class_name": "ReportServiceInterface",
                    "extends": "",
                    "implements": [],
                    "uses": [
                        "Illuminate\\Http\\Request",
                        "Symfony\\Component\\HttpFoundation\\BinaryFileResponse"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getInitialData",
                        "parameters": [],
                        "parameter_count": 0,
                        "return_type": "array;\r\n    \r\n    /**\r\n     * Generate cross selling report with analysis\r\n     */\r\n    public function generateCrossSellingReport(array $parameters): array;\r\n    \r\n    /**\r\n     * Generate customer insurance report\r\n     */\r\n    public function generateCustomerInsuranceReport(array $parameters): array;\r\n    \r\n    /**\r\n     * Export cross selling report to Excel\r\n     */\r\n    public function exportCrossSellingReport(array $parameters): BinaryFileResponse;\r\n    \r\n    /**\r\n     * Export customer insurance report to Excel\r\n     */\r\n    public function exportCustomerInsuranceReport(array $parameters): BinaryFileResponse;\r\n    \r\n    /**\r\n     * Save user's selected columns for a report\r\n     */\r\n    public function saveUserReportColumns(string $reportName, array $selectedColumns, int $userId): void;\r\n    \r\n    /**\r\n     * Load user's saved columns for a report\r\n     */\r\n    public function loadUserReportColumns(string $reportName, int $userId): ?array;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getInitialData(): array;\r\n    \r\n    /**\r\n     * Generate cross selling report with analysis\r\n     */\r\n    public function generateCrossSellingReport(array $parameters): array;\r\n    \r\n    /**\r\n     * Generate customer insurance report\r\n     */\r\n    public function generateCustomerInsuranceReport(array $parameters): array;\r\n    \r\n    /**\r\n     * Export cross selling report to Excel\r\n     */\r\n    public function exportCrossSellingReport(array $parameters): BinaryFileResponse;\r\n    \r\n    /**\r\n     * Export customer insurance report to Excel\r\n     */\r\n    public function exportCustomerInsuranceReport(array $parameters): BinaryFileResponse;\r\n    \r\n    /**\r\n     * Save user's selected columns for a report\r\n     */\r\n    public function saveUserReportColumns(string $reportName, array $selectedColumns, int $userId): void;\r\n    \r\n    /**\r\n     * Load user's saved columns for a report\r\n     */\r\n    public function loadUserReportColumns(string $reportName, int $userId): ?array;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Services/RoleServiceInterface.php",
                "class_info": {
                    "class_name": "RoleServiceInterface",
                    "extends": "",
                    "implements": [],
                    "uses": [
                        "Illuminate\\Database\\Eloquent\\Collection",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Pagination\\LengthAwarePaginator",
                        "Spatie\\Permission\\Models\\Role"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getRoles",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            },
                            {
                                "type": "int",
                                "name": "$perPage",
                                "default": "10",
                                "has_default": true
                            }
                        ],
                        "parameter_count": 2,
                        "return_type": "LengthAwarePaginator;\r\n\r\n    /**\r\n     * Create a new role\r\n     *\r\n     * @param array $data\r\n     * @return Role\r\n     */\r\n    public function createRole(array $data): Role;\r\n\r\n    /**\r\n     * Update an existing role\r\n     *\r\n     * @param Role $role\r\n     * @param array $data\r\n     * @return bool\r\n     */\r\n    public function updateRole(Role $role, array $data): bool;\r\n\r\n    /**\r\n     * Delete a role\r\n     *\r\n     * @param Role $role\r\n     * @return bool\r\n     */\r\n    public function deleteRole(Role $role): bool;\r\n\r\n    /**\r\n     * Get all roles for assignment\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getAllRoles(): Collection;\r\n\r\n    /**\r\n     * Get roles by user\r\n     *\r\n     * @param int $userId\r\n     * @return Collection\r\n     */\r\n    public function getRolesByUser(int $userId): Collection;\r\n\r\n    /**\r\n     * Search roles by name\r\n     *\r\n     * @param string $searchTerm\r\n     * @param int $limit\r\n     * @return Collection\r\n     */\r\n    public function searchRoles(string $searchTerm, int $limit = 20): Collection;\r\n\r\n    /**\r\n     * Get role statistics\r\n     *\r\n     * @return array\r\n     */\r\n    public function getRoleStatistics(): array;\r\n\r\n    /**\r\n     * Assign permissions to role\r\n     *\r\n     * @param int $roleId\r\n     * @param array $permissionIds\r\n     * @return bool\r\n     */\r\n    public function assignPermissionsToRole(int $roleId, array $permissionIds): bool;\r\n\r\n    /**\r\n     * Remove permissions from role\r\n     *\r\n     * @param int $roleId\r\n     * @param array $permissionIds\r\n     * @return bool\r\n     */\r\n    public function removePermissionsFromRole(int $roleId, array $permissionIds): bool;\r\n\r\n    /**\r\n     * Assign role to user\r\n     *\r\n     * @param int $userId\r\n     * @param int $roleId\r\n     * @return bool\r\n     */\r\n    public function assignRoleToUser(int $userId, int $roleId): bool;\r\n\r\n    /**\r\n     * Remove role from user\r\n     *\r\n     * @param int $userId\r\n     * @param int $roleId\r\n     * @return bool\r\n     */\r\n    public function removeRoleFromUser(int $userId, int $roleId): bool;\r\n\r\n    /**\r\n     * Get role with permissions\r\n     *\r\n     * @param int $roleId\r\n     * @return Role|null\r\n     */\r\n    public function getRoleWithPermissions(int $roleId): ?Role;\r\n\r\n    /**\r\n     * Get users count by role\r\n     *\r\n     * @param int $roleId\r\n     * @return int\r\n     */\r\n    public function getUsersCountByRole(int $roleId): int;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getRoles(Request $request, int $perPage = 10): LengthAwarePaginator;\r\n\r\n    /**\r\n     * Create a new role\r\n     *\r\n     * @param array $data\r\n     * @return Role\r\n     */\r\n    public function createRole(array $data): Role;\r\n\r\n    /**\r\n     * Update an existing role\r\n     *\r\n     * @param Role $role\r\n     * @param array $data\r\n     * @return bool\r\n     */\r\n    public function updateRole(Role $role, array $data): bool;\r\n\r\n    /**\r\n     * Delete a role\r\n     *\r\n     * @param Role $role\r\n     * @return bool\r\n     */\r\n    public function deleteRole(Role $role): bool;\r\n\r\n    /**\r\n     * Get all roles for assignment\r\n     *\r\n     * @return Collection\r\n     */\r\n    public function getAllRoles(): Collection;\r\n\r\n    /**\r\n     * Get roles by user\r\n     *\r\n     * @param int $userId\r\n     * @return Collection\r\n     */\r\n    public function getRolesByUser(int $userId): Collection;\r\n\r\n    /**\r\n     * Search roles by name\r\n     *\r\n     * @param string $searchTerm\r\n     * @param int $limit\r\n     * @return Collection\r\n     */\r\n    public function searchRoles(string $searchTerm, int $limit = 20): Collection;\r\n\r\n    /**\r\n     * Get role statistics\r\n     *\r\n     * @return array\r\n     */\r\n    public function getRoleStatistics(): array;\r\n\r\n    /**\r\n     * Assign permissions to role\r\n     *\r\n     * @param int $roleId\r\n     * @param array $permissionIds\r\n     * @return bool\r\n     */\r\n    public function assignPermissionsToRole(int $roleId, array $permissionIds): bool;\r\n\r\n    /**\r\n     * Remove permissions from role\r\n     *\r\n     * @param int $roleId\r\n     * @param array $permissionIds\r\n     * @return bool\r\n     */\r\n    public function removePermissionsFromRole(int $roleId, array $permissionIds): bool;\r\n\r\n    /**\r\n     * Assign role to user\r\n     *\r\n     * @param int $userId\r\n     * @param int $roleId\r\n     * @return bool\r\n     */\r\n    public function assignRoleToUser(int $userId, int $roleId): bool;\r\n\r\n    /**\r\n     * Remove role from user\r\n     *\r\n     * @param int $userId\r\n     * @param int $roleId\r\n     * @return bool\r\n     */\r\n    public function removeRoleFromUser(int $userId, int $roleId): bool;\r\n\r\n    /**\r\n     * Get role with permissions\r\n     *\r\n     * @param int $roleId\r\n     * @return Role|null\r\n     */\r\n    public function getRoleWithPermissions(int $roleId): ?Role;\r\n\r\n    /**\r\n     * Get users count by role\r\n     *\r\n     * @param int $roleId\r\n     * @return int\r\n     */\r\n    public function getUsersCountByRole(int $roleId): int;\r\n}"
                    }
                ],
                "method_count": 1
            },
            {
                "file_path": "app/Contracts/Services/UserServiceInterface.php",
                "class_info": {
                    "class_name": "UserServiceInterface",
                    "extends": "",
                    "implements": [],
                    "uses": [
                        "App\\Models\\User",
                        "Illuminate\\Http\\Request",
                        "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator"
                    ],
                    "properties": [],
                    "property_count": 0
                },
                "methods": [
                    {
                        "name": "getUsers",
                        "parameters": [
                            {
                                "type": "Request",
                                "name": "$request",
                                "default": null,
                                "has_default": false
                            }
                        ],
                        "parameter_count": 1,
                        "return_type": "LengthAwarePaginator;\r\n    \r\n    public function createUser(array $data): User;\r\n    \r\n    public function updateUser(User $user, array $data): User;\r\n    \r\n    public function deleteUser(User $user): bool;\r\n    \r\n    public function updateStatus(int $userId, int $status): bool;\r\n    \r\n    public function assignRoles(User $user, array $roles): void;\r\n    \r\n    public function exportUsers(): \\Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\r\n    \r\n    public function getActiveUsers(): \\Illuminate\\Database\\Eloquent\\Collection;\r\n    \r\n    public function changePassword(User $user, string $newPassword): bool;\r\n    \r\n    public function getUserWithRoles(int $userId): ?User;\r\n    \r\n    public function getStoreValidationRules(): array;\r\n    \r\n    public function getUpdateValidationRules(User $user): array;\r\n    \r\n    public function getPasswordValidationRules(): array;\r\n    \r\n    public function getRoles(): \\Illuminate\\Database\\Eloquent\\Collection;\r\n}",
                        "has_return_type": true,
                        "docblock": "",
                        "signature": "function getUsers(Request $request): LengthAwarePaginator;\r\n    \r\n    public function createUser(array $data): User;\r\n    \r\n    public function updateUser(User $user, array $data): User;\r\n    \r\n    public function deleteUser(User $user): bool;\r\n    \r\n    public function updateStatus(int $userId, int $status): bool;\r\n    \r\n    public function assignRoles(User $user, array $roles): void;\r\n    \r\n    public function exportUsers(): \\Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\r\n    \r\n    public function getActiveUsers(): \\Illuminate\\Database\\Eloquent\\Collection;\r\n    \r\n    public function changePassword(User $user, string $newPassword): bool;\r\n    \r\n    public function getUserWithRoles(int $userId): ?User;\r\n    \r\n    public function getStoreValidationRules(): array;\r\n    \r\n    public function getUpdateValidationRules(User $user): array;\r\n    \r\n    public function getPasswordValidationRules(): array;\r\n    \r\n    public function getRoles(): \\Illuminate\\Database\\Eloquent\\Collection;\r\n}"
                    }
                ],
                "method_count": 1
            }
        ]
    },
    "controllers": [
        {
            "file_path": "app/Http/Controllers/AbstractBaseCrudController.php",
            "class_info": {
                "class_name": "AbstractBaseCrudController",
                "extends": "Controller",
                "implements": [],
                "uses": [],
                "properties": [],
                "property_count": 0
            },
            "methods": [
                {
                    "name": "setupPermissionMiddleware",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "$entityName",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "void",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function setupPermissionMiddleware(string $entityName): void"
                },
                {
                    "name": "setupCustomPermissionMiddleware",
                    "parameters": [
                        {
                            "type": "array",
                            "name": "$permissions",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "void",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function setupCustomPermissionMiddleware(array $permissions): void"
                },
                {
                    "name": "setupAuthMiddleware",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "void",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function setupAuthMiddleware(): void"
                },
                {
                    "name": "setupGuestMiddleware",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "void",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function setupGuestMiddleware(): void"
                },
                {
                    "name": "getSuccessMessage",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "$entityName",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "string",
                            "name": "$operation",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "string",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getSuccessMessage(string $entityName, string $operation): string"
                },
                {
                    "name": "getErrorMessage",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "$entityName",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "string",
                            "name": "$operation",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "string",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getErrorMessage(string $entityName, string $operation): string"
                },
                {
                    "name": "redirectWithSuccess",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "$route",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "string",
                            "name": "$message",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "array",
                            "name": "$routeParameters",
                            "default": "[]",
                            "has_default": true
                        }
                    ],
                    "parameter_count": 3,
                    "return_type": "\\Illuminate\\Http\\RedirectResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function redirectWithSuccess(?string $route, string $message, array $routeParameters = []): \\Illuminate\\Http\\RedirectResponse"
                },
                {
                    "name": "redirectWithError",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "$message",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "\\Illuminate\\Http\\RedirectResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function redirectWithError(string $message): \\Illuminate\\Http\\RedirectResponse"
                },
                {
                    "name": "redirectWithValidationErrors",
                    "parameters": [
                        {
                            "type": "Validator",
                            "name": "$validator",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "\\Illuminate\\Http\\RedirectResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function redirectWithValidationErrors(\\Illuminate\\Contracts\\Validation\\Validator $validator): \\Illuminate\\Http\\RedirectResponse"
                }
            ],
            "method_count": 9
        },
        {
            "file_path": "app/Http/Controllers/AddonCoverController.php",
            "class_info": {
                "class_name": "AddonCoverController",
                "extends": "AbstractBaseCrudController",
                "implements": [],
                "uses": [
                    "App\\Contracts\\Services\\AddonCoverServiceInterface",
                    "App\\Models\\AddonCover",
                    "Illuminate\\Http\\Request",
                    "Illuminate\\Support\\Facades\\Validator"
                ],
                "properties": [],
                "property_count": 0
            },
            "methods": [
                {
                    "name": "index",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function index(Request $request)"
                },
                {
                    "name": "create",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function create()"
                },
                {
                    "name": "store",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function store(Request $request)"
                },
                {
                    "name": "updateStatus",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$addon_cover_id",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "",
                            "name": "$status",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function updateStatus($addon_cover_id, $status)"
                },
                {
                    "name": "edit",
                    "parameters": [
                        {
                            "type": "AddonCover",
                            "name": "$addon_cover",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function edit(AddonCover $addon_cover)"
                },
                {
                    "name": "update",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "AddonCover",
                            "name": "$addon_cover",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function update(Request $request, AddonCover $addon_cover)"
                },
                {
                    "name": "delete",
                    "parameters": [
                        {
                            "type": "AddonCover",
                            "name": "$addon_cover",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function delete(AddonCover $addon_cover)"
                },
                {
                    "name": "importAddonCovers",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function importAddonCovers()"
                },
                {
                    "name": "export",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function export()"
                }
            ],
            "method_count": 9
        },
        {
            "file_path": "app/Http/Controllers/BranchController.php",
            "class_info": {
                "class_name": "BranchController",
                "extends": "AbstractBaseCrudController",
                "implements": [],
                "uses": [
                    "App\\Contracts\\Repositories\\BranchRepositoryInterface",
                    "Illuminate\\Http\\RedirectResponse",
                    "Illuminate\\Http\\Request",
                    "Illuminate\\View\\View",
                    "Maatwebsite\\Excel\\Facades\\Excel",
                    "App\\Exports\\BranchesExport"
                ],
                "properties": [],
                "property_count": 0
            },
            "methods": [
                {
                    "name": "index",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "View",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function index(Request $request): View"
                },
                {
                    "name": "create",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "View",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function create(): View"
                },
                {
                    "name": "store",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "RedirectResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function store(Request $request): RedirectResponse"
                },
                {
                    "name": "edit",
                    "parameters": [
                        {
                            "type": "Branch",
                            "name": "$branch",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "View",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function edit(Branch $branch): View"
                },
                {
                    "name": "update",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "Branch",
                            "name": "$branch",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "RedirectResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function update(Request $request, Branch $branch): RedirectResponse"
                },
                {
                    "name": "updateStatus",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$branch_id",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "",
                            "name": "$status",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "RedirectResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function updateStatus($branch_id, $status): RedirectResponse"
                },
                {
                    "name": "export",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function export()"
                }
            ],
            "method_count": 7
        },
        {
            "file_path": "app/Http/Controllers/BrokerController.php",
            "class_info": {
                "class_name": "BrokerController",
                "extends": "AbstractBaseCrudController",
                "implements": [],
                "uses": [
                    "App\\Contracts\\Services\\BrokerServiceInterface",
                    "App\\Http\\Requests\\StoreBrokerRequest",
                    "App\\Http\\Requests\\UpdateBrokerRequest",
                    "App\\Models\\Broker",
                    "Illuminate\\Http\\RedirectResponse",
                    "Illuminate\\Http\\Request",
                    "Illuminate\\Support\\Facades\\DB",
                    "Illuminate\\Support\\Facades\\Validator",
                    "Illuminate\\View\\View",
                    "Maatwebsite\\Excel\\Facades\\Excel",
                    "App\\Exports\\BrokersExport"
                ],
                "properties": [],
                "property_count": 0
            },
            "methods": [
                {
                    "name": "index",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "View",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function index(Request $request): View"
                },
                {
                    "name": "create",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "View",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function create(): View"
                },
                {
                    "name": "store",
                    "parameters": [
                        {
                            "type": "StoreBrokerRequest",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "RedirectResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function store(StoreBrokerRequest $request): RedirectResponse"
                },
                {
                    "name": "updateStatus",
                    "parameters": [
                        {
                            "type": "int",
                            "name": "$broker_id",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "int",
                            "name": "$status",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "RedirectResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function updateStatus(int $broker_id, int $status): RedirectResponse"
                },
                {
                    "name": "edit",
                    "parameters": [
                        {
                            "type": "Broker",
                            "name": "$broker",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "View",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function edit(Broker $broker): View"
                },
                {
                    "name": "update",
                    "parameters": [
                        {
                            "type": "UpdateBrokerRequest",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "Broker",
                            "name": "$broker",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "RedirectResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function update(UpdateBrokerRequest $request, Broker $broker): RedirectResponse"
                },
                {
                    "name": "delete",
                    "parameters": [
                        {
                            "type": "Broker",
                            "name": "$broker",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "RedirectResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function delete(Broker $broker): RedirectResponse"
                },
                {
                    "name": "importBrokers",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "View",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function importBrokers(): View"
                },
                {
                    "name": "export",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function export()"
                }
            ],
            "method_count": 9
        },
        {
            "file_path": "app/Http/Controllers/ClaimController.php",
            "class_info": {
                "class_name": "ClaimController",
                "extends": "AbstractBaseCrudController",
                "implements": [],
                "uses": [
                    "App\\Http\\Requests\\StoreClaimRequest",
                    "App\\Http\\Requests\\UpdateClaimRequest",
                    "App\\Models\\Claim",
                    "App\\Services\\ClaimService",
                    "App\\Contracts\\Repositories\\CustomerInsuranceRepositoryInterface",
                    "Illuminate\\Http\\JsonResponse",
                    "Illuminate\\Http\\RedirectResponse",
                    "Illuminate\\Http\\Request",
                    "Illuminate\\View\\View",
                    "Maatwebsite\\Excel\\Facades\\Excel",
                    "App\\Exports\\ClaimsExport",
                    "web guard for admin\n        $this->setupCustomPermissionMiddleware([\n            ['permission' => 'claim-list|claim-create|claim-edit|claim-delete', 'only' => ['index']],\n            ['permission' => 'claim-create', 'only' => ['create', 'store', 'updateStatus']],\n            ['permission' => 'claim-edit', 'only' => ['edit', 'update']],\n            ['permission' => 'claim-delete', 'only' => ['delete']]\n        ])"
                ],
                "properties": [],
                "property_count": 0
            },
            "methods": [
                {
                    "name": "index",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "View",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function index(Request $request): View"
                },
                {
                    "name": "create",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "View",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function create(): View"
                },
                {
                    "name": "store",
                    "parameters": [
                        {
                            "type": "StoreClaimRequest",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "RedirectResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function store(StoreClaimRequest $request): RedirectResponse"
                },
                {
                    "name": "show",
                    "parameters": [
                        {
                            "type": "Claim",
                            "name": "$claim",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "View",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function show(Claim $claim): View"
                },
                {
                    "name": "edit",
                    "parameters": [
                        {
                            "type": "Claim",
                            "name": "$claim",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "View",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function edit(Claim $claim): View"
                },
                {
                    "name": "update",
                    "parameters": [
                        {
                            "type": "UpdateClaimRequest",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "Claim",
                            "name": "$claim",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "RedirectResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function update(UpdateClaimRequest $request, Claim $claim): RedirectResponse"
                },
                {
                    "name": "updateStatus",
                    "parameters": [
                        {
                            "type": "int",
                            "name": "$claimId",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "int",
                            "name": "$status",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "RedirectResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function updateStatus(int $claimId, int $status): RedirectResponse"
                },
                {
                    "name": "delete",
                    "parameters": [
                        {
                            "type": "Claim",
                            "name": "$claim",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "RedirectResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function delete(Claim $claim): RedirectResponse"
                },
                {
                    "name": "export",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function export(Request $request)"
                },
                {
                    "name": "searchPolicies",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "JsonResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function searchPolicies(Request $request): JsonResponse"
                },
                {
                    "name": "getStatistics",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "JsonResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getStatistics(): JsonResponse"
                },
                {
                    "name": "sendDocumentListWhatsApp",
                    "parameters": [
                        {
                            "type": "Claim",
                            "name": "$claim",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "JsonResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function sendDocumentListWhatsApp(Claim $claim): JsonResponse"
                },
                {
                    "name": "sendPendingDocumentsWhatsApp",
                    "parameters": [
                        {
                            "type": "Claim",
                            "name": "$claim",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "JsonResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function sendPendingDocumentsWhatsApp(Claim $claim): JsonResponse"
                },
                {
                    "name": "sendClaimNumberWhatsApp",
                    "parameters": [
                        {
                            "type": "Claim",
                            "name": "$claim",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "JsonResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function sendClaimNumberWhatsApp(Claim $claim): JsonResponse"
                },
                {
                    "name": "getWhatsAppPreview",
                    "parameters": [
                        {
                            "type": "Claim",
                            "name": "$claim",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "string",
                            "name": "$type",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "JsonResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getWhatsAppPreview(Claim $claim, string $type): JsonResponse"
                },
                {
                    "name": "updateDocumentStatus",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "Claim",
                            "name": "$claim",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "int",
                            "name": "$documentId",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 3,
                    "return_type": "JsonResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function updateDocumentStatus(Request $request, Claim $claim, int $documentId): JsonResponse"
                },
                {
                    "name": "addStage",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "Claim",
                            "name": "$claim",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "JsonResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function addStage(Request $request, Claim $claim): JsonResponse"
                },
                {
                    "name": "updateClaimNumber",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "Claim",
                            "name": "$claim",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "JsonResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function updateClaimNumber(Request $request, Claim $claim): JsonResponse"
                },
                {
                    "name": "updateLiabilityDetails",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "Claim",
                            "name": "$claim",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "JsonResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function updateLiabilityDetails(Request $request, Claim $claim): JsonResponse"
                }
            ],
            "method_count": 19
        },
        {
            "file_path": "app/Http/Controllers/CommonController.php",
            "class_info": {
                "class_name": "CommonController",
                "extends": "Controller",
                "implements": [],
                "uses": [
                    "Illuminate\\Http\\Request",
                    "Mail"
                ],
                "properties": [],
                "property_count": 0
            },
            "methods": [
                {
                    "name": "refreshCaptchaImage",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function refreshCaptchaImage(Request $request)"
                },
                {
                    "name": "deleteCommon",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function deleteCommon(Request $request)"
                },
                {
                    "name": "activeInactiveCommon",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function activeInactiveCommon(Request $request)"
                },
                {
                    "name": "getImage",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "",
                            "name": "$file_path",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "",
                            "name": "$file_name",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 3,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function getImage(Request $request, $file_path, $file_name)"
                },
                {
                    "name": "getImage1",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "",
                            "name": "$file_path1",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "",
                            "name": "$file_path2",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "",
                            "name": "$file_name",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 4,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function getImage1(Request $request, $file_path1, $file_path2, $file_name)"
                }
            ],
            "method_count": 5
        },
        {
            "file_path": "app/Http/Controllers/Controller.php",
            "class_info": {
                "class_name": "Controller",
                "extends": "BaseController",
                "implements": [],
                "uses": [
                    "Illuminate\\Foundation\\Auth\\Access\\AuthorizesRequests",
                    "Illuminate\\Foundation\\Bus\\DispatchesJobs",
                    "Illuminate\\Foundation\\Validation\\ValidatesRequests",
                    "Illuminate\\Routing\\Controller as BaseController",
                    "AuthorizesRequests, DispatchesJobs, ValidatesRequests"
                ],
                "properties": [],
                "property_count": 0
            },
            "methods": [],
            "method_count": 0
        },
        {
            "file_path": "app/Http/Controllers/CustomerController.php",
            "class_info": {
                "class_name": "CustomerController",
                "extends": "AbstractBaseCrudController",
                "implements": [],
                "uses": [
                    "App\\Contracts\\Services\\CustomerServiceInterface",
                    "App\\Exports\\CustomersExport",
                    "App\\Http\\Requests\\StoreCustomerRequest",
                    "App\\Http\\Requests\\UpdateCustomerRequest",
                    "App\\Models\\Customer",
                    "Illuminate\\Http\\RedirectResponse",
                    "Illuminate\\Http\\Request",
                    "Illuminate\\View\\View",
                    "Maatwebsite\\Excel\\Facades\\Excel"
                ],
                "properties": [],
                "property_count": 0
            },
            "methods": [
                {
                    "name": "index",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "View",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function index(Request $request): View"
                },
                {
                    "name": "create",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "View",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function create(): View"
                },
                {
                    "name": "store",
                    "parameters": [
                        {
                            "type": "StoreCustomerRequest",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "RedirectResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function store(StoreCustomerRequest $request): RedirectResponse"
                },
                {
                    "name": "updateStatus",
                    "parameters": [
                        {
                            "type": "int",
                            "name": "$customer_id",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "int",
                            "name": "$status",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "RedirectResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function updateStatus(int $customer_id, int $status): RedirectResponse"
                },
                {
                    "name": "edit",
                    "parameters": [
                        {
                            "type": "Customer",
                            "name": "$customer",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "View",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function edit(Customer $customer): View"
                },
                {
                    "name": "update",
                    "parameters": [
                        {
                            "type": "UpdateCustomerRequest",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "Customer",
                            "name": "$customer",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "RedirectResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function update(UpdateCustomerRequest $request, Customer $customer): RedirectResponse"
                },
                {
                    "name": "delete",
                    "parameters": [
                        {
                            "type": "Customer",
                            "name": "$customer",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "RedirectResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function delete(Customer $customer): RedirectResponse"
                },
                {
                    "name": "importCustomers",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "View",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function importCustomers(): View"
                },
                {
                    "name": "export",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function export()"
                },
                {
                    "name": "resendOnBoardingWA",
                    "parameters": [
                        {
                            "type": "Customer",
                            "name": "$customer",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "RedirectResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function resendOnBoardingWA(Customer $customer): RedirectResponse"
                }
            ],
            "method_count": 10
        },
        {
            "file_path": "app/Http/Controllers/CustomerInsuranceController.php",
            "class_info": {
                "class_name": "CustomerInsuranceController",
                "extends": "AbstractBaseCrudController",
                "implements": [],
                "uses": [
                    "App\\Contracts\\Services\\CustomerInsuranceServiceInterface",
                    "App\\Models\\Customer",
                    "App\\Models\\CustomerInsurance",
                    "App\\Traits\\WhatsAppApiTrait",
                    "Illuminate\\Http\\Request",
                    "Illuminate\\Support\\Facades\\Validator",
                    "WhatsAppApiTrait"
                ],
                "properties": [],
                "property_count": 0
            },
            "methods": [
                {
                    "name": "index",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function index(Request $request)"
                },
                {
                    "name": "create",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function create()"
                },
                {
                    "name": "store",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function store(Request $request)"
                },
                {
                    "name": "updateStatus",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$customer_insurance_id",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "",
                            "name": "$status",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function updateStatus($customer_insurance_id, $status)"
                },
                {
                    "name": "edit",
                    "parameters": [
                        {
                            "type": "CustomerInsurance",
                            "name": "$customer_insurance",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function edit(CustomerInsurance $customer_insurance)"
                },
                {
                    "name": "sendWADocument",
                    "parameters": [
                        {
                            "type": "CustomerInsurance",
                            "name": "$customer_insurance",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function sendWADocument(CustomerInsurance $customer_insurance)"
                },
                {
                    "name": "sendRenewalReminderWA",
                    "parameters": [
                        {
                            "type": "CustomerInsurance",
                            "name": "$customer_insurance",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function sendRenewalReminderWA(CustomerInsurance $customer_insurance)"
                },
                {
                    "name": "update",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "CustomerInsurance",
                            "name": "$customer_insurance",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function update(Request $request, CustomerInsurance $customer_insurance)"
                },
                {
                    "name": "delete",
                    "parameters": [
                        {
                            "type": "CustomerInsurance",
                            "name": "$customer_insurance",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function delete(CustomerInsurance $customer_insurance)"
                },
                {
                    "name": "importCustomerInsurances",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function importCustomerInsurances()"
                },
                {
                    "name": "export",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function export()"
                },
                {
                    "name": "renew",
                    "parameters": [
                        {
                            "type": "CustomerInsurance",
                            "name": "$customer_insurance",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function renew(CustomerInsurance $customer_insurance)"
                },
                {
                    "name": "storeRenew",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "CustomerInsurance",
                            "name": "$customer_insurance",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function storeRenew(Request $request, CustomerInsurance $customer_insurance)"
                }
            ],
            "method_count": 13
        },
        {
            "file_path": "app/Http/Controllers/FamilyGroupController.php",
            "class_info": {
                "class_name": "FamilyGroupController",
                "extends": "AbstractBaseCrudController",
                "implements": [],
                "uses": [
                    "App\\Contracts\\Services\\FamilyGroupServiceInterface",
                    "App\\Contracts\\Repositories\\CustomerRepositoryInterface",
                    "App\\Models\\FamilyGroup",
                    "App\\Models\\FamilyMember",
                    "App\\Models\\Customer",
                    "Illuminate\\Http\\Request",
                    "Illuminate\\Support\\Facades\\Validator",
                    "Illuminate\\Support\\Facades\\DB",
                    "($familyGroups) {\r\n                $file = fopen('php://output', 'w')"
                ],
                "properties": [],
                "property_count": 0
            },
            "methods": [
                {
                    "name": "index",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function index(Request $request)"
                },
                {
                    "name": "create",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function create()"
                },
                {
                    "name": "store",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function store(Request $request)"
                },
                {
                    "name": "show",
                    "parameters": [
                        {
                            "type": "FamilyGroup",
                            "name": "$familyGroup",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function show(FamilyGroup $familyGroup)"
                },
                {
                    "name": "edit",
                    "parameters": [
                        {
                            "type": "FamilyGroup",
                            "name": "$familyGroup",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function edit(FamilyGroup $familyGroup)"
                },
                {
                    "name": "update",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "FamilyGroup",
                            "name": "$familyGroup",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function update(Request $request, FamilyGroup $familyGroup)"
                },
                {
                    "name": "destroy",
                    "parameters": [
                        {
                            "type": "FamilyGroup",
                            "name": "$familyGroup",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function destroy(FamilyGroup $familyGroup)"
                },
                {
                    "name": "updateStatus",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$familyGroupId",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "",
                            "name": "$status",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function updateStatus($familyGroupId, $status)"
                },
                {
                    "name": "export",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function export()"
                },
                {
                    "name": "removeMember",
                    "parameters": [
                        {
                            "type": "FamilyMember",
                            "name": "$familyMember",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function removeMember(FamilyMember $familyMember)"
                }
            ],
            "method_count": 10
        },
        {
            "file_path": "app/Http/Controllers/FuelTypeController.php",
            "class_info": {
                "class_name": "FuelTypeController",
                "extends": "AbstractBaseCrudController",
                "implements": [],
                "uses": [
                    "App\\Exports\\FuelTypesExport",
                    "App\\Models\\FuelType",
                    "App\\Services\\FuelTypeService",
                    "Illuminate\\Http\\Request",
                    "Illuminate\\Support\\Facades\\Validator",
                    "Maatwebsite\\Excel\\Facades\\Excel"
                ],
                "properties": [],
                "property_count": 0
            },
            "methods": [
                {
                    "name": "index",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function index(Request $request)"
                },
                {
                    "name": "create",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function create()"
                },
                {
                    "name": "store",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function store(Request $request)"
                },
                {
                    "name": "updateStatus",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$fuel_type_id",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "",
                            "name": "$status",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function updateStatus($fuel_type_id, $status)"
                },
                {
                    "name": "edit",
                    "parameters": [
                        {
                            "type": "FuelType",
                            "name": "$fuel_type",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function edit(FuelType $fuel_type)"
                },
                {
                    "name": "update",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "FuelType",
                            "name": "$fuel_type",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function update(Request $request, FuelType $fuel_type)"
                },
                {
                    "name": "delete",
                    "parameters": [
                        {
                            "type": "FuelType",
                            "name": "$fuel_type",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function delete(FuelType $fuel_type)"
                },
                {
                    "name": "importFuelTypes",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function importFuelTypes()"
                },
                {
                    "name": "export",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function export()"
                }
            ],
            "method_count": 9
        },
        {
            "file_path": "app/Http/Controllers/HealthController.php",
            "class_info": {
                "class_name": "HealthController",
                "extends": "Controller",
                "implements": [],
                "uses": [
                    "App\\Services\\HealthCheckService",
                    "App\\Services\\LoggingService",
                    "Illuminate\\Http\\JsonResponse",
                    "Illuminate\\Http\\Request"
                ],
                "properties": [],
                "property_count": 0
            },
            "methods": [
                {
                    "name": "__construct",
                    "parameters": [
                        {
                            "type": "HealthCheckService",
                            "name": "$healthService",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "LoggingService",
                            "name": "$logger",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function __construct(HealthCheckService $healthService, LoggingService $logger)"
                },
                {
                    "name": "health",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "JsonResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function health(): JsonResponse"
                },
                {
                    "name": "detailed",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "JsonResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function detailed(): JsonResponse"
                },
                {
                    "name": "metrics",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "JsonResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function metrics(): JsonResponse"
                },
                {
                    "name": "liveness",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "JsonResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function liveness(): JsonResponse"
                },
                {
                    "name": "readiness",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "JsonResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function readiness(): JsonResponse"
                },
                {
                    "name": "performance",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "JsonResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function performance(Request $request): JsonResponse"
                },
                {
                    "name": "resources",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "JsonResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function resources(): JsonResponse"
                },
                {
                    "name": "logs",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "JsonResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function logs(Request $request): JsonResponse"
                },
                {
                    "name": "getSystemUptime",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "?float",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getSystemUptime(): ?float"
                }
            ],
            "method_count": 10
        },
        {
            "file_path": "app/Http/Controllers/HomeController.php",
            "class_info": {
                "class_name": "HomeController",
                "extends": "AbstractBaseCrudController",
                "implements": [],
                "uses": [
                    "App\\Models\\Customer",
                    "App\\Models\\CustomerInsurance",
                    "App\\Models\\User",
                    "App\\Rules\\MatchOldPassword",
                    "Illuminate\\Http\\Request",
                    "Illuminate\\Support\\Carbon",
                    "Illuminate\\Support\\Facades\\Auth",
                    "Illuminate\\Support\\Facades\\DB",
                    "Illuminate\\Support\\Facades\\Hash"
                ],
                "properties": [],
                "property_count": 0
            },
            "methods": [
                {
                    "name": "__construct",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function __construct()"
                },
                {
                    "name": "index",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function index(Request $request)"
                },
                {
                    "name": "prepareDashboardData",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "array",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function prepareDashboardData(Request $request): array"
                },
                {
                    "name": "getCustomerStatistics",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "array",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getCustomerStatistics(): array"
                },
                {
                    "name": "getFinancialStatistics",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "array",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getFinancialStatistics(): array"
                },
                {
                    "name": "getMonthlyFinancialData",
                    "parameters": [
                        {
                            "type": "Carbon",
                            "name": "$month",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "string",
                            "name": "$prefix",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "array",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getMonthlyFinancialData(Carbon $month, string $prefix): array"
                },
                {
                    "name": "getRenewalStatistics",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "array",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getRenewalStatistics(): array"
                },
                {
                    "name": "getExpiringInsurancesCount",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "int",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getExpiringInsurancesCount(): int"
                },
                {
                    "name": "getFinancialYearChartData",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "array",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getFinancialYearChartData(): array"
                },
                {
                    "name": "getFinancialYearDates",
                    "parameters": [
                        {
                            "type": "Carbon",
                            "name": "$date",
                            "default": "null",
                            "has_default": true
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "array",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getFinancialYearDates(Carbon $date = null): array"
                },
                {
                    "name": "groupDataByMonth",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$data",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "array",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function groupDataByMonth($data): array"
                },
                {
                    "name": "getCompressionData",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "array",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getCompressionData(Request $request): array"
                },
                {
                    "name": "getSumColumns",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "array",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getSumColumns(): array"
                },
                {
                    "name": "getFinancialDataForPeriod",
                    "parameters": [
                        {
                            "type": "Carbon",
                            "name": "$startDate",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "Carbon",
                            "name": "$endDate",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "array",
                            "name": "$columns",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 3,
                    "return_type": "array",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getFinancialDataForPeriod(Carbon $startDate, Carbon $endDate, array $columns): array"
                },
                {
                    "name": "getFinancialDataForDate",
                    "parameters": [
                        {
                            "type": "Carbon",
                            "name": "$date",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "array",
                            "name": "$columns",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "array",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getFinancialDataForDate(Carbon $date, array $columns): array"
                },
                {
                    "name": "getQuarterlyData",
                    "parameters": [
                        {
                            "type": "Carbon",
                            "name": "$financialYearStart",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "array",
                            "name": "$columns",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "array",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getQuarterlyData(Carbon $financialYearStart, array $columns): array"
                },
                {
                    "name": "getQuarterDates",
                    "parameters": [
                        {
                            "type": "Carbon",
                            "name": "$financialYearStart",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "array",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getQuarterDates(Carbon $financialYearStart): array"
                },
                {
                    "name": "getProfile",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function getProfile()"
                },
                {
                    "name": "updateProfile",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function updateProfile(Request $request)"
                },
                {
                    "name": "updateUserProfile",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "void",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function updateUserProfile(Request $request): void"
                },
                {
                    "name": "changePassword",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function changePassword(Request $request)"
                },
                {
                    "name": "updateUserPassword",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "$newPassword",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "void",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function updateUserPassword(string $newPassword): void"
                }
            ],
            "method_count": 22
        },
        {
            "file_path": "app/Http/Controllers/InsuranceCompanyController.php",
            "class_info": {
                "class_name": "InsuranceCompanyController",
                "extends": "AbstractBaseCrudController",
                "implements": [],
                "uses": [
                    "App\\Contracts\\Services\\InsuranceCompanyServiceInterface",
                    "App\\Models\\InsuranceCompany",
                    "Illuminate\\Http\\Request"
                ],
                "properties": [],
                "property_count": 0
            },
            "methods": [
                {
                    "name": "index",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function index(Request $request)"
                },
                {
                    "name": "create",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function create()"
                },
                {
                    "name": "store",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function store(Request $request)"
                },
                {
                    "name": "updateStatus",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$insurance_company_id",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "",
                            "name": "$status",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function updateStatus($insurance_company_id, $status)"
                },
                {
                    "name": "edit",
                    "parameters": [
                        {
                            "type": "InsuranceCompany",
                            "name": "$insurance_company",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function edit(InsuranceCompany $insurance_company)"
                },
                {
                    "name": "update",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "InsuranceCompany",
                            "name": "$insurance_company",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function update(Request $request, InsuranceCompany $insurance_company)"
                },
                {
                    "name": "delete",
                    "parameters": [
                        {
                            "type": "InsuranceCompany",
                            "name": "$insurance_company",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function delete(InsuranceCompany $insurance_company)"
                },
                {
                    "name": "importInsuranceCompanys",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function importInsuranceCompanys()"
                },
                {
                    "name": "export",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function export()"
                }
            ],
            "method_count": 9
        },
        {
            "file_path": "app/Http/Controllers/MarketingWhatsAppController.php",
            "class_info": {
                "class_name": "MarketingWhatsAppController",
                "extends": "AbstractBaseCrudController",
                "implements": [],
                "uses": [
                    "App\\Contracts\\Services\\MarketingWhatsAppServiceInterface",
                    "Illuminate\\Http\\Request",
                    "Illuminate\\Support\\Facades\\Validator"
                ],
                "properties": [],
                "property_count": 0
            },
            "methods": [
                {
                    "name": "index",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function index()"
                },
                {
                    "name": "send",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function send(Request $request)"
                },
                {
                    "name": "preview",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function preview(Request $request)"
                }
            ],
            "method_count": 3
        },
        {
            "file_path": "app/Http/Controllers/PermissionsController.php",
            "class_info": {
                "class_name": "PermissionsController",
                "extends": "AbstractBaseCrudController",
                "implements": [],
                "uses": [
                    "App\\Contracts\\Repositories\\PermissionRepositoryInterface",
                    "Illuminate\\Http\\Request",
                    "Illuminate\\Support\\Facades\\DB"
                ],
                "properties": [],
                "property_count": 0
            },
            "methods": [
                {
                    "name": "index",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function index(Request $request)"
                },
                {
                    "name": "create",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function create()"
                },
                {
                    "name": "store",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function store(Request $request)"
                },
                {
                    "name": "show",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$id",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function show($id)"
                },
                {
                    "name": "edit",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$id",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function edit($id)"
                },
                {
                    "name": "update",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "",
                            "name": "$id",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function update(Request $request, $id)"
                },
                {
                    "name": "destroy",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$id",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function destroy($id)"
                }
            ],
            "method_count": 7
        },
        {
            "file_path": "app/Http/Controllers/PolicyTypeController.php",
            "class_info": {
                "class_name": "PolicyTypeController",
                "extends": "AbstractBaseCrudController",
                "implements": [],
                "uses": [
                    "App\\Models\\PolicyType",
                    "App\\Services\\PolicyTypeService",
                    "Illuminate\\Http\\Request",
                    "App\\Exports\\PolicyTypesExport",
                    "Maatwebsite\\Excel\\Facades\\Excel",
                    "Illuminate\\Support\\Facades\\Validator"
                ],
                "properties": [],
                "property_count": 0
            },
            "methods": [
                {
                    "name": "index",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function index(Request $request)"
                },
                {
                    "name": "create",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function create()"
                },
                {
                    "name": "store",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function store(Request $request)"
                },
                {
                    "name": "updateStatus",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$policy_type_id",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "",
                            "name": "$status",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function updateStatus($policy_type_id, $status)"
                },
                {
                    "name": "edit",
                    "parameters": [
                        {
                            "type": "PolicyType",
                            "name": "$policy_type",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function edit(PolicyType $policy_type)"
                },
                {
                    "name": "update",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "PolicyType",
                            "name": "$policy_type",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function update(Request $request, PolicyType $policy_type)"
                },
                {
                    "name": "delete",
                    "parameters": [
                        {
                            "type": "PolicyType",
                            "name": "$policy_type",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function delete(PolicyType $policy_type)"
                },
                {
                    "name": "importPolicyTypes",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function importPolicyTypes()"
                },
                {
                    "name": "export",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function export()"
                }
            ],
            "method_count": 9
        },
        {
            "file_path": "app/Http/Controllers/PremiumTypeController.php",
            "class_info": {
                "class_name": "PremiumTypeController",
                "extends": "AbstractBaseCrudController",
                "implements": [],
                "uses": [
                    "App\\Models\\PremiumType",
                    "App\\Services\\PremiumTypeService",
                    "Illuminate\\Http\\Request",
                    "App\\Exports\\PremiumTypesExport",
                    "Maatwebsite\\Excel\\Facades\\Excel",
                    "Illuminate\\Support\\Facades\\Validator"
                ],
                "properties": [],
                "property_count": 0
            },
            "methods": [
                {
                    "name": "index",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function index(Request $request)"
                },
                {
                    "name": "create",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function create()"
                },
                {
                    "name": "store",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function store(Request $request)"
                },
                {
                    "name": "updateStatus",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$premium_type_id",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "",
                            "name": "$status",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function updateStatus($premium_type_id, $status)"
                },
                {
                    "name": "edit",
                    "parameters": [
                        {
                            "type": "PremiumType",
                            "name": "$premium_type",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function edit(PremiumType $premium_type)"
                },
                {
                    "name": "update",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "PremiumType",
                            "name": "$premium_type",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function update(Request $request, PremiumType $premium_type)"
                },
                {
                    "name": "delete",
                    "parameters": [
                        {
                            "type": "PremiumType",
                            "name": "$premium_type",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function delete(PremiumType $premium_type)"
                },
                {
                    "name": "importPremiumTypes",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function importPremiumTypes()"
                },
                {
                    "name": "export",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function export()"
                }
            ],
            "method_count": 9
        },
        {
            "file_path": "app/Http/Controllers/QuotationController.php",
            "class_info": {
                "class_name": "QuotationController",
                "extends": "AbstractBaseCrudController",
                "implements": [],
                "uses": [
                    "App\\Contracts\\Services\\QuotationServiceInterface",
                    "App\\Http\\Requests\\CreateQuotationRequest",
                    "App\\Http\\Requests\\UpdateQuotationRequest",
                    "App\\Models\\Quotation",
                    "Illuminate\\Http\\RedirectResponse",
                    "Illuminate\\Http\\Request",
                    "Illuminate\\Support\\Facades\\DB",
                    "Illuminate\\View\\View"
                ],
                "properties": [],
                "property_count": 0
            },
            "methods": [
                {
                    "name": "__construct",
                    "parameters": [
                        {
                            "type": "QuotationServiceInterface",
                            "name": "$quotationService",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function __construct(private QuotationServiceInterface $quotationService)"
                },
                {
                    "name": "index",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "View",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function index(Request $request): View"
                },
                {
                    "name": "create",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "View",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function create(): View"
                },
                {
                    "name": "store",
                    "parameters": [
                        {
                            "type": "CreateQuotationRequest",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "RedirectResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function store(CreateQuotationRequest $request): RedirectResponse"
                },
                {
                    "name": "show",
                    "parameters": [
                        {
                            "type": "Quotation",
                            "name": "$quotation",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "View",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function show(Quotation $quotation): View"
                },
                {
                    "name": "edit",
                    "parameters": [
                        {
                            "type": "Quotation",
                            "name": "$quotation",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "View",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function edit(Quotation $quotation): View"
                },
                {
                    "name": "update",
                    "parameters": [
                        {
                            "type": "UpdateQuotationRequest",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "Quotation",
                            "name": "$quotation",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "RedirectResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function update(UpdateQuotationRequest $request, Quotation $quotation): RedirectResponse"
                },
                {
                    "name": "generateQuotes",
                    "parameters": [
                        {
                            "type": "Quotation",
                            "name": "$quotation",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "RedirectResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function generateQuotes(Quotation $quotation): RedirectResponse"
                },
                {
                    "name": "sendToWhatsApp",
                    "parameters": [
                        {
                            "type": "Quotation",
                            "name": "$quotation",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "RedirectResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function sendToWhatsApp(Quotation $quotation): RedirectResponse"
                },
                {
                    "name": "downloadPdf",
                    "parameters": [
                        {
                            "type": "Quotation",
                            "name": "$quotation",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function downloadPdf(Quotation $quotation)"
                },
                {
                    "name": "getQuoteFormHtml",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function getQuoteFormHtml(Request $request)"
                },
                {
                    "name": "delete",
                    "parameters": [
                        {
                            "type": "Quotation",
                            "name": "$quotation",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "RedirectResponse",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function delete(Quotation $quotation): RedirectResponse"
                }
            ],
            "method_count": 12
        },
        {
            "file_path": "app/Http/Controllers/ReferenceUsersController.php",
            "class_info": {
                "class_name": "ReferenceUsersController",
                "extends": "AbstractBaseCrudController",
                "implements": [],
                "uses": [
                    "Illuminate\\Http\\Request",
                    "App\\Models\\ReferenceUser",
                    "App\\Services\\ReferenceUserService",
                    "Maatwebsite\\Excel\\Facades\\Excel",
                    "App\\Exports\\ReferenceUsersExport",
                    "Illuminate\\Support\\Facades\\Validator",
                    "Throwable"
                ],
                "properties": [],
                "property_count": 0
            },
            "methods": [
                {
                    "name": "index",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function index(Request $request)"
                },
                {
                    "name": "create",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function create()"
                },
                {
                    "name": "store",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function store(Request $request)"
                },
                {
                    "name": "updateStatus",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$reference_user_id",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "",
                            "name": "$status",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function updateStatus($reference_user_id, $status)"
                },
                {
                    "name": "edit",
                    "parameters": [
                        {
                            "type": "ReferenceUser",
                            "name": "$reference_user",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function edit(ReferenceUser $reference_user)"
                },
                {
                    "name": "update",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "ReferenceUser",
                            "name": "$reference_user",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function update(Request $request, ReferenceUser $reference_user)"
                },
                {
                    "name": "delete",
                    "parameters": [
                        {
                            "type": "ReferenceUser",
                            "name": "$reference_user",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function delete(ReferenceUser $reference_user)"
                },
                {
                    "name": "importReferenceUsers",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function importReferenceUsers()"
                },
                {
                    "name": "export",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function export()"
                }
            ],
            "method_count": 9
        },
        {
            "file_path": "app/Http/Controllers/RelationshipManagerController.php",
            "class_info": {
                "class_name": "RelationshipManagerController",
                "extends": "AbstractBaseCrudController",
                "implements": [],
                "uses": [
                    "App\\Models\\RelationshipManager",
                    "App\\Services\\RelationshipManagerService",
                    "Illuminate\\Http\\Request",
                    "App\\Exports\\RelationshipManagersExport",
                    "Maatwebsite\\Excel\\Facades\\Excel",
                    "Illuminate\\Support\\Facades\\Validator"
                ],
                "properties": [],
                "property_count": 0
            },
            "methods": [
                {
                    "name": "index",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function index(Request $request)"
                },
                {
                    "name": "create",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function create()"
                },
                {
                    "name": "store",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function store(Request $request)"
                },
                {
                    "name": "updateStatus",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$relationship_manager_id",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "",
                            "name": "$status",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function updateStatus($relationship_manager_id, $status)"
                },
                {
                    "name": "edit",
                    "parameters": [
                        {
                            "type": "RelationshipManager",
                            "name": "$relationship_manager",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function edit(RelationshipManager $relationship_manager)"
                },
                {
                    "name": "update",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "RelationshipManager",
                            "name": "$relationship_manager",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function update(Request $request, RelationshipManager $relationship_manager)"
                },
                {
                    "name": "delete",
                    "parameters": [
                        {
                            "type": "RelationshipManager",
                            "name": "$relationship_manager",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function delete(RelationshipManager $relationship_manager)"
                },
                {
                    "name": "importRelationshipManagers",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function importRelationshipManagers()"
                },
                {
                    "name": "export",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function export()"
                }
            ],
            "method_count": 9
        },
        {
            "file_path": "app/Http/Controllers/ReportController.php",
            "class_info": {
                "class_name": "ReportController",
                "extends": "AbstractBaseCrudController",
                "implements": [],
                "uses": [
                    "App\\Contracts\\Services\\ReportServiceInterface",
                    "App\\Models\\Report",
                    "Illuminate\\Http\\Request"
                ],
                "properties": [],
                "property_count": 0
            },
            "methods": [
                {
                    "name": "__construct",
                    "parameters": [
                        {
                            "type": "ReportServiceInterface",
                            "name": "$reportService",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function __construct(private ReportServiceInterface $reportService)"
                },
                {
                    "name": "index",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function index(Request $request)"
                },
                {
                    "name": "export",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function export(Request $request)"
                },
                {
                    "name": "saveColumns",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function saveColumns(Request $request)"
                },
                {
                    "name": "loadColumns",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "",
                            "name": "$report_name",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function loadColumns(Request $request, $report_name)"
                }
            ],
            "method_count": 5
        },
        {
            "file_path": "app/Http/Controllers/RolesController.php",
            "class_info": {
                "class_name": "RolesController",
                "extends": "AbstractBaseCrudController",
                "implements": [],
                "uses": [
                    "App\\Contracts\\Repositories\\RoleRepositoryInterface",
                    "App\\Contracts\\Repositories\\PermissionRepositoryInterface",
                    "Illuminate\\Http\\Request",
                    "Illuminate\\Support\\Facades\\DB"
                ],
                "properties": [],
                "property_count": 0
            },
            "methods": [
                {
                    "name": "index",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function index(Request $request)"
                },
                {
                    "name": "create",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function create()"
                },
                {
                    "name": "store",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function store(Request $request)"
                },
                {
                    "name": "show",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$id",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function show($id)"
                },
                {
                    "name": "edit",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$id",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function edit($id)"
                },
                {
                    "name": "update",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "",
                            "name": "$id",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function update(Request $request, $id)"
                },
                {
                    "name": "destroy",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$id",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function destroy($id)"
                }
            ],
            "method_count": 7
        },
        {
            "file_path": "app/Http/Controllers/UserController.php",
            "class_info": {
                "class_name": "UserController",
                "extends": "AbstractBaseCrudController",
                "implements": [],
                "uses": [
                    "App\\Models\\User",
                    "Illuminate\\Http\\Request",
                    "Illuminate\\Support\\Facades\\Validator",
                    "Maatwebsite\\Excel\\Facades\\Excel",
                    "App\\Contracts\\Services\\UserServiceInterface"
                ],
                "properties": [],
                "property_count": 0
            },
            "methods": [
                {
                    "name": "index",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function index(Request $request)"
                },
                {
                    "name": "create",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function create()"
                },
                {
                    "name": "store",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function store(Request $request)"
                },
                {
                    "name": "updateStatus",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$user_id",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "",
                            "name": "$status",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function updateStatus($user_id, $status)"
                },
                {
                    "name": "edit",
                    "parameters": [
                        {
                            "type": "User",
                            "name": "$user",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function edit(User $user)"
                },
                {
                    "name": "update",
                    "parameters": [
                        {
                            "type": "Request",
                            "name": "$request",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "User",
                            "name": "$user",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function update(Request $request, User $user)"
                },
                {
                    "name": "delete",
                    "parameters": [
                        {
                            "type": "User",
                            "name": "$user",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function delete(User $user)"
                },
                {
                    "name": "importUsers",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function importUsers()"
                },
                {
                    "name": "export",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function export()"
                }
            ],
            "method_count": 9
        }
    ],
    "models": [
        {
            "file_path": "app/Models/AddonCover.php",
            "class_info": {
                "class_name": "AddonCover",
                "extends": "Authenticatable",
                "implements": [],
                "uses": [
                    "App\\Traits\\TableRecordObserver",
                    "Spatie\\Activitylog\\LogOptions",
                    "Spatie\\Permission\\Traits\\HasRoles",
                    "Illuminate\\Notifications\\Notifiable",
                    "Spatie\\Activitylog\\Traits\\LogsActivity",
                    "Illuminate\\Database\\Eloquent\\SoftDeletes",
                    "Illuminate\\Database\\Eloquent\\Factories\\HasFactory",
                    "Illuminate\\Foundation\\Auth\\User as Authenticatable",
                    "HasFactory, Notifiable, HasRoles, SoftDeletes, TableRecordObserver, LogsActivity"
                ],
                "properties": [
                    "logAttributes",
                    "logOnlyDirty",
                    "fillable",
                    "casts"
                ],
                "property_count": 4
            },
            "methods": [
                {
                    "name": "booted",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function booted()"
                },
                {
                    "name": "handleSmartOrdering",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$addonCover",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function handleSmartOrdering($addonCover)"
                },
                {
                    "name": "getNextAvailableOrder",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function getNextAvailableOrder()"
                },
                {
                    "name": "getOrdered",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$status",
                            "default": "1",
                            "has_default": true
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function getOrdered($status = 1)"
                },
                {
                    "name": "getActivitylogOptions",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "LogOptions",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getActivitylogOptions(): LogOptions"
                }
            ],
            "method_count": 5
        },
        {
            "file_path": "app/Models/Branch.php",
            "class_info": {
                "class_name": "Branch",
                "extends": "Authenticatable",
                "implements": [],
                "uses": [
                    "App\\Models\\CustomerInsurance",
                    "Laravel\\Sanctum\\HasApiTokens",
                    "Spatie\\Activitylog\\LogOptions",
                    "App\\Traits\\TableRecordObserver",
                    "Spatie\\Permission\\Traits\\HasRoles",
                    "Illuminate\\Notifications\\Notifiable",
                    "Spatie\\Activitylog\\Traits\\LogsActivity",
                    "Illuminate\\Database\\Eloquent\\SoftDeletes",
                    "Illuminate\\Database\\Eloquent\\Factories\\HasFactory",
                    "Illuminate\\Foundation\\Auth\\User as Authenticatable",
                    "HasApiTokens, HasFactory, Notifiable, HasRoles, SoftDeletes, TableRecordObserver, LogsActivity"
                ],
                "properties": [
                    "table",
                    "logAttributes",
                    "logOnlyDirty",
                    "fillable"
                ],
                "property_count": 4
            },
            "methods": [
                {
                    "name": "customerInsurances",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function customerInsurances()"
                },
                {
                    "name": "getActivitylogOptions",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "LogOptions",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getActivitylogOptions(): LogOptions"
                }
            ],
            "method_count": 2
        },
        {
            "file_path": "app/Models/Broker.php",
            "class_info": {
                "class_name": "Broker",
                "extends": "Authenticatable",
                "implements": [],
                "uses": [
                    "App\\Models\\CustomerInsurance",
                    "Spatie\\Activitylog\\LogOptions",
                    "App\\Traits\\TableRecordObserver",
                    "Spatie\\Permission\\Traits\\HasRoles",
                    "Illuminate\\Notifications\\Notifiable",
                    "Spatie\\Activitylog\\Traits\\LogsActivity",
                    "Illuminate\\Database\\Eloquent\\SoftDeletes",
                    "Illuminate\\Database\\Eloquent\\Factories\\HasFactory",
                    "Illuminate\\Foundation\\Auth\\User as Authenticatable",
                    "HasFactory, Notifiable, HasRoles, SoftDeletes, TableRecordObserver, LogsActivity"
                ],
                "properties": [
                    "logAttributes",
                    "logOnlyDirty",
                    "fillable"
                ],
                "property_count": 3
            },
            "methods": [
                {
                    "name": "customerInsurances",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function customerInsurances()"
                },
                {
                    "name": "getActivitylogOptions",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "LogOptions",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getActivitylogOptions(): LogOptions"
                }
            ],
            "method_count": 2
        },
        {
            "file_path": "app/Models/Claim.php",
            "class_info": {
                "class_name": "Claim",
                "extends": "Model",
                "implements": [],
                "uses": [
                    "App\\Mail\\ClaimNotificationMail",
                    "App\\Traits\\TableRecordObserver",
                    "App\\Traits\\WhatsAppApiTrait",
                    "Illuminate\\Database\\Eloquent\\Factories\\HasFactory",
                    "Illuminate\\Database\\Eloquent\\Model",
                    "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
                    "Illuminate\\Database\\Eloquent\\Relations\\HasMany",
                    "Illuminate\\Database\\Eloquent\\Relations\\HasOne",
                    "Illuminate\\Database\\Eloquent\\SoftDeletes",
                    "Illuminate\\Support\\Facades\\Mail",
                    "Laravel\\Sanctum\\HasApiTokens",
                    "Spatie\\Activitylog\\LogOptions",
                    "Spatie\\Activitylog\\Traits\\LogsActivity",
                    "Spatie\\Permission\\Traits\\HasRoles",
                    "HasApiTokens, HasFactory, HasRoles, SoftDeletes, TableRecordObserver, LogsActivity, WhatsAppApiTrait"
                ],
                "properties": [
                    "fillable",
                    "casts",
                    "logAttributes",
                    "logOnlyDirty"
                ],
                "property_count": 4
            },
            "methods": [
                {
                    "name": "customer",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "BelongsTo",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function customer(): BelongsTo"
                },
                {
                    "name": "customerInsurance",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "BelongsTo",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function customerInsurance(): BelongsTo"
                },
                {
                    "name": "stages",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "HasMany",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function stages(): HasMany"
                },
                {
                    "name": "currentStage",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "HasOne",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function currentStage(): HasOne"
                },
                {
                    "name": "documents",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "HasMany",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function documents(): HasMany"
                },
                {
                    "name": "liabilityDetail",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "HasOne",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function liabilityDetail(): HasOne"
                },
                {
                    "name": "generateClaimNumber",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "string",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function generateClaimNumber(): string"
                },
                {
                    "name": "createDefaultDocuments",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "void",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function createDefaultDocuments(): void"
                },
                {
                    "name": "createInitialStage",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "ClaimStage",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function createInitialStage(): ClaimStage"
                },
                {
                    "name": "getActivitylogOptions",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "LogOptions",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getActivitylogOptions(): LogOptions"
                },
                {
                    "name": "isActive",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "bool",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function isActive(): bool"
                },
                {
                    "name": "getIncidentDateFormattedAttribute",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "string",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getIncidentDateFormattedAttribute(): string"
                },
                {
                    "name": "setIncidentDateAttribute",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$value",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "void",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function setIncidentDateAttribute($value): void"
                },
                {
                    "name": "getDocumentCompletionPercentage",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "float",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getDocumentCompletionPercentage(): float"
                },
                {
                    "name": "getRequiredDocumentCompletionPercentage",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "float",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getRequiredDocumentCompletionPercentage(): float"
                },
                {
                    "name": "getWhatsAppNumber",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "string",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getWhatsAppNumber(): string"
                },
                {
                    "name": "getHealthInsuranceDocumentListMessage",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "string",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getHealthInsuranceDocumentListMessage(): string"
                },
                {
                    "name": "getVehicleInsuranceDocumentListMessage",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "string",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getVehicleInsuranceDocumentListMessage(): string"
                },
                {
                    "name": "getPendingDocumentsMessage",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "string",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getPendingDocumentsMessage(): string"
                },
                {
                    "name": "getClaimNumberNotificationMessage",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "string",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getClaimNumberNotificationMessage(): string"
                },
                {
                    "name": "sendDocumentListWhatsApp",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "array",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function sendDocumentListWhatsApp(): array"
                },
                {
                    "name": "sendPendingDocumentsWhatsApp",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "array",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function sendPendingDocumentsWhatsApp(): array"
                },
                {
                    "name": "sendClaimNumberWhatsApp",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "array",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function sendClaimNumberWhatsApp(): array"
                },
                {
                    "name": "sendStageUpdateWhatsApp",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "$stageName",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "string",
                            "name": "$notes",
                            "default": "null",
                            "has_default": true
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "array",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function sendStageUpdateWhatsApp(string $stageName, ?string $notes = null): array"
                },
                {
                    "name": "sendEmailNotification",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "$type",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "array",
                            "name": "$additionalData",
                            "default": "[]",
                            "has_default": true
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "array",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function sendEmailNotification(string $type, array $additionalData = []): array"
                },
                {
                    "name": "sendClaimCreatedNotification",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "void",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function sendClaimCreatedNotification(): void"
                },
                {
                    "name": "sendStageUpdateNotification",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "$stageName",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "string",
                            "name": "$description",
                            "default": "null",
                            "has_default": true
                        },
                        {
                            "type": "string",
                            "name": "$notes",
                            "default": "null",
                            "has_default": true
                        }
                    ],
                    "parameter_count": 3,
                    "return_type": "void",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function sendStageUpdateNotification(string $stageName, ?string $description = null, ?string $notes = null): void"
                },
                {
                    "name": "sendClaimNumberAssignedNotification",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "void",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function sendClaimNumberAssignedNotification(): void"
                },
                {
                    "name": "sendDocumentRequestNotification",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "void",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function sendDocumentRequestNotification(): void"
                },
                {
                    "name": "sendClaimClosureNotification",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "$reason",
                            "default": "null",
                            "has_default": true
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "void",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function sendClaimClosureNotification(?string $reason = null): void"
                }
            ],
            "method_count": 30
        },
        {
            "file_path": "app/Models/ClaimDocument.php",
            "class_info": {
                "class_name": "ClaimDocument",
                "extends": "Model",
                "implements": [],
                "uses": [
                    "App\\Traits\\TableRecordObserver",
                    "Illuminate\\Database\\Eloquent\\Factories\\HasFactory",
                    "Illuminate\\Database\\Eloquent\\Model",
                    "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
                    "Illuminate\\Database\\Eloquent\\SoftDeletes",
                    "Laravel\\Sanctum\\HasApiTokens",
                    "Spatie\\Activitylog\\LogOptions",
                    "Spatie\\Activitylog\\Traits\\LogsActivity",
                    "Spatie\\Permission\\Traits\\HasRoles",
                    "HasApiTokens, HasFactory, HasRoles, SoftDeletes, TableRecordObserver, LogsActivity"
                ],
                "properties": [
                    "fillable",
                    "casts",
                    "logAttributes",
                    "logOnlyDirty"
                ],
                "property_count": 4
            },
            "methods": [
                {
                    "name": "claim",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "BelongsTo",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function claim(): BelongsTo"
                },
                {
                    "name": "markAsSubmitted",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "$documentPath",
                            "default": "null",
                            "has_default": true
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "void",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function markAsSubmitted(?string $documentPath = null): void"
                },
                {
                    "name": "markAsNotSubmitted",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "void",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function markAsNotSubmitted(): void"
                },
                {
                    "name": "getActivitylogOptions",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "LogOptions",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getActivitylogOptions(): LogOptions"
                },
                {
                    "name": "getSubmittedDateFormattedAttribute",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "?string",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getSubmittedDateFormattedAttribute(): ?string"
                },
                {
                    "name": "getStatusBadgeClass",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "string",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getStatusBadgeClass(): string"
                },
                {
                    "name": "getStatusText",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "string",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getStatusText(): string"
                },
                {
                    "name": "hasFile",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "bool",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function hasFile(): bool"
                },
                {
                    "name": "getDocumentUrl",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "?string",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getDocumentUrl(): ?string"
                }
            ],
            "method_count": 9
        },
        {
            "file_path": "app/Models/ClaimLiabilityDetail.php",
            "class_info": {
                "class_name": "ClaimLiabilityDetail",
                "extends": "Model",
                "implements": [],
                "uses": [
                    "App\\Traits\\TableRecordObserver",
                    "Illuminate\\Database\\Eloquent\\Factories\\HasFactory",
                    "Illuminate\\Database\\Eloquent\\Model",
                    "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
                    "Illuminate\\Database\\Eloquent\\SoftDeletes",
                    "Laravel\\Sanctum\\HasApiTokens",
                    "Spatie\\Activitylog\\LogOptions",
                    "Spatie\\Activitylog\\Traits\\LogsActivity",
                    "Spatie\\Permission\\Traits\\HasRoles",
                    "HasApiTokens, HasFactory, HasRoles, SoftDeletes, TableRecordObserver, LogsActivity"
                ],
                "properties": [
                    "fillable",
                    "casts",
                    "logAttributes",
                    "logOnlyDirty"
                ],
                "property_count": 4
            },
            "methods": [
                {
                    "name": "claim",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "BelongsTo",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function claim(): BelongsTo"
                },
                {
                    "name": "isCashless",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "bool",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function isCashless(): bool"
                },
                {
                    "name": "isReimbursement",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "bool",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function isReimbursement(): bool"
                },
                {
                    "name": "getFacilityName",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "?string",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getFacilityName(): ?string"
                },
                {
                    "name": "getFacilityAddress",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "?string",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getFacilityAddress(): ?string"
                },
                {
                    "name": "getFormattedEstimatedAmount",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "string",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getFormattedEstimatedAmount(): string"
                },
                {
                    "name": "getFormattedApprovedAmount",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "string",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getFormattedApprovedAmount(): string"
                },
                {
                    "name": "getFormattedFinalAmount",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "string",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getFormattedFinalAmount(): string"
                },
                {
                    "name": "getActivitylogOptions",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "LogOptions",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getActivitylogOptions(): LogOptions"
                }
            ],
            "method_count": 9
        },
        {
            "file_path": "app/Models/ClaimStage.php",
            "class_info": {
                "class_name": "ClaimStage",
                "extends": "Model",
                "implements": [],
                "uses": [
                    "App\\Traits\\TableRecordObserver",
                    "Illuminate\\Database\\Eloquent\\Factories\\HasFactory",
                    "Illuminate\\Database\\Eloquent\\Model",
                    "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
                    "Illuminate\\Database\\Eloquent\\SoftDeletes",
                    "Laravel\\Sanctum\\HasApiTokens",
                    "Spatie\\Activitylog\\LogOptions",
                    "Spatie\\Activitylog\\Traits\\LogsActivity",
                    "Spatie\\Permission\\Traits\\HasRoles",
                    "HasApiTokens, HasFactory, HasRoles, SoftDeletes, TableRecordObserver, LogsActivity"
                ],
                "properties": [
                    "fillable",
                    "casts",
                    "logAttributes",
                    "logOnlyDirty"
                ],
                "property_count": 4
            },
            "methods": [
                {
                    "name": "claim",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "BelongsTo",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function claim(): BelongsTo"
                },
                {
                    "name": "setAsCurrent",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "void",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function setAsCurrent(): void"
                },
                {
                    "name": "getActivitylogOptions",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "LogOptions",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getActivitylogOptions(): LogOptions"
                },
                {
                    "name": "getStageDateFormattedAttribute",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "?string",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getStageDateFormattedAttribute(): ?string"
                },
                {
                    "name": "setStageDateAttribute",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$value",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "void",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function setStageDateAttribute($value): void"
                }
            ],
            "method_count": 5
        },
        {
            "file_path": "app/Models/CommissionType.php",
            "class_info": {
                "class_name": "CommissionType",
                "extends": "Model",
                "implements": [],
                "uses": [
                    "Illuminate\\Database\\Eloquent\\Factories\\HasFactory",
                    "Illuminate\\Database\\Eloquent\\Model",
                    "Illuminate\\Database\\Eloquent\\SoftDeletes",
                    "HasFactory, SoftDeletes",
                    "this commission type\r\n     */\r\n    public function customerInsurances()\r\n    {\r\n        return $this->hasMany(CustomerInsurance::class, 'commission_type_id')"
                ],
                "properties": [
                    "table",
                    "fillable",
                    "casts"
                ],
                "property_count": 3
            },
            "methods": [
                {
                    "name": "customerInsurances",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function customerInsurances()"
                },
                {
                    "name": "scopeActive",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$query",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function scopeActive($query)"
                },
                {
                    "name": "scopeOrdered",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$query",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function scopeOrdered($query)"
                }
            ],
            "method_count": 3
        },
        {
            "file_path": "app/Models/Customer.php",
            "class_info": {
                "class_name": "Customer",
                "extends": "Authenticatable",
                "implements": [],
                "uses": [
                    "App\\Models\\CustomerInsurance",
                    "App\\Models\\Quotation",
                    "App\\Models\\Claim",
                    "Laravel\\Sanctum\\HasApiTokens",
                    "Spatie\\Activitylog\\LogOptions",
                    "Spatie\\Permission\\Traits\\HasRoles",
                    "Illuminate\\Database\\Eloquent\\Casts\\Attribute",
                    "Illuminate\\Notifications\\Notifiable",
                    "Spatie\\Activitylog\\Traits\\LogsActivity",
                    "Illuminate\\Database\\Eloquent\\SoftDeletes",
                    "Illuminate\\Database\\Eloquent\\Relations\\HasMany",
                    "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
                    "Illuminate\\Database\\Eloquent\\Relations\\HasOne",
                    "Illuminate\\Database\\Eloquent\\Factories\\HasFactory",
                    "Illuminate\\Foundation\\Auth\\User as Authenticatable",
                    "Illuminate\\Support\\Facades\\Auth",
                    "Illuminate\\Support\\Facades\\Hash",
                    "Illuminate\\Support\\Str",
                    "HasApiTokens, HasFactory, Notifiable, HasRoles, SoftDeletes, LogsActivity",
                    "($familyGroupId) {\r\n                $query->where('family_group_id', '=', $familyGroupId)",
                    "($familyGroupId) {\r\n                $query->where('family_group_id', '=', $familyGroupId)"
                ],
                "properties": [
                    "logAttributes",
                    "logOnlyDirty",
                    "fillable",
                    "casts",
                    "hidden"
                ],
                "property_count": 5
            },
            "methods": [
                {
                    "name": "boot",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function boot()"
                },
                {
                    "name": "insurance",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "HasMany",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function insurance(): HasMany"
                },
                {
                    "name": "quotations",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "HasMany",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function quotations(): HasMany"
                },
                {
                    "name": "claims",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "HasMany",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function claims(): HasMany"
                },
                {
                    "name": "familyGroup",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "BelongsTo",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function familyGroup(): BelongsTo"
                },
                {
                    "name": "customerType",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "BelongsTo",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function customerType(): BelongsTo"
                },
                {
                    "name": "familyMember",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "HasOne",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function familyMember(): HasOne"
                },
                {
                    "name": "familyMembers",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "HasMany",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function familyMembers(): HasMany"
                },
                {
                    "name": "familyInsurance",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "HasMany",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function familyInsurance(): HasMany"
                },
                {
                    "name": "hasFamily",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "bool",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function hasFamily(): bool"
                },
                {
                    "name": "isFamilyHead",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "bool",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function isFamilyHead(): bool"
                },
                {
                    "name": "getViewableInsurance",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function getViewableInsurance()"
                },
                {
                    "name": "isInSameFamilyAs",
                    "parameters": [
                        {
                            "type": "Customer",
                            "name": "$customer",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "bool",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function isInSameFamilyAs(Customer $customer): bool"
                },
                {
                    "name": "getPrivacySafeData",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "array",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getPrivacySafeData(): array"
                },
                {
                    "name": "maskEmail",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "$email",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "?string",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function maskEmail(?string $email): ?string"
                },
                {
                    "name": "maskMobile",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "$mobile",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "?string",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function maskMobile(?string $mobile): ?string"
                },
                {
                    "name": "canViewSensitiveDataOf",
                    "parameters": [
                        {
                            "type": "Customer",
                            "name": "$customer",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "bool",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function canViewSensitiveDataOf(Customer $customer): bool"
                },
                {
                    "name": "auditLogs",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "HasMany",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function auditLogs(): HasMany"
                },
                {
                    "name": "getActivitylogOptions",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "LogOptions",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getActivitylogOptions(): LogOptions"
                },
                {
                    "name": "isActive",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "bool",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function isActive(): bool"
                },
                {
                    "name": "isRetailCustomer",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "bool",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function isRetailCustomer(): bool"
                },
                {
                    "name": "isCorporateCustomer",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "bool",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function isCorporateCustomer(): bool"
                },
                {
                    "name": "panCardPath",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "Attribute",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function panCardPath(): Attribute"
                },
                {
                    "name": "aadharCardPath",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "Attribute",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function aadharCardPath(): Attribute"
                },
                {
                    "name": "gstPath",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "Attribute",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function gstPath(): Attribute"
                },
                {
                    "name": "generateDefaultPassword",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "string",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function generateDefaultPassword(): string"
                },
                {
                    "name": "setDefaultPassword",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "$password",
                            "default": "null",
                            "has_default": true
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "string",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function setDefaultPassword(?string $password = null): string"
                },
                {
                    "name": "setCustomPassword",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "$plainPassword",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "bool",
                            "name": "$forceChange",
                            "default": "true",
                            "has_default": true
                        }
                    ],
                    "parameter_count": 2,
                    "return_type": "string",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function setCustomPassword(string $plainPassword, bool $forceChange = true): string"
                },
                {
                    "name": "changePassword",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "$newPassword",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "void",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function changePassword(string $newPassword): void"
                },
                {
                    "name": "needsPasswordChange",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "bool",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function needsPasswordChange(): bool"
                },
                {
                    "name": "hasVerifiedEmail",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "bool",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function hasVerifiedEmail(): bool"
                },
                {
                    "name": "generateEmailVerificationToken",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "string",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function generateEmailVerificationToken(): string"
                },
                {
                    "name": "verifyEmail",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "$token",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "bool",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function verifyEmail(string $token): bool"
                },
                {
                    "name": "generatePasswordResetToken",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "string",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function generatePasswordResetToken(): string"
                },
                {
                    "name": "verifyPasswordResetToken",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "$token",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "bool",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function verifyPasswordResetToken(string $token): bool"
                },
                {
                    "name": "clearPasswordResetToken",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "void",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function clearPasswordResetToken(): void"
                },
                {
                    "name": "getMaskedPanNumber",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "?string",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getMaskedPanNumber(): ?string"
                },
                {
                    "name": "validateFamilyGroupId",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$familyGroupId",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function validateFamilyGroupId($familyGroupId)"
                },
                {
                    "name": "getDateOfBirthFormattedAttribute",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function getDateOfBirthFormattedAttribute()"
                },
                {
                    "name": "setDateOfBirthAttribute",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$value",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function setDateOfBirthAttribute($value)"
                },
                {
                    "name": "getWeddingAnniversaryDateFormattedAttribute",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function getWeddingAnniversaryDateFormattedAttribute()"
                },
                {
                    "name": "setWeddingAnniversaryDateAttribute",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$value",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function setWeddingAnniversaryDateAttribute($value)"
                },
                {
                    "name": "getEngagementAnniversaryDateFormattedAttribute",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function getEngagementAnniversaryDateFormattedAttribute()"
                },
                {
                    "name": "setEngagementAnniversaryDateAttribute",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$value",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function setEngagementAnniversaryDateAttribute($value)"
                }
            ],
            "method_count": 44
        },
        {
            "file_path": "app/Models/CustomerAuditLog.php",
            "class_info": {
                "class_name": "CustomerAuditLog",
                "extends": "Model",
                "implements": [],
                "uses": [
                    "Illuminate\\Database\\Eloquent\\Factories\\HasFactory",
                    "Illuminate\\Database\\Eloquent\\Model",
                    "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
                    "HasFactory"
                ],
                "properties": [
                    "fillable",
                    "casts"
                ],
                "property_count": 2
            },
            "methods": [
                {
                    "name": "customer",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "BelongsTo",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function customer(): BelongsTo"
                },
                {
                    "name": "logAction",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "$action",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "string",
                            "name": "$description",
                            "default": "null",
                            "has_default": true
                        },
                        {
                            "type": "array",
                            "name": "$metadata",
                            "default": "[]",
                            "has_default": true
                        }
                    ],
                    "parameter_count": 3,
                    "return_type": "void",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function logAction(string $action, ?string $description = null, array $metadata = []): void"
                },
                {
                    "name": "logPolicyAction",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "$action",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "CustomerInsurance",
                            "name": "$policy",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "string",
                            "name": "$description",
                            "default": "null",
                            "has_default": true
                        },
                        {
                            "type": "array",
                            "name": "$metadata",
                            "default": "[]",
                            "has_default": true
                        }
                    ],
                    "parameter_count": 4,
                    "return_type": "void",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function logPolicyAction(string $action, CustomerInsurance $policy, ?string $description = null, array $metadata = []): void"
                },
                {
                    "name": "logFailure",
                    "parameters": [
                        {
                            "type": "string",
                            "name": "$action",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "string",
                            "name": "$reason",
                            "default": null,
                            "has_default": false
                        },
                        {
                            "type": "array",
                            "name": "$metadata",
                            "default": "[]",
                            "has_default": true
                        }
                    ],
                    "parameter_count": 3,
                    "return_type": "void",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function logFailure(string $action, string $reason, array $metadata = []): void"
                }
            ],
            "method_count": 4
        },
        {
            "file_path": "app/Models/CustomerInsurance.php",
            "class_info": {
                "class_name": "CustomerInsurance",
                "extends": "Model",
                "implements": [],
                "uses": [
                    "App\\Models\\Branch",
                    "App\\Models\\Broker",
                    "App\\Models\\Customer",
                    "App\\Models\\Claim",
                    "App\\Models\\FuelType",
                    "App\\Models\\PolicyType",
                    "App\\Models\\PremiumType",
                    "App\\Models\\InsuranceCompany",
                    "Spatie\\Activitylog\\LogOptions",
                    "App\\Models\\RelationshipManager",
                    "App\\Traits\\TableRecordObserver",
                    "Spatie\\Activitylog\\Traits\\LogsActivity",
                    "Illuminate\\Database\\Eloquent\\SoftDeletes",
                    "Illuminate\\Database\\Eloquent\\Factories\\HasFactory",
                    "Illuminate\\Database\\Eloquent\\Model",
                    "HasFactory, SoftDeletes, TableRecordObserver, LogsActivity"
                ],
                "properties": [
                    "guarded",
                    "logAttributes",
                    "logOnlyDirty"
                ],
                "property_count": 3
            },
            "methods": [
                {
                    "name": "claims",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function claims()"
                },
                {
                    "name": "getActivitylogOptions",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "LogOptions",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getActivitylogOptions(): LogOptions"
                },
                {
                    "name": "getIssueDateFormattedAttribute",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function getIssueDateFormattedAttribute()"
                },
                {
                    "name": "setIssueDateAttribute",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$value",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function setIssueDateAttribute($value)"
                },
                {
                    "name": "getStartDateFormattedAttribute",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function getStartDateFormattedAttribute()"
                },
                {
                    "name": "setStartDateAttribute",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$value",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function setStartDateAttribute($value)"
                },
                {
                    "name": "getExpiredDateFormattedAttribute",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function getExpiredDateFormattedAttribute()"
                },
                {
                    "name": "setExpiredDateAttribute",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$value",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function setExpiredDateAttribute($value)"
                },
                {
                    "name": "getTpExpiryDateFormattedAttribute",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function getTpExpiryDateFormattedAttribute()"
                },
                {
                    "name": "setTpExpiryDateAttribute",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$value",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function setTpExpiryDateAttribute($value)"
                },
                {
                    "name": "getMaturityDateFormattedAttribute",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function getMaturityDateFormattedAttribute()"
                },
                {
                    "name": "setMaturityDateAttribute",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$value",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function setMaturityDateAttribute($value)"
                }
            ],
            "method_count": 12
        },
        {
            "file_path": "app/Models/CustomerType.php",
            "class_info": {
                "class_name": "CustomerType",
                "extends": "Model",
                "implements": [],
                "uses": [
                    "Illuminate\\Database\\Eloquent\\Factories\\HasFactory",
                    "Illuminate\\Database\\Eloquent\\Model",
                    "Illuminate\\Database\\Eloquent\\SoftDeletes",
                    "HasFactory, SoftDeletes"
                ],
                "properties": [
                    "table",
                    "fillable",
                    "casts"
                ],
                "property_count": 3
            },
            "methods": [
                {
                    "name": "customers",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function customers()"
                },
                {
                    "name": "scopeActive",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$query",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function scopeActive($query)"
                },
                {
                    "name": "scopeOrdered",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$query",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function scopeOrdered($query)"
                }
            ],
            "method_count": 3
        },
        {
            "file_path": "app/Models/FamilyGroup.php",
            "class_info": {
                "class_name": "FamilyGroup",
                "extends": "Model",
                "implements": [],
                "uses": [
                    "Spatie\\Activitylog\\LogOptions",
                    "Spatie\\Activitylog\\Traits\\LogsActivity",
                    "Illuminate\\Database\\Eloquent\\Factories\\HasFactory",
                    "Illuminate\\Database\\Eloquent\\Model",
                    "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
                    "Illuminate\\Database\\Eloquent\\Relations\\HasMany",
                    "HasFactory, LogsActivity"
                ],
                "properties": [
                    "logAttributes",
                    "logOnlyDirty",
                    "fillable",
                    "casts"
                ],
                "property_count": 4
            },
            "methods": [
                {
                    "name": "familyHead",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "BelongsTo",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function familyHead(): BelongsTo"
                },
                {
                    "name": "familyMembers",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "HasMany",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function familyMembers(): HasMany"
                },
                {
                    "name": "members",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "HasMany",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function members(): HasMany"
                },
                {
                    "name": "customers",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "HasMany",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function customers(): HasMany"
                },
                {
                    "name": "isActive",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "bool",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function isActive(): bool"
                },
                {
                    "name": "getActivitylogOptions",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "LogOptions",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getActivitylogOptions(): LogOptions"
                }
            ],
            "method_count": 6
        },
        {
            "file_path": "app/Models/FamilyMember.php",
            "class_info": {
                "class_name": "FamilyMember",
                "extends": "Model",
                "implements": [],
                "uses": [
                    "Spatie\\Activitylog\\LogOptions",
                    "Spatie\\Activitylog\\Traits\\LogsActivity",
                    "Illuminate\\Database\\Eloquent\\Factories\\HasFactory",
                    "Illuminate\\Database\\Eloquent\\Model",
                    "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
                    "HasFactory, LogsActivity"
                ],
                "properties": [
                    "logAttributes",
                    "logOnlyDirty",
                    "fillable",
                    "casts"
                ],
                "property_count": 4
            },
            "methods": [
                {
                    "name": "familyGroup",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "BelongsTo",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function familyGroup(): BelongsTo"
                },
                {
                    "name": "customer",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "BelongsTo",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function customer(): BelongsTo"
                },
                {
                    "name": "isFamilyHead",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "bool",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function isFamilyHead(): bool"
                },
                {
                    "name": "isActive",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "bool",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function isActive(): bool"
                },
                {
                    "name": "getActivitylogOptions",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "LogOptions",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getActivitylogOptions(): LogOptions"
                }
            ],
            "method_count": 5
        },
        {
            "file_path": "app/Models/FuelType.php",
            "class_info": {
                "class_name": "FuelType",
                "extends": "Authenticatable",
                "implements": [],
                "uses": [
                    "App\\Models\\CustomerInsurance",
                    "Spatie\\Activitylog\\LogOptions",
                    "App\\Traits\\TableRecordObserver",
                    "Spatie\\Permission\\Traits\\HasRoles",
                    "Illuminate\\Notifications\\Notifiable",
                    "Spatie\\Activitylog\\Traits\\LogsActivity",
                    "Illuminate\\Database\\Eloquent\\SoftDeletes",
                    "Illuminate\\Database\\Eloquent\\Factories\\HasFactory",
                    "Illuminate\\Foundation\\Auth\\User as Authenticatable",
                    "HasFactory, Notifiable, HasRoles, SoftDeletes, TableRecordObserver, LogsActivity"
                ],
                "properties": [
                    "logAttributes",
                    "logOnlyDirty",
                    "fillable"
                ],
                "property_count": 3
            },
            "methods": [
                {
                    "name": "customerInsurances",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function customerInsurances()"
                },
                {
                    "name": "getActivitylogOptions",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "LogOptions",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getActivitylogOptions(): LogOptions"
                }
            ],
            "method_count": 2
        },
        {
            "file_path": "app/Models/InsuranceCompany.php",
            "class_info": {
                "class_name": "InsuranceCompany",
                "extends": "Authenticatable",
                "implements": [],
                "uses": [
                    "App\\Models\\CustomerInsurance",
                    "Laravel\\Sanctum\\HasApiTokens",
                    "Spatie\\Activitylog\\LogOptions",
                    "App\\Traits\\TableRecordObserver",
                    "Spatie\\Permission\\Traits\\HasRoles",
                    "Illuminate\\Notifications\\Notifiable",
                    "Spatie\\Activitylog\\Traits\\LogsActivity",
                    "Illuminate\\Database\\Eloquent\\SoftDeletes",
                    "Illuminate\\Database\\Eloquent\\Factories\\HasFactory",
                    "Illuminate\\Foundation\\Auth\\User as Authenticatable",
                    "HasApiTokens, HasFactory, Notifiable, HasRoles, SoftDeletes, TableRecordObserver, LogsActivity"
                ],
                "properties": [
                    "logAttributes",
                    "logOnlyDirty",
                    "fillable"
                ],
                "property_count": 3
            },
            "methods": [
                {
                    "name": "customerInsurances",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function customerInsurances()"
                },
                {
                    "name": "getActivitylogOptions",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "LogOptions",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getActivitylogOptions(): LogOptions"
                }
            ],
            "method_count": 2
        },
        {
            "file_path": "app/Models/PolicyType.php",
            "class_info": {
                "class_name": "PolicyType",
                "extends": "Authenticatable",
                "implements": [],
                "uses": [
                    "App\\Models\\CustomerInsurance",
                    "Spatie\\Activitylog\\LogOptions",
                    "App\\Traits\\TableRecordObserver",
                    "Spatie\\Permission\\Traits\\HasRoles",
                    "Illuminate\\Notifications\\Notifiable",
                    "Spatie\\Activitylog\\Traits\\LogsActivity",
                    "Illuminate\\Database\\Eloquent\\SoftDeletes",
                    "Illuminate\\Database\\Eloquent\\Factories\\HasFactory",
                    "Illuminate\\Foundation\\Auth\\User as Authenticatable",
                    "HasFactory, Notifiable, HasRoles, SoftDeletes, TableRecordObserver, LogsActivity"
                ],
                "properties": [
                    "logAttributes",
                    "logOnlyDirty",
                    "fillable"
                ],
                "property_count": 3
            },
            "methods": [
                {
                    "name": "customerInsurances",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function customerInsurances()"
                },
                {
                    "name": "getActivitylogOptions",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "LogOptions",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getActivitylogOptions(): LogOptions"
                }
            ],
            "method_count": 2
        },
        {
            "file_path": "app/Models/PremiumType.php",
            "class_info": {
                "class_name": "PremiumType",
                "extends": "Authenticatable",
                "implements": [],
                "uses": [
                    "App\\Models\\CustomerInsurance",
                    "Spatie\\Activitylog\\LogOptions",
                    "App\\Traits\\TableRecordObserver",
                    "Spatie\\Permission\\Traits\\HasRoles",
                    "Illuminate\\Notifications\\Notifiable",
                    "Spatie\\Activitylog\\Traits\\LogsActivity",
                    "Illuminate\\Database\\Eloquent\\SoftDeletes",
                    "Illuminate\\Database\\Eloquent\\Factories\\HasFactory",
                    "Illuminate\\Foundation\\Auth\\User as Authenticatable",
                    "HasFactory, Notifiable, HasRoles, SoftDeletes, TableRecordObserver, LogsActivity"
                ],
                "properties": [
                    "logAttributes",
                    "logOnlyDirty",
                    "fillable"
                ],
                "property_count": 3
            },
            "methods": [
                {
                    "name": "customerInsurances",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function customerInsurances()"
                },
                {
                    "name": "getActivitylogOptions",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "LogOptions",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getActivitylogOptions(): LogOptions"
                }
            ],
            "method_count": 2
        },
        {
            "file_path": "app/Models/Quotation.php",
            "class_info": {
                "class_name": "Quotation",
                "extends": "Model",
                "implements": [],
                "uses": [
                    "App\\Traits\\TableRecordObserver",
                    "Illuminate\\Database\\Eloquent\\Factories\\HasFactory",
                    "Illuminate\\Database\\Eloquent\\Model",
                    "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
                    "Illuminate\\Database\\Eloquent\\Relations\\HasMany",
                    "Spatie\\Activitylog\\LogOptions",
                    "Spatie\\Activitylog\\Traits\\LogsActivity",
                    "HasFactory, TableRecordObserver, LogsActivity"
                ],
                "properties": [
                    "fillable",
                    "casts",
                    "logAttributes",
                    "logOnlyDirty"
                ],
                "property_count": 4
            },
            "methods": [
                {
                    "name": "boot",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "void",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function boot(): void"
                },
                {
                    "name": "customer",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "BelongsTo",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function customer(): BelongsTo"
                },
                {
                    "name": "quotationCompanies",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "HasMany",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function quotationCompanies(): HasMany"
                },
                {
                    "name": "quotationStatus",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "BelongsTo",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function quotationStatus(): BelongsTo"
                },
                {
                    "name": "recommendedQuote",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "?QuotationCompany",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function recommendedQuote(): ?QuotationCompany"
                },
                {
                    "name": "bestQuote",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "?QuotationCompany",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function bestQuote(): ?QuotationCompany"
                },
                {
                    "name": "getActivitylogOptions",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "LogOptions",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getActivitylogOptions(): LogOptions"
                },
                {
                    "name": "isVehicleInsurance",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "bool",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function isVehicleInsurance(): bool"
                },
                {
                    "name": "getQuoteReference",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "string",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getQuoteReference(): string"
                }
            ],
            "method_count": 9
        },
        {
            "file_path": "app/Models/QuotationCompany.php",
            "class_info": {
                "class_name": "QuotationCompany",
                "extends": "Model",
                "implements": [],
                "uses": [
                    "App\\Traits\\TableRecordObserver",
                    "Illuminate\\Database\\Eloquent\\Factories\\HasFactory",
                    "Illuminate\\Database\\Eloquent\\Model",
                    "Illuminate\\Database\\Eloquent\\Relations\\BelongsTo",
                    "Spatie\\Activitylog\\LogOptions",
                    "Spatie\\Activitylog\\Traits\\LogsActivity",
                    "HasFactory, TableRecordObserver, LogsActivity"
                ],
                "properties": [
                    "fillable",
                    "casts",
                    "logAttributes",
                    "logOnlyDirty"
                ],
                "property_count": 4
            },
            "methods": [
                {
                    "name": "quotation",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "BelongsTo",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function quotation(): BelongsTo"
                },
                {
                    "name": "insuranceCompany",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "BelongsTo",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function insuranceCompany(): BelongsTo"
                },
                {
                    "name": "getActivitylogOptions",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "LogOptions",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getActivitylogOptions(): LogOptions"
                },
                {
                    "name": "calculateSavings",
                    "parameters": [
                        {
                            "type": "QuotationCompany",
                            "name": "$compareWith",
                            "default": "null",
                            "has_default": true
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "float",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function calculateSavings(?QuotationCompany $compareWith = null): float"
                },
                {
                    "name": "getFormattedPremium",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "string",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getFormattedPremium(): string"
                }
            ],
            "method_count": 5
        },
        {
            "file_path": "app/Models/QuotationStatus.php",
            "class_info": {
                "class_name": "QuotationStatus",
                "extends": "Model",
                "implements": [],
                "uses": [
                    "Illuminate\\Database\\Eloquent\\Factories\\HasFactory",
                    "Illuminate\\Database\\Eloquent\\Model",
                    "Illuminate\\Database\\Eloquent\\SoftDeletes",
                    "HasFactory, SoftDeletes"
                ],
                "properties": [
                    "table",
                    "fillable",
                    "casts"
                ],
                "property_count": 3
            },
            "methods": [
                {
                    "name": "quotations",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function quotations()"
                },
                {
                    "name": "scopeActive",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$query",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function scopeActive($query)"
                },
                {
                    "name": "scopeFinal",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$query",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function scopeFinal($query)"
                },
                {
                    "name": "scopeNonFinal",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$query",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function scopeNonFinal($query)"
                },
                {
                    "name": "scopeOrdered",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$query",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function scopeOrdered($query)"
                },
                {
                    "name": "getColorAttribute",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$value",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function getColorAttribute($value)"
                }
            ],
            "method_count": 6
        },
        {
            "file_path": "app/Models/ReferenceUser.php",
            "class_info": {
                "class_name": "ReferenceUser",
                "extends": "Authenticatable",
                "implements": [],
                "uses": [
                    "App\\Models\\CustomerInsurance",
                    "Spatie\\Activitylog\\LogOptions",
                    "App\\Traits\\TableRecordObserver",
                    "Spatie\\Permission\\Traits\\HasRoles",
                    "Illuminate\\Notifications\\Notifiable",
                    "Spatie\\Activitylog\\Traits\\LogsActivity",
                    "Illuminate\\Database\\Eloquent\\SoftDeletes",
                    "Illuminate\\Database\\Eloquent\\Factories\\HasFactory",
                    "Illuminate\\Foundation\\Auth\\User as Authenticatable",
                    "HasFactory, Notifiable, HasRoles, SoftDeletes, TableRecordObserver, LogsActivity"
                ],
                "properties": [
                    "logAttributes",
                    "logOnlyDirty",
                    "fillable"
                ],
                "property_count": 3
            },
            "methods": [
                {
                    "name": "customerInsurances",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function customerInsurances()"
                },
                {
                    "name": "getActivitylogOptions",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "LogOptions",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getActivitylogOptions(): LogOptions"
                }
            ],
            "method_count": 2
        },
        {
            "file_path": "app/Models/RelationshipManager.php",
            "class_info": {
                "class_name": "RelationshipManager",
                "extends": "Authenticatable",
                "implements": [],
                "uses": [
                    "App\\Models\\CustomerInsurance",
                    "Laravel\\Sanctum\\HasApiTokens",
                    "Spatie\\Activitylog\\LogOptions",
                    "App\\Traits\\TableRecordObserver",
                    "Spatie\\Permission\\Traits\\HasRoles",
                    "Illuminate\\Notifications\\Notifiable",
                    "Spatie\\Activitylog\\Traits\\LogsActivity",
                    "Illuminate\\Database\\Eloquent\\SoftDeletes",
                    "Illuminate\\Database\\Eloquent\\Factories\\HasFactory",
                    "Illuminate\\Foundation\\Auth\\User as Authenticatable",
                    "HasApiTokens, HasFactory, Notifiable, HasRoles, SoftDeletes, TableRecordObserver, LogsActivity"
                ],
                "properties": [
                    "logAttributes",
                    "logOnlyDirty",
                    "fillable"
                ],
                "property_count": 3
            },
            "methods": [
                {
                    "name": "customerInsurances",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function customerInsurances()"
                },
                {
                    "name": "getActivitylogOptions",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "LogOptions",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getActivitylogOptions(): LogOptions"
                }
            ],
            "method_count": 2
        },
        {
            "file_path": "app/Models/Report.php",
            "class_info": {
                "class_name": "Report",
                "extends": "Authenticatable",
                "implements": [],
                "uses": [
                    "App\\Models\\CustomerInsurance",
                    "App\\Traits\\TableRecordObserver",
                    "Illuminate\\Database\\Eloquent\\SoftDeletes",
                    "Illuminate\\Foundation\\Auth\\User as Authenticatable",
                    "Illuminate\\Support\\Carbon",
                    "Spatie\\Activitylog\\LogOptions",
                    "Spatie\\Activitylog\\Traits\\LogsActivity",
                    "Spatie\\Permission\\Traits\\HasRoles",
                    "HasRoles, SoftDeletes, TableRecordObserver, LogsActivity",
                    "($filters) {\r\n                $startDate = \\App\\Helpers\\DateHelper::isValidDatabaseFormat($filters['record_creation_start_date']) \r\n                    ? $filters['record_creation_start_date'] \r\n                    : formatDateForDatabase($filters['record_creation_start_date'])",
                    "($filters) {\r\n                $endDate = \\App\\Helpers\\DateHelper::isValidDatabaseFormat($filters['record_creation_end_date']) \r\n                    ? $filters['record_creation_end_date'] \r\n                    : formatDateForDatabase($filters['record_creation_end_date'])",
                    "($filters) {\r\n                try {\r\n                    $startDate = Carbon::createFromFormat('d/m/Y', $filters['issue_start_date'])->format('Y-m-d')",
                    "($filters) {\r\n                try {\r\n                    $endDate = Carbon::createFromFormat('d/m/Y', $filters['issue_end_date'])->format('Y-m-d')",
                    "($filters) {\r\n                return $query->whereHas('broker', function ($query) use ($filters) {\r\n                    $query->where('id', $filters['broker_id'])",
                    "($filters) {\r\n                return $query->whereHas('relationshipManager', function ($query) use ($filters) {\r\n                    $query->where('id', $filters['relationship_manager_id'])",
                    "($filters) {\r\n                return $query->whereHas('insuranceCompany', function ($query) use ($filters) {\r\n                    $query->where('id', $filters['insurance_company_id'])",
                    "($filters) {\r\n                return $query->whereHas('policyType', function ($query) use ($filters) {\r\n                    $query->where('id', $filters['policy_type_id'])",
                    "($filters) {\r\n                return $query->whereHas('fuelType', function ($query) use ($filters) {\r\n                    $query->where('id', $filters['fuel_type_id'])",
                    "($filters) {\r\n                return $query->whereHas('premiumType', function ($query) use ($filters) {\r\n                    if (is_array($filters['premium_type_id'])) {\r\n                        $query->whereIn('id', $filters['premium_type_id'])",
                    "($filters) {\r\n                return $query->whereHas('customer', function ($query) use ($filters) {\r\n                    $query->where('id', $filters['customer_id'])",
                    "($filters) {\r\n                // Due dates can be in m/Y or mm/Y format, handle both\r\n                try {\r\n                    $dateStr = $filters['due_start_date']",
                    "($filters) {\r\n                // Due dates can be in m/Y or mm/Y format, handle both\r\n                try {\r\n                    $dateStr = $filters['due_end_date']",
                    "($filters) {\r\n                if ($filters['status'] === 'active') {\r\n                    return $query->where('status', 1)",
                    "($filters) {\r\n                return $query->where('final_premium_with_gst', '>=', $filters['premium_amount_min'])",
                    "($filters) {\r\n                return $query->where('final_premium_with_gst', '<=', $filters['premium_amount_max'])"
                ],
                "properties": [
                    "guarded",
                    "logName",
                    "logAttributes",
                    "logOnlyDirty",
                    "casts"
                ],
                "property_count": 5
            },
            "methods": [
                {
                    "name": "getInsuranceReport",
                    "parameters": [
                        {
                            "type": "",
                            "name": "$filters",
                            "default": null,
                            "has_default": false
                        }
                    ],
                    "parameter_count": 1,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function getInsuranceReport($filters)"
                }
            ],
            "method_count": 1
        },
        {
            "file_path": "app/Models/User.php",
            "class_info": {
                "class_name": "User",
                "extends": "Authenticatable",
                "implements": [],
                "uses": [
                    "Laravel\\Sanctum\\HasApiTokens",
                    "Spatie\\Activitylog\\LogOptions",
                    "App\\Traits\\TableRecordObserver",
                    "Spatie\\Permission\\Traits\\HasRoles",
                    "Illuminate\\Notifications\\Notifiable",
                    "Spatie\\Activitylog\\Traits\\LogsActivity",
                    "Illuminate\\Database\\Eloquent\\SoftDeletes",
                    "Illuminate\\Database\\Eloquent\\Factories\\HasFactory",
                    "Illuminate\\Foundation\\Auth\\User as Authenticatable",
                    "HasApiTokens, HasFactory, Notifiable, HasRoles, SoftDeletes, TableRecordObserver, LogsActivity"
                ],
                "properties": [
                    "fillable",
                    "hidden",
                    "casts",
                    "logName",
                    "logAttributes",
                    "logOnlyDirty"
                ],
                "property_count": 6
            },
            "methods": [
                {
                    "name": "getFullNameAttribute",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function getFullNameAttribute()"
                },
                {
                    "name": "getActivitylogOptions",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "LogOptions",
                    "has_return_type": true,
                    "docblock": "",
                    "signature": "function getActivitylogOptions(): LogOptions"
                },
                {
                    "name": "reports",
                    "parameters": [],
                    "parameter_count": 0,
                    "return_type": "mixed",
                    "has_return_type": false,
                    "docblock": "",
                    "signature": "function reports()"
                }
            ],
            "method_count": 3
        }
    ],
    "interfaces": [],
    "other_classes": []
}