{
    "metadata": {
        "generated_at": "2025-09-19T15:45:29+02:00",
        "analyzer_version": "2.0.0",
        "analysis_type": "usage_and_relationship_analysis",
        "project_name": "Laravel Insurance Management System"
    },
    "dependency_graph": {
        "repositories": [
            {
                "class": "AbstractBaseRepository",
                "file_path": "app/Repositories/AbstractBaseRepository.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "BaseRepositoryInterface": "App\\Contracts\\Repositories\\BaseRepositoryInterface",
                        "Model": "Illuminate\\Database\\Eloquent\\Model",
                        "Request": "Illuminate\\Http\\Request",
                        "LengthAwarePaginator": "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Collection": "Illuminate\\Database\\Eloquent\\Collection",
                        "($search) {\r\n                foreach ($this->searchableFields as $field) {\r\n                    $q->orWhere($field, 'LIKE', '%' . $search . '%')": "($search) {\r\n                foreach ($this->searchableFields as $field) {\r\n                    $q->orWhere($field, 'LIKE', '%' . $search . '%')"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "AddonCoverRepository",
                "file_path": "app/Repositories/AddonCoverRepository.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "AddonCoverRepositoryInterface": "App\\Contracts\\Repositories\\AddonCoverRepositoryInterface",
                        "AddonCover": "App\\Models\\AddonCover"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "BranchRepository",
                "file_path": "app/Repositories/BranchRepository.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "BranchRepositoryInterface": "App\\Contracts\\Repositories\\BranchRepositoryInterface",
                        "Branch": "App\\Models\\Branch",
                        "Collection": "Illuminate\\Database\\Eloquent\\Collection",
                        "Request": "Illuminate\\Http\\Request",
                        "LengthAwarePaginator": "Illuminate\\Pagination\\LengthAwarePaginator",
                        "($search) {\r\n                $q->where('name', 'like', \"%{$search}%\")\r\n                  ->orWhere('email', 'like', \"%{$search}%\")\r\n                  ->orWhere('mobile_number', 'like', \"%{$search}%\")": "($search) {\r\n                $q->where('name', 'like', \"%{$search}%\")\r\n                  ->orWhere('email', 'like', \"%{$search}%\")\r\n                  ->orWhere('mobile_number', 'like', \"%{$search}%\")",
                        "($searchTerm) {\r\n                $query->where('name', 'like', \"%{$searchTerm}%\")\r\n                      ->orWhere('email', 'like', \"%{$searchTerm}%\")": "($searchTerm) {\r\n                $query->where('name', 'like', \"%{$searchTerm}%\")\r\n                      ->orWhere('email', 'like', \"%{$searchTerm}%\")"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "BrokerRepository",
                "file_path": "app/Repositories/BrokerRepository.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "BrokerRepositoryInterface": "App\\Contracts\\Repositories\\BrokerRepositoryInterface",
                        "Broker": "App\\Models\\Broker"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "ClaimRepository",
                "file_path": "app/Repositories/ClaimRepository.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "ClaimRepositoryInterface": "App\\Contracts\\Repositories\\ClaimRepositoryInterface",
                        "Claim": "App\\Models\\Claim",
                        "Builder": "Illuminate\\Database\\Eloquent\\Builder",
                        "Collection": "Illuminate\\Database\\Eloquent\\Collection",
                        "Request": "Illuminate\\Http\\Request",
                        "LengthAwarePaginator": "Illuminate\\Pagination\\LengthAwarePaginator",
                        "($search) {\r\n                $q->where('claim_number', 'like', \"%{$search}%\")\r\n                  ->orWhere('description', 'like', \"%{$search}%\")\r\n                  ->orWhereHas('customer', function (Builder $customerQuery) use ($search) {\r\n                      $customerQuery->where('name', 'like', \"%{$search}%\")\r\n                                   ->orWhere('email', 'like', \"%{$search}%\")\r\n                                   ->orWhere('mobile_number', 'like', \"%{$search}%\")": "($search) {\r\n                $q->where('claim_number', 'like', \"%{$search}%\")\r\n                  ->orWhere('description', 'like', \"%{$search}%\")\r\n                  ->orWhereHas('customer', function (Builder $customerQuery) use ($search) {\r\n                      $customerQuery->where('name', 'like', \"%{$search}%\")\r\n                                   ->orWhere('email', 'like', \"%{$search}%\")\r\n                                   ->orWhere('mobile_number', 'like', \"%{$search}%\")",
                        "($search) {\r\n                      $insuranceQuery->where('policy_no', 'like', \"%{$search}%\")\r\n                                    ->orWhere('registration_no', 'like', \"%{$search}%\")": "($search) {\r\n                      $insuranceQuery->where('policy_no', 'like', \"%{$search}%\")\r\n                                    ->orWhere('registration_no', 'like', \"%{$search}%\")",
                        "($searchTerm) {\r\n                $query->where('claim_number', 'like', \"%{$searchTerm}%\")\r\n                      ->orWhere('description', 'like', \"%{$searchTerm}%\")\r\n                      ->orWhereHas('customer', function (Builder $customerQuery) use ($searchTerm) {\r\n                          $customerQuery->where('name', 'like', \"%{$searchTerm}%\")\r\n                                       ->orWhere('email', 'like', \"%{$searchTerm}%\")\r\n                                       ->orWhere('mobile_number', 'like', \"%{$searchTerm}%\")": "($searchTerm) {\r\n                $query->where('claim_number', 'like', \"%{$searchTerm}%\")\r\n                      ->orWhere('description', 'like', \"%{$searchTerm}%\")\r\n                      ->orWhereHas('customer', function (Builder $customerQuery) use ($searchTerm) {\r\n                          $customerQuery->where('name', 'like', \"%{$searchTerm}%\")\r\n                                       ->orWhere('email', 'like', \"%{$searchTerm}%\")\r\n                                       ->orWhere('mobile_number', 'like', \"%{$searchTerm}%\")"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "CustomerInsuranceRepository",
                "file_path": "app/Repositories/CustomerInsuranceRepository.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "CustomerInsuranceRepositoryInterface": "App\\Contracts\\Repositories\\CustomerInsuranceRepositoryInterface",
                        "CustomerInsurance": "App\\Models\\CustomerInsurance",
                        "Request": "Illuminate\\Http\\Request",
                        "LengthAwarePaginator": "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Collection": "Illuminate\\Database\\Eloquent\\Collection",
                        "Carbon": "Carbon\\Carbon",
                        "($search) {\r\n                $q->where('customers.name', 'LIKE', '%' . $search . '%')\r\n                  ->orWhere('customer_insurances.policy_no', 'LIKE', '%' . $search . '%')\r\n                  ->orWhere('customer_insurances.registration_no', 'LIKE', '%' . $search . '%')": "($search) {\r\n                $q->where('customers.name', 'LIKE', '%' . $search . '%')\r\n                  ->orWhere('customer_insurances.policy_no', 'LIKE', '%' . $search . '%')\r\n                  ->orWhere('customer_insurances.registration_no', 'LIKE', '%' . $search . '%')"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "CustomerRepository",
                "file_path": "app/Repositories/CustomerRepository.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "CustomerRepositoryInterface": "App\\Contracts\\Repositories\\CustomerRepositoryInterface",
                        "Customer": "App\\Models\\Customer",
                        "LengthAwarePaginator": "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Collection": "Illuminate\\Database\\Eloquent\\Collection",
                        "Request": "Illuminate\\Http\\Request",
                        "($searchTerm) {\r\n                $q->where('name', 'LIKE', $searchTerm)\r\n                  ->orWhere('email', 'LIKE', $searchTerm)\r\n                  ->orWhere('mobile_number', 'LIKE', $searchTerm)": "($searchTerm) {\r\n                $q->where('name', 'LIKE', $searchTerm)\r\n                  ->orWhere('email', 'LIKE', $searchTerm)\r\n                  ->orWhere('mobile_number', 'LIKE', $searchTerm)"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "FamilyGroupRepository",
                "file_path": "app/Repositories/FamilyGroupRepository.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "FamilyGroupRepositoryInterface": "App\\Contracts\\Repositories\\FamilyGroupRepositoryInterface",
                        "FamilyGroup": "App\\Models\\FamilyGroup",
                        "Customer": "App\\Models\\Customer",
                        "FamilyMember": "App\\Models\\FamilyMember",
                        "Collection": "Illuminate\\Database\\Eloquent\\Collection",
                        "Request": "Illuminate\\Http\\Request",
                        "LengthAwarePaginator": "Illuminate\\Pagination\\LengthAwarePaginator",
                        "($search) {\r\n                $q->where('name', 'like', \"%{$search}%\")\r\n                  ->orWhereHas('familyHead', function ($subQ) use ($search) {\r\n                      $subQ->where('name', 'like', \"%{$search}%\")\r\n                           ->orWhere('email', 'like', \"%{$search}%\")": "($search) {\r\n                $q->where('name', 'like', \"%{$search}%\")\r\n                  ->orWhereHas('familyHead', function ($subQ) use ($search) {\r\n                      $subQ->where('name', 'like', \"%{$search}%\")\r\n                           ->orWhere('email', 'like', \"%{$search}%\")",
                        "($customerId) {\r\n                $query->where('customer_id', $customerId)": "($customerId) {\r\n                $query->where('customer_id', $customerId)",
                        "($familyGroupId) {\r\n                $query->whereNull('family_group_id')\r\n                      ->orWhere('family_group_id', $familyGroupId)": "($familyGroupId) {\r\n                $query->whereNull('family_group_id')\r\n                      ->orWhere('family_group_id', $familyGroupId)",
                        "($familyGroupId) {\r\n                $query->where('family_group_id', '!=', $familyGroupId)": "($familyGroupId) {\r\n                $query->where('family_group_id', '!=', $familyGroupId)",
                        "($searchTerm) {\r\n                $query->where('name', 'like', \"%{$searchTerm}%\")\r\n                      ->orWhereHas('familyHead', function ($subQuery) use ($searchTerm) {\r\n                          $subQuery->where('name', 'like', \"%{$searchTerm}%\")\r\n                                   ->orWhere('email', 'like', \"%{$searchTerm}%\")": "($searchTerm) {\r\n                $query->where('name', 'like', \"%{$searchTerm}%\")\r\n                      ->orWhereHas('familyHead', function ($subQuery) use ($searchTerm) {\r\n                          $subQuery->where('name', 'like', \"%{$searchTerm}%\")\r\n                                   ->orWhere('email', 'like', \"%{$searchTerm}%\")"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "FuelTypeRepository",
                "file_path": "app/Repositories/FuelTypeRepository.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "FuelTypeRepositoryInterface": "App\\Contracts\\Repositories\\FuelTypeRepositoryInterface",
                        "FuelType": "App\\Models\\FuelType"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "InsuranceCompanyRepository",
                "file_path": "app/Repositories/InsuranceCompanyRepository.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "InsuranceCompanyRepositoryInterface": "App\\Contracts\\Repositories\\InsuranceCompanyRepositoryInterface",
                        "InsuranceCompany": "App\\Models\\InsuranceCompany"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "MarketingWhatsAppRepository",
                "file_path": "app/Repositories/MarketingWhatsAppRepository.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "MarketingWhatsAppRepositoryInterface": "App\\Contracts\\Repositories\\MarketingWhatsAppRepositoryInterface",
                        "MarketingWhatsApp": "App\\Models\\MarketingWhatsApp",
                        "Collection": "Illuminate\\Database\\Eloquent\\Collection",
                        "Request": "Illuminate\\Http\\Request",
                        "LengthAwarePaginator": "Illuminate\\Pagination\\LengthAwarePaginator",
                        "($search) {\r\n                foreach ($this->searchableFields as $field) {\r\n                    $q->orWhere($field, 'like', \"%{$search}%\")": "($search) {\r\n                foreach ($this->searchableFields as $field) {\r\n                    $q->orWhere($field, 'like', \"%{$search}%\")",
                        "($searchTerm) {\r\n            foreach ($this->searchableFields as $field) {\r\n                $q->orWhere($field, 'like', \"%{$searchTerm}%\")": "($searchTerm) {\r\n            foreach ($this->searchableFields as $field) {\r\n                $q->orWhere($field, 'like', \"%{$searchTerm}%\")"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "PermissionRepository",
                "file_path": "app/Repositories/PermissionRepository.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "PermissionRepositoryInterface": "App\\Contracts\\Repositories\\PermissionRepositoryInterface",
                        "Collection": "Illuminate\\Database\\Eloquent\\Collection",
                        "Request": "Illuminate\\Http\\Request",
                        "LengthAwarePaginator": "Illuminate\\Pagination\\LengthAwarePaginator",
                        "Permission": "Spatie\\Permission\\Models\\Permission",
                        "($search) {\r\n                $q->where('name', 'like', \"%{$search}%\")\r\n                  ->orWhere('guard_name', 'like', \"%{$search}%\")": "($search) {\r\n                $q->where('name', 'like', \"%{$search}%\")\r\n                  ->orWhere('guard_name', 'like', \"%{$search}%\")",
                        "($roleId) {\r\n            $query->where('id', $roleId)": "($roleId) {\r\n            $query->where('id', $roleId)",
                        "($roleId) {\r\n                $query->where('id', $roleId)": "($roleId) {\r\n                $query->where('id', $roleId)"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "PolicyRepository",
                "file_path": "app/Repositories/PolicyRepository.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "PolicyRepositoryInterface": "App\\Contracts\\Repositories\\PolicyRepositoryInterface",
                        "CustomerInsurance": "App\\Models\\CustomerInsurance",
                        "LengthAwarePaginator": "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Collection": "Illuminate\\Database\\Eloquent\\Collection",
                        "Request": "Illuminate\\Http\\Request",
                        "Carbon": "Illuminate\\Support\\Carbon",
                        "($searchTerm) {\r\n                $q->where('policy_number', 'LIKE', $searchTerm)\r\n                  ->orWhereHas('customer', function ($customerQuery) use ($searchTerm) {\r\n                      $customerQuery->where('name', 'LIKE', $searchTerm)\r\n                                   ->orWhere('mobile_number', 'LIKE', $searchTerm)": "($searchTerm) {\r\n                $q->where('policy_number', 'LIKE', $searchTerm)\r\n                  ->orWhereHas('customer', function ($customerQuery) use ($searchTerm) {\r\n                      $customerQuery->where('name', 'LIKE', $searchTerm)\r\n                                   ->orWhere('mobile_number', 'LIKE', $searchTerm)",
                        "($familyGroupId) {\r\n                                    $query->where('family_group_id', $familyGroupId)": "($familyGroupId) {\r\n                                    $query->where('family_group_id', $familyGroupId)",
                        "($searchTerm) {\r\n                                    $q->where('policy_number', 'LIKE', $searchTerm)\r\n                                      ->orWhereHas('customer', function ($customerQuery) use ($searchTerm) {\r\n                                          $customerQuery->where('name', 'LIKE', $searchTerm)\r\n                                                       ->orWhere('mobile_number', 'LIKE', $searchTerm)": "($searchTerm) {\r\n                                    $q->where('policy_number', 'LIKE', $searchTerm)\r\n                                      ->orWhereHas('customer', function ($customerQuery) use ($searchTerm) {\r\n                                          $customerQuery->where('name', 'LIKE', $searchTerm)\r\n                                                       ->orWhere('mobile_number', 'LIKE', $searchTerm)"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "PolicyTypeRepository",
                "file_path": "app/Repositories/PolicyTypeRepository.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "PolicyTypeRepositoryInterface": "App\\Contracts\\Repositories\\PolicyTypeRepositoryInterface",
                        "PolicyType": "App\\Models\\PolicyType"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "PremiumTypeRepository",
                "file_path": "app/Repositories/PremiumTypeRepository.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "PremiumTypeRepositoryInterface": "App\\Contracts\\Repositories\\PremiumTypeRepositoryInterface",
                        "PremiumType": "App\\Models\\PremiumType"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "QuotationRepository",
                "file_path": "app/Repositories/QuotationRepository.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "QuotationRepositoryInterface": "App\\Contracts\\Repositories\\QuotationRepositoryInterface",
                        "Quotation": "App\\Models\\Quotation",
                        "LengthAwarePaginator": "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Collection": "Illuminate\\Database\\Eloquent\\Collection",
                        "Request": "Illuminate\\Http\\Request",
                        "($searchTerm) {\r\n                $q->whereHas('customer', function ($customerQuery) use ($searchTerm) {\r\n                    $customerQuery->where('name', 'LIKE', $searchTerm)\r\n                                 ->orWhere('mobile_number', 'LIKE', $searchTerm)": "($searchTerm) {\r\n                $q->whereHas('customer', function ($customerQuery) use ($searchTerm) {\r\n                    $customerQuery->where('name', 'LIKE', $searchTerm)\r\n                                 ->orWhere('mobile_number', 'LIKE', $searchTerm)",
                        "($searchTerm) {\r\n                           $q->whereHas('customer', function ($customerQuery) use ($searchTerm) {\r\n                               $customerQuery->where('name', 'LIKE', $searchTerm)\r\n                                            ->orWhere('mobile_number', 'LIKE', $searchTerm)": "($searchTerm) {\r\n                           $q->whereHas('customer', function ($customerQuery) use ($searchTerm) {\r\n                               $customerQuery->where('name', 'LIKE', $searchTerm)\r\n                                            ->orWhere('mobile_number', 'LIKE', $searchTerm)"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "ReferenceUserRepository",
                "file_path": "app/Repositories/ReferenceUserRepository.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "ReferenceUserRepositoryInterface": "App\\Contracts\\Repositories\\ReferenceUserRepositoryInterface",
                        "ReferenceUser": "App\\Models\\ReferenceUser"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "RelationshipManagerRepository",
                "file_path": "app/Repositories/RelationshipManagerRepository.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "RelationshipManagerRepositoryInterface": "App\\Contracts\\Repositories\\RelationshipManagerRepositoryInterface",
                        "RelationshipManager": "App\\Models\\RelationshipManager"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "RoleRepository",
                "file_path": "app/Repositories/RoleRepository.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "RoleRepositoryInterface": "App\\Contracts\\Repositories\\RoleRepositoryInterface",
                        "Collection": "Illuminate\\Database\\Eloquent\\Collection",
                        "Request": "Illuminate\\Http\\Request",
                        "LengthAwarePaginator": "Illuminate\\Pagination\\LengthAwarePaginator",
                        "Role": "Spatie\\Permission\\Models\\Role",
                        "($search) {\r\n                $q->where('name', 'like', \"%{$search}%\")\r\n                  ->orWhere('guard_name', 'like', \"%{$search}%\")": "($search) {\r\n                $q->where('name', 'like', \"%{$search}%\")\r\n                  ->orWhere('guard_name', 'like', \"%{$search}%\")",
                        "($modelType, $modelId) {\r\n            $query->where('model_type', $modelType)\r\n                  ->where('model_id', $modelId)": "($modelType, $modelId) {\r\n            $query->where('model_type', $modelType)\r\n                  ->where('model_id', $modelId)"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "UserRepository",
                "file_path": "app/Repositories/UserRepository.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "UserRepositoryInterface": "App\\Contracts\\Repositories\\UserRepositoryInterface",
                        "User": "App\\Models\\User"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            }
        ],
        "services": [
            {
                "class": "AddonCoverService",
                "file_path": "app/Services/AddonCoverService.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "AddonCoverRepositoryInterface",
                            "injection_type": "interface"
                        }
                    ],
                    "imports": {
                        "AddonCoverServiceInterface": "App\\Contracts\\Services\\AddonCoverServiceInterface",
                        "AddonCoverRepositoryInterface": "App\\Contracts\\Repositories\\AddonCoverRepositoryInterface",
                        "AddonCoverExport": "App\\Exports\\AddonCoverExport",
                        "AddonCover": "App\\Models\\AddonCover",
                        "Request": "Illuminate\\Http\\Request",
                        "LengthAwarePaginator": "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Collection": "Illuminate\\Database\\Eloquent\\Collection",
                        "Excel": "Maatwebsite\\Excel\\Facades\\Excel"
                    },
                    "external_method_calls": [
                        {
                            "property": "addonCoverRepository",
                            "method": "getPaginated",
                            "call_pattern": "$this->addonCoverRepository->getPaginated()"
                        },
                        {
                            "property": "addonCoverRepository",
                            "method": "create",
                            "call_pattern": "$this->addonCoverRepository->create()"
                        },
                        {
                            "property": "addonCoverRepository",
                            "method": "update",
                            "call_pattern": "$this->addonCoverRepository->update()"
                        },
                        {
                            "property": "addonCoverRepository",
                            "method": "delete",
                            "call_pattern": "$this->addonCoverRepository->delete()"
                        },
                        {
                            "property": "addonCoverRepository",
                            "method": "updateStatus",
                            "call_pattern": "$this->addonCoverRepository->updateStatus()"
                        },
                        {
                            "property": "addonCoverRepository",
                            "method": "getActive",
                            "call_pattern": "$this->addonCoverRepository->getActive()"
                        }
                    ]
                },
                "dependency_count": 1
            },
            {
                "class": "BaseService",
                "file_path": "app/Services/BaseService.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "DB": "Illuminate\\Support\\Facades\\DB",
                        "($callbacks) {\r\n            $results = []": "($callbacks) {\r\n            $results = []"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "BranchService",
                "file_path": "app/Services/BranchService.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "BranchRepositoryInterface",
                            "injection_type": "interface"
                        }
                    ],
                    "imports": {
                        "BranchRepositoryInterface": "App\\Contracts\\Repositories\\BranchRepositoryInterface",
                        "BranchServiceInterface": "App\\Contracts\\Services\\BranchServiceInterface",
                        "Branch": "App\\Models\\Branch",
                        "Collection": "Illuminate\\Database\\Eloquent\\Collection",
                        "Request": "Illuminate\\Http\\Request",
                        "LengthAwarePaginator": "Illuminate\\Pagination\\LengthAwarePaginator",
                        "($data) {\r\n            return $this->branchRepository->create($data)": "($data) {\r\n            return $this->branchRepository->create($data)",
                        "($branch, $data) {\r\n            return $this->branchRepository->update($branch, $data)": "($branch, $data) {\r\n            return $this->branchRepository->update($branch, $data)",
                        "($branch) {\r\n            return $this->branchRepository->delete($branch)": "($branch) {\r\n            return $this->branchRepository->delete($branch)",
                        "($branchId, $status) {\r\n            $branch = $this->branchRepository->findById($branchId)": "($branchId, $status) {\r\n            $branch = $this->branchRepository->findById($branchId)"
                    },
                    "external_method_calls": {
                        "0": {
                            "property": "branchRepository",
                            "method": "getBranchesWithFilters",
                            "call_pattern": "$this->branchRepository->getBranchesWithFilters()"
                        },
                        "1": {
                            "property": "branchRepository",
                            "method": "create",
                            "call_pattern": "$this->branchRepository->create()"
                        },
                        "2": {
                            "property": "branchRepository",
                            "method": "update",
                            "call_pattern": "$this->branchRepository->update()"
                        },
                        "3": {
                            "property": "branchRepository",
                            "method": "delete",
                            "call_pattern": "$this->branchRepository->delete()"
                        },
                        "4": {
                            "property": "branchRepository",
                            "method": "findById",
                            "call_pattern": "$this->branchRepository->findById()"
                        },
                        "6": {
                            "property": "branchRepository",
                            "method": "getActiveBranches",
                            "call_pattern": "$this->branchRepository->getActiveBranches()"
                        },
                        "7": {
                            "property": "branchRepository",
                            "method": "getBranchWithInsurancesCount",
                            "call_pattern": "$this->branchRepository->getBranchWithInsurancesCount()"
                        },
                        "8": {
                            "property": "branchRepository",
                            "method": "searchBranches",
                            "call_pattern": "$this->branchRepository->searchBranches()"
                        },
                        "9": {
                            "property": "branchRepository",
                            "method": "getBranchStatistics",
                            "call_pattern": "$this->branchRepository->getBranchStatistics()"
                        },
                        "10": {
                            "property": "branchRepository",
                            "method": "getAllBranchesForExport",
                            "call_pattern": "$this->branchRepository->getAllBranchesForExport()"
                        }
                    }
                },
                "dependency_count": 1
            },
            {
                "class": "BrokerService",
                "file_path": "app/Services/BrokerService.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "BrokerRepositoryInterface",
                            "injection_type": "interface"
                        }
                    ],
                    "imports": {
                        "BrokerServiceInterface": "App\\Contracts\\Services\\BrokerServiceInterface",
                        "BrokerRepositoryInterface": "App\\Contracts\\Repositories\\BrokerRepositoryInterface",
                        "BrokerExport": "App\\Exports\\BrokerExport",
                        "Broker": "App\\Models\\Broker",
                        "Request": "Illuminate\\Http\\Request",
                        "LengthAwarePaginator": "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Collection": "Illuminate\\Database\\Eloquent\\Collection",
                        "Excel": "Maatwebsite\\Excel\\Facades\\Excel"
                    },
                    "external_method_calls": [
                        {
                            "property": "brokerRepository",
                            "method": "getPaginated",
                            "call_pattern": "$this->brokerRepository->getPaginated()"
                        },
                        {
                            "property": "brokerRepository",
                            "method": "create",
                            "call_pattern": "$this->brokerRepository->create()"
                        },
                        {
                            "property": "brokerRepository",
                            "method": "update",
                            "call_pattern": "$this->brokerRepository->update()"
                        },
                        {
                            "property": "brokerRepository",
                            "method": "delete",
                            "call_pattern": "$this->brokerRepository->delete()"
                        },
                        {
                            "property": "brokerRepository",
                            "method": "updateStatus",
                            "call_pattern": "$this->brokerRepository->updateStatus()"
                        },
                        {
                            "property": "brokerRepository",
                            "method": "getActive",
                            "call_pattern": "$this->brokerRepository->getActive()"
                        }
                    ]
                },
                "dependency_count": 1
            },
            {
                "class": "CacheService",
                "file_path": "app/Services/CacheService.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "Cache": "Illuminate\\Support\\Facades\\Cache"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "ClaimService",
                "file_path": "app/Services/ClaimService.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "ClaimRepositoryInterface",
                            "injection_type": "interface"
                        }
                    ],
                    "imports": {
                        "ClaimRepositoryInterface": "App\\Contracts\\Repositories\\ClaimRepositoryInterface",
                        "ClaimServiceInterface": "App\\Contracts\\Services\\ClaimServiceInterface",
                        "StoreClaimRequest": "App\\Http\\Requests\\StoreClaimRequest",
                        "UpdateClaimRequest": "App\\Http\\Requests\\UpdateClaimRequest",
                        "Claim": "App\\Models\\Claim",
                        "CustomerInsurance": "App\\Models\\CustomerInsurance",
                        "Builder": "Illuminate\\Database\\Eloquent\\Builder",
                        "Request": "Illuminate\\Http\\Request",
                        "LengthAwarePaginator": "Illuminate\\Pagination\\LengthAwarePaginator",
                        "Log": "Illuminate\\Support\\Facades\\Log",
                        "($request) {\r\n            // Get customer insurance details\r\n            $customerInsurance = CustomerInsurance::with('customer')->findOrFail($request->customer_insurance_id)": "($request) {\r\n            // Get customer insurance details\r\n            $customerInsurance = CustomerInsurance::with('customer')->findOrFail($request->customer_insurance_id)",
                        "($request, $claim) {\r\n            // Get customer insurance details if changed\r\n            if ($request->customer_insurance_id !== $claim->customer_insurance_id) {\r\n                $customerInsurance = CustomerInsurance::with('customer')->findOrFail($request->customer_insurance_id)": "($request, $claim) {\r\n            // Get customer insurance details if changed\r\n            if ($request->customer_insurance_id !== $claim->customer_insurance_id) {\r\n                $customerInsurance = CustomerInsurance::with('customer')->findOrFail($request->customer_insurance_id)",
                        "($searchTerm) {\r\n            $query->where('policy_no', 'like', \"%{$searchTerm}%\")\r\n                  ->orWhere('registration_no', 'like', \"%{$searchTerm}%\")\r\n                  ->orWhereHas('customer', function (Builder $customerQuery) use ($searchTerm) {\r\n                      $customerQuery->where('name', 'like', \"%{$searchTerm}%\")\r\n                                   ->orWhere('email', 'like', \"%{$searchTerm}%\")\r\n                                   ->orWhere('mobile_number', 'like', \"%{$searchTerm}%\")": "($searchTerm) {\r\n            $query->where('policy_no', 'like', \"%{$searchTerm}%\")\r\n                  ->orWhere('registration_no', 'like', \"%{$searchTerm}%\")\r\n                  ->orWhereHas('customer', function (Builder $customerQuery) use ($searchTerm) {\r\n                      $customerQuery->where('name', 'like', \"%{$searchTerm}%\")\r\n                                   ->orWhere('email', 'like', \"%{$searchTerm}%\")\r\n                                   ->orWhere('mobile_number', 'like', \"%{$searchTerm}%\")"
                    },
                    "external_method_calls": [
                        {
                            "property": "claimRepository",
                            "method": "getClaimsWithFilters",
                            "call_pattern": "$this->claimRepository->getClaimsWithFilters()"
                        },
                        {
                            "property": "claimRepository",
                            "method": "updateStatus",
                            "call_pattern": "$this->claimRepository->updateStatus()"
                        },
                        {
                            "property": "claimRepository",
                            "method": "getClaimStatistics",
                            "call_pattern": "$this->claimRepository->getClaimStatistics()"
                        }
                    ]
                },
                "dependency_count": 1
            },
            {
                "class": "ContentSecurityPolicyService",
                "file_path": "app/Services/ContentSecurityPolicyService.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "Request": "Illuminate\\Http\\Request",
                        "Str": "Illuminate\\Support\\Str"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "CustomerInsuranceService",
                "file_path": "app/Services/CustomerInsuranceService.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "CustomerInsuranceRepositoryInterface",
                            "injection_type": "interface"
                        },
                        {
                            "type": "constructor_injection",
                            "class": "CacheService",
                            "injection_type": "concrete"
                        }
                    ],
                    "imports": {
                        "CustomerInsuranceServiceInterface": "App\\Contracts\\Services\\CustomerInsuranceServiceInterface",
                        "CustomerInsuranceRepositoryInterface": "App\\Contracts\\Repositories\\CustomerInsuranceRepositoryInterface",
                        "CustomerInsurancesExport": "App\\Exports\\CustomerInsurancesExport",
                        "{Branch, Broker, Customer, CustomerInsurance, FuelType, InsuranceCompany, PolicyType, PremiumType, ReferenceUser, RelationshipManager}": "App\\Models\\{Branch, Broker, Customer, CustomerInsurance, FuelType, InsuranceCompany, PolicyType, PremiumType, ReferenceUser, RelationshipManager}",
                        "WhatsAppApiTrait": "WhatsAppApiTrait",
                        "Request": "Illuminate\\Http\\Request",
                        "LengthAwarePaginator": "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Collection": "Illuminate\\Database\\Eloquent\\Collection",
                        "Storage}": "Illuminate\\Support\\{Carbon, Facades\\DB, Facades\\Storage}",
                        "Excel": "Maatwebsite\\Excel\\Facades\\Excel",
                        "($search) {\r\n                $q->where('registration_no', 'LIKE', '%' . $search . '%')\r\n                  ->orWhere('policy_no', 'LIKE', '%' . $search . '%')\r\n                  ->orWhere('customers.name', 'LIKE', '%' . $search . '%')\r\n                  ->orWhere('customers.mobile_number', 'LIKE', '%' . $search . '%')": "($search) {\r\n                $q->where('registration_no', 'LIKE', '%' . $search . '%')\r\n                  ->orWhere('policy_no', 'LIKE', '%' . $search . '%')\r\n                  ->orWhere('customers.name', 'LIKE', '%' . $search . '%')\r\n                  ->orWhere('customers.mobile_number', 'LIKE', '%' . $search . '%')",
                        "($data) {\r\n            // Calculate commission breakdown\r\n            $data = $this->calculateCommissionFields($data)": "($data) {\r\n            // Calculate commission breakdown\r\n            $data = $this->calculateCommissionFields($data)",
                        "($customerInsurance, $data) {\r\n            // Calculate commission breakdown\r\n            $data = $this->calculateCommissionFields($data)": "($customerInsurance, $data) {\r\n            // Calculate commission breakdown\r\n            $data = $this->calculateCommissionFields($data)",
                        "($customerInsurance) {\r\n            // Delete policy document if exists\r\n            if ($customerInsurance->policy_document_path && Storage::exists($customerInsurance->policy_document_path)) {\r\n                Storage::delete($customerInsurance->policy_document_path)": "($customerInsurance) {\r\n            // Delete policy document if exists\r\n            if ($customerInsurance->policy_document_path && Storage::exists($customerInsurance->policy_document_path)) {\r\n                Storage::delete($customerInsurance->policy_document_path)",
                        "($customerInsurance, $data) {\r\n            // Calculate commission breakdown for renewal data\r\n            $data = $this->calculateCommissionFields($data)": "($customerInsurance, $data) {\r\n            // Calculate commission breakdown for renewal data\r\n            $data = $this->calculateCommissionFields($data)"
                    },
                    "external_method_calls": {
                        "0": {
                            "property": "customerInsuranceRepository",
                            "method": "create",
                            "call_pattern": "$this->customerInsuranceRepository->create()"
                        },
                        "1": {
                            "property": "customerInsuranceRepository",
                            "method": "update",
                            "call_pattern": "$this->customerInsuranceRepository->update()"
                        },
                        "2": {
                            "property": "customerInsuranceRepository",
                            "method": "delete",
                            "call_pattern": "$this->customerInsuranceRepository->delete()"
                        },
                        "3": {
                            "property": "customerInsuranceRepository",
                            "method": "updateStatus",
                            "call_pattern": "$this->customerInsuranceRepository->updateStatus()"
                        },
                        "6": {
                            "property": "customerInsuranceRepository",
                            "method": "getByCustomerId",
                            "call_pattern": "$this->customerInsuranceRepository->getByCustomerId()"
                        },
                        "7": {
                            "property": "customerInsuranceRepository",
                            "method": "findWithRelations",
                            "call_pattern": "$this->customerInsuranceRepository->findWithRelations()"
                        },
                        "8": {
                            "property": "customerInsuranceRepository",
                            "method": "getExpiringPolicies",
                            "call_pattern": "$this->customerInsuranceRepository->getExpiringPolicies()"
                        }
                    }
                },
                "dependency_count": 2
            },
            {
                "class": "CustomerService",
                "file_path": "app/Services/CustomerService.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "CustomerRepositoryInterface",
                            "injection_type": "interface"
                        },
                        {
                            "type": "constructor_injection",
                            "class": "FileUploadService",
                            "injection_type": "concrete"
                        }
                    ],
                    "imports": {
                        "CustomerRepositoryInterface": "App\\Contracts\\Repositories\\CustomerRepositoryInterface",
                        "CustomerServiceInterface": "App\\Contracts\\Services\\CustomerServiceInterface",
                        "CustomerRegistered": "App\\Events\\Customer\\CustomerRegistered",
                        "CustomerProfileUpdated": "App\\Events\\Customer\\CustomerProfileUpdated",
                        "StoreCustomerRequest": "App\\Http\\Requests\\StoreCustomerRequest",
                        "UpdateCustomerRequest": "App\\Http\\Requests\\UpdateCustomerRequest",
                        "Customer": "App\\Models\\Customer",
                        "FileUploadService": "App\\Services\\FileUploadService",
                        "WhatsAppApiTrait": "WhatsAppApiTrait",
                        "LengthAwarePaginator": "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Collection": "Illuminate\\Database\\Eloquent\\Collection",
                        "Request": "Illuminate\\Http\\Request",
                        "DB": "Illuminate\\Support\\Facades\\DB",
                        "Validator": "Illuminate\\Support\\Facades\\Validator",
                        "a different email address.')": "a different email address.')",
                        "($request) {\r\n            // Create customer with validated data\r\n            $customer = $this->customerRepository->create([\r\n                'name' => $request->name,\r\n                'email' => $request->email,\r\n                'mobile_number' => $request->mobile_number,\r\n                'status' => $request->status,\r\n                'wedding_anniversary_date' => $request->wedding_anniversary_date,\r\n                'engagement_anniversary_date' => $request->engagement_anniversary_date,\r\n                'date_of_birth' => $request->date_of_birth,\r\n                'type' => $request->type,\r\n                'pan_card_number' => $request->pan_card_number,\r\n                'aadhar_card_number' => $request->aadhar_card_number,\r\n                'gst_number' => $request->gst_number,\r\n            ])": "($request) {\r\n            // Create customer with validated data\r\n            $customer = $this->customerRepository->create([\r\n                'name' => $request->name,\r\n                'email' => $request->email,\r\n                'mobile_number' => $request->mobile_number,\r\n                'status' => $request->status,\r\n                'wedding_anniversary_date' => $request->wedding_anniversary_date,\r\n                'engagement_anniversary_date' => $request->engagement_anniversary_date,\r\n                'date_of_birth' => $request->date_of_birth,\r\n                'type' => $request->type,\r\n                'pan_card_number' => $request->pan_card_number,\r\n                'aadhar_card_number' => $request->aadhar_card_number,\r\n                'gst_number' => $request->gst_number,\r\n            ])",
                        "rollback if email sending fails\r\n            try {\r\n                $this->sendWelcomeEmailSync($customer)": "rollback if email sending fails\r\n            try {\r\n                $this->sendWelcomeEmailSync($customer)",
                        "($request, $customer) {\r\n            // Capture original values for change tracking\r\n            $originalValues = $customer->only([\r\n                'name', 'email', 'mobile_number', 'status', 'type',\r\n                'pan_card_number', 'aadhar_card_number', 'gst_number'\r\n            ])": "($request, $customer) {\r\n            // Capture original values for change tracking\r\n            $originalValues = $customer->only([\r\n                'name', 'email', 'mobile_number', 'status', 'type',\r\n                'pan_card_number', 'aadhar_card_number', 'gst_number'\r\n            ])",
                        "($customer) {\r\n                $message->to($customer->email, $customer->name)\r\n                        ->subject('Welcome to ' . config('app.name') . ' - Your Customer Account is Ready!')": "($customer) {\r\n                $message->to($customer->email, $customer->name)\r\n                        ->subject('Welcome to ' . config('app.name') . ' - Your Customer Account is Ready!')"
                    },
                    "external_method_calls": {
                        "0": {
                            "property": "customerRepository",
                            "method": "getPaginated",
                            "call_pattern": "$this->customerRepository->getPaginated()"
                        },
                        "1": {
                            "property": "customerRepository",
                            "method": "create",
                            "call_pattern": "$this->customerRepository->create()"
                        },
                        "2": {
                            "property": "customerRepository",
                            "method": "update",
                            "call_pattern": "$this->customerRepository->update()"
                        },
                        "3": {
                            "property": "customerRepository",
                            "method": "updateStatus",
                            "call_pattern": "$this->customerRepository->updateStatus()"
                        },
                        "4": {
                            "property": "customerRepository",
                            "method": "delete",
                            "call_pattern": "$this->customerRepository->delete()"
                        },
                        "5": {
                            "property": "fileUploadService",
                            "method": "uploadCustomerDocument",
                            "call_pattern": "$this->fileUploadService->uploadCustomerDocument()"
                        },
                        "8": {
                            "property": "customerRepository",
                            "method": "getActive",
                            "call_pattern": "$this->customerRepository->getActive()"
                        },
                        "9": {
                            "property": "customerRepository",
                            "method": "getByFamilyGroup",
                            "call_pattern": "$this->customerRepository->getByFamilyGroup()"
                        },
                        "10": {
                            "property": "customerRepository",
                            "method": "getByType",
                            "call_pattern": "$this->customerRepository->getByType()"
                        },
                        "11": {
                            "property": "customerRepository",
                            "method": "search",
                            "call_pattern": "$this->customerRepository->search()"
                        },
                        "12": {
                            "property": "customerRepository",
                            "method": "count",
                            "call_pattern": "$this->customerRepository->count()"
                        },
                        "15": {
                            "property": "customerRepository",
                            "method": "exists",
                            "call_pattern": "$this->customerRepository->exists()"
                        },
                        "16": {
                            "property": "customerRepository",
                            "method": "findByEmail",
                            "call_pattern": "$this->customerRepository->findByEmail()"
                        },
                        "17": {
                            "property": "customerRepository",
                            "method": "findByMobileNumber",
                            "call_pattern": "$this->customerRepository->findByMobileNumber()"
                        }
                    }
                },
                "dependency_count": 2
            },
            {
                "class": "ErrorTrackingService",
                "file_path": "app/Services/ErrorTrackingService.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "LoggingService",
                            "injection_type": "concrete"
                        }
                    ],
                    "imports": {
                        "Log": "Illuminate\\Support\\Facades\\Log",
                        "Mail": "Illuminate\\Support\\Facades\\Mail",
                        "Cache": "Illuminate\\Support\\Facades\\Cache",
                        "Throwable": "Throwable"
                    },
                    "external_method_calls": [
                        {
                            "property": "logger",
                            "method": "logError",
                            "call_pattern": "$this->logger->logError()"
                        },
                        {
                            "property": "logger",
                            "method": "logEvent",
                            "call_pattern": "$this->logger->logEvent()"
                        }
                    ]
                },
                "dependency_count": 1
            },
            {
                "class": "FamilyGroupService",
                "file_path": "app/Services/FamilyGroupService.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "FamilyGroupRepositoryInterface",
                            "injection_type": "interface"
                        }
                    ],
                    "imports": {
                        "FamilyGroupRepositoryInterface": "App\\Contracts\\Repositories\\FamilyGroupRepositoryInterface",
                        "FamilyGroupServiceInterface": "App\\Contracts\\Services\\FamilyGroupServiceInterface",
                        "FamilyGroup": "App\\Models\\FamilyGroup",
                        "FamilyMember": "App\\Models\\FamilyMember",
                        "Customer": "App\\Models\\Customer",
                        "Request": "Illuminate\\Http\\Request",
                        "LengthAwarePaginator": "Illuminate\\Pagination\\LengthAwarePaginator",
                        "Log": "Illuminate\\Support\\Facades\\Log",
                        "($data) {\r\n            // Create family group\r\n            $familyGroup = $this->familyGroupRepository->create([\r\n                'name' => $data['name'],\r\n                'family_head_id' => $data['family_head_id'],\r\n                'status' => $data['status'] ?? true,\r\n                'created_by' => auth()->id(),\r\n            ])": "($data) {\r\n            // Create family group\r\n            $familyGroup = $this->familyGroupRepository->create([\r\n                'name' => $data['name'],\r\n                'family_head_id' => $data['family_head_id'],\r\n                'status' => $data['status'] ?? true,\r\n                'created_by' => auth()->id(),\r\n            ])",
                        "($familyGroup, $data) {\r\n            // Update basic family group data\r\n            $updated = $this->familyGroupRepository->update($familyGroup, [\r\n                'name' => $data['name'],\r\n                'status' => $data['status'] ?? $familyGroup->status,\r\n            ])": "($familyGroup, $data) {\r\n            // Update basic family group data\r\n            $updated = $this->familyGroupRepository->update($familyGroup, [\r\n                'name' => $data['name'],\r\n                'status' => $data['status'] ?? $familyGroup->status,\r\n            ])",
                        "($familyGroup) {\r\n            // Remove all family members\r\n            FamilyMember::where('family_group_id', $familyGroup->id)->delete()": "($familyGroup) {\r\n            // Remove all family members\r\n            FamilyMember::where('family_group_id', $familyGroup->id)->delete()",
                        "($familyGroupId, $memberData) {\r\n            // Update customer's family_group_id\r\n            Customer::where('id', $memberData['customer_id'])\r\n                ->update(['family_group_id' => $familyGroupId])": "($familyGroupId, $memberData) {\r\n            // Update customer's family_group_id\r\n            Customer::where('id', $memberData['customer_id'])\r\n                ->update(['family_group_id' => $familyGroupId])",
                        "($familyGroupId, $memberId) {\r\n            // Check if member is family head\r\n            $familyMember = FamilyMember::where('family_group_id', $familyGroupId)\r\n                ->where('customer_id', $memberId)\r\n                ->first()": "($familyGroupId, $memberId) {\r\n            // Check if member is family head\r\n            $familyMember = FamilyMember::where('family_group_id', $familyGroupId)\r\n                ->where('customer_id', $memberId)\r\n                ->first()",
                        "($familyGroupId, $newFamilyHeadId) {\r\n            return $this->familyGroupRepository->updateFamilyHead($familyGroupId, $newFamilyHeadId)": "($familyGroupId, $newFamilyHeadId) {\r\n            return $this->familyGroupRepository->updateFamilyHead($familyGroupId, $newFamilyHeadId)",
                        "Exception('Cannot remove family head. Please change family head first or delete the entire family group.')": "($familyMember) {\r\n            // Prevent removing family head\r\n            if ($familyMember->is_head) {\r\n                throw new \\Exception('Cannot remove family head. Please change family head first or delete the entire family group.')"
                    },
                    "external_method_calls": {
                        "0": {
                            "property": "familyGroupRepository",
                            "method": "getFamilyGroupsWithFilters",
                            "call_pattern": "$this->familyGroupRepository->getFamilyGroupsWithFilters()"
                        },
                        "1": {
                            "property": "familyGroupRepository",
                            "method": "getFamilyGroupWithMembers",
                            "call_pattern": "$this->familyGroupRepository->getFamilyGroupWithMembers()"
                        },
                        "2": {
                            "property": "familyGroupRepository",
                            "method": "create",
                            "call_pattern": "$this->familyGroupRepository->create()"
                        },
                        "3": {
                            "property": "familyGroupRepository",
                            "method": "update",
                            "call_pattern": "$this->familyGroupRepository->update()"
                        },
                        "4": {
                            "property": "familyGroupRepository",
                            "method": "delete",
                            "call_pattern": "$this->familyGroupRepository->delete()"
                        },
                        "5": {
                            "property": "familyGroupRepository",
                            "method": "updateStatus",
                            "call_pattern": "$this->familyGroupRepository->updateStatus()"
                        },
                        "6": {
                            "property": "familyGroupRepository",
                            "method": "removeCustomerFromFamilyGroup",
                            "call_pattern": "$this->familyGroupRepository->removeCustomerFromFamilyGroup()"
                        },
                        "7": {
                            "property": "familyGroupRepository",
                            "method": "updateFamilyHead",
                            "call_pattern": "$this->familyGroupRepository->updateFamilyHead()"
                        },
                        "8": {
                            "property": "familyGroupRepository",
                            "method": "getAvailableCustomersForEdit",
                            "call_pattern": "$this->familyGroupRepository->getAvailableCustomersForEdit()"
                        },
                        "9": {
                            "property": "familyGroupRepository",
                            "method": "getAvailableCustomers",
                            "call_pattern": "$this->familyGroupRepository->getAvailableCustomers()"
                        },
                        "10": {
                            "property": "familyGroupRepository",
                            "method": "getFamilyGroupStatistics",
                            "call_pattern": "$this->familyGroupRepository->getFamilyGroupStatistics()"
                        },
                        "12": {
                            "property": "familyGroupRepository",
                            "method": "getAllFamilyGroupsWithRelationships",
                            "call_pattern": "$this->familyGroupRepository->getAllFamilyGroupsWithRelationships()"
                        }
                    }
                },
                "dependency_count": 1
            },
            {
                "class": "FileUploadService",
                "file_path": "app/Services/FileUploadService.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "UploadedFile": "Illuminate\\Http\\UploadedFile",
                        "Storage": "Illuminate\\Support\\Facades\\Storage"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "FuelTypeService",
                "file_path": "app/Services/FuelTypeService.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "FuelType": "App\\Models\\FuelType"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "HealthCheckService",
                "file_path": "app/Services/HealthCheckService.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "LoggingService",
                            "injection_type": "concrete"
                        }
                    ],
                    "imports": {
                        "Cache": "Illuminate\\Support\\Facades\\Cache",
                        "DB": "Illuminate\\Support\\Facades\\DB",
                        "Storage": "Illuminate\\Support\\Facades\\Storage",
                        "Throwable": "Throwable"
                    },
                    "external_method_calls": [
                        {
                            "property": "logger",
                            "method": "logSystemHealth",
                            "call_pattern": "$this->logger->logSystemHealth()"
                        }
                    ]
                },
                "dependency_count": 1
            },
            {
                "class": "InsuranceCompanyService",
                "file_path": "app/Services/InsuranceCompanyService.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "InsuranceCompanyRepositoryInterface",
                            "injection_type": "interface"
                        }
                    ],
                    "imports": {
                        "InsuranceCompanyServiceInterface": "App\\Contracts\\Services\\InsuranceCompanyServiceInterface",
                        "InsuranceCompanyRepositoryInterface": "App\\Contracts\\Repositories\\InsuranceCompanyRepositoryInterface",
                        "InsuranceCompanyExport": "App\\Exports\\InsuranceCompanyExport",
                        "InsuranceCompany": "App\\Models\\InsuranceCompany",
                        "Request": "Illuminate\\Http\\Request",
                        "LengthAwarePaginator": "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Collection": "Illuminate\\Database\\Eloquent\\Collection",
                        "Excel": "Maatwebsite\\Excel\\Facades\\Excel"
                    },
                    "external_method_calls": [
                        {
                            "property": "insuranceCompanyRepository",
                            "method": "getPaginated",
                            "call_pattern": "$this->insuranceCompanyRepository->getPaginated()"
                        },
                        {
                            "property": "insuranceCompanyRepository",
                            "method": "create",
                            "call_pattern": "$this->insuranceCompanyRepository->create()"
                        },
                        {
                            "property": "insuranceCompanyRepository",
                            "method": "update",
                            "call_pattern": "$this->insuranceCompanyRepository->update()"
                        },
                        {
                            "property": "insuranceCompanyRepository",
                            "method": "delete",
                            "call_pattern": "$this->insuranceCompanyRepository->delete()"
                        },
                        {
                            "property": "insuranceCompanyRepository",
                            "method": "updateStatus",
                            "call_pattern": "$this->insuranceCompanyRepository->updateStatus()"
                        },
                        {
                            "property": "insuranceCompanyRepository",
                            "method": "getActive",
                            "call_pattern": "$this->insuranceCompanyRepository->getActive()"
                        }
                    ]
                },
                "dependency_count": 1
            },
            {
                "class": "LoggingService",
                "file_path": "app/Services/LoggingService.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "Request": "Illuminate\\Http\\Request",
                        "Log": "Illuminate\\Support\\Facades\\Log",
                        "DB": "Illuminate\\Support\\Facades\\DB",
                        "Str": "Illuminate\\Support\\Str",
                        "Throwable": "Throwable"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "MarketingWhatsAppService",
                "file_path": "app/Services/MarketingWhatsAppService.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "CustomerRepositoryInterface",
                            "injection_type": "interface"
                        },
                        {
                            "type": "constructor_injection",
                            "class": "FileUploadService",
                            "injection_type": "concrete"
                        }
                    ],
                    "imports": {
                        "CustomerRepositoryInterface": "App\\Contracts\\Repositories\\CustomerRepositoryInterface",
                        "MarketingWhatsAppServiceInterface": "App\\Contracts\\Services\\MarketingWhatsAppServiceInterface",
                        "FileUploadService": "App\\Services\\FileUploadService",
                        "WhatsAppApiTrait": "WhatsAppApiTrait",
                        "Collection": "Illuminate\\Database\\Eloquent\\Collection",
                        "Log": "Illuminate\\Support\\Facades\\Log",
                        "($campaignData) {\r\n            $customers = $this->getValidCustomersForMarketing(\r\n                $campaignData['recipients'],\r\n                $campaignData['selected_customers'] ?? []\r\n            )": "($campaignData) {\r\n            $customers = $this->getValidCustomersForMarketing(\r\n                $campaignData['recipients'],\r\n                $campaignData['selected_customers'] ?? []\r\n            )"
                    },
                    "external_method_calls": [
                        {
                            "property": "customerRepository",
                            "method": "getActiveCustomers",
                            "call_pattern": "$this->customerRepository->getActiveCustomers()"
                        },
                        {
                            "property": "customerRepository",
                            "method": "getCustomersWithValidMobileNumbers",
                            "call_pattern": "$this->customerRepository->getCustomersWithValidMobileNumbers()"
                        },
                        {
                            "property": "customerRepository",
                            "method": "getCustomersByIds",
                            "call_pattern": "$this->customerRepository->getCustomersByIds()"
                        },
                        {
                            "property": "fileUploadService",
                            "method": "uploadFile",
                            "call_pattern": "$this->fileUploadService->uploadFile()"
                        },
                        {
                            "property": "customerRepository",
                            "method": "count",
                            "call_pattern": "$this->customerRepository->count()"
                        }
                    ]
                },
                "dependency_count": 2
            },
            {
                "class": "PdfGenerationService",
                "file_path": "app/Services/PdfGenerationService.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "Quotation": "App\\Models\\Quotation",
                        "Pdf": "Barryvdh\\DomPDF\\Facade\\Pdf",
                        "Response": "Illuminate\\Http\\Response"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "PermissionService",
                "file_path": "app/Services/PermissionService.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "PermissionRepositoryInterface",
                            "injection_type": "interface"
                        },
                        {
                            "type": "constructor_injection",
                            "class": "RoleRepositoryInterface",
                            "injection_type": "interface"
                        }
                    ],
                    "imports": {
                        "PermissionRepositoryInterface": "App\\Contracts\\Repositories\\PermissionRepositoryInterface",
                        "RoleRepositoryInterface": "App\\Contracts\\Repositories\\RoleRepositoryInterface",
                        "PermissionServiceInterface": "App\\Contracts\\Services\\PermissionServiceInterface",
                        "Collection": "Illuminate\\Database\\Eloquent\\Collection",
                        "Request": "Illuminate\\Http\\Request",
                        "LengthAwarePaginator": "Illuminate\\Pagination\\LengthAwarePaginator",
                        "Permission": "Spatie\\Permission\\Models\\Permission",
                        "Role": "Spatie\\Permission\\Models\\Role",
                        "($data) {\r\n            return $this->permissionRepository->create($data)": "($data) {\r\n            return $this->permissionRepository->create($data)",
                        "($permission, $data) {\r\n            return $this->permissionRepository->update($permission, $data)": "($permission, $data) {\r\n            return $this->permissionRepository->update($permission, $data)",
                        "($permission) {\r\n            // First remove the permission from all roles\r\n            $permission->roles()->detach()": "($permission) {\r\n            // First remove the permission from all roles\r\n            $permission->roles()->detach()",
                        "($roleId, $permissionIds) {\r\n            $role = $this->roleRepository->findById($roleId)": "($roleId, $permissionIds) {\r\n            $role = $this->roleRepository->findById($roleId)"
                    },
                    "external_method_calls": {
                        "0": {
                            "property": "permissionRepository",
                            "method": "getPermissionsWithFilters",
                            "call_pattern": "$this->permissionRepository->getPermissionsWithFilters()"
                        },
                        "1": {
                            "property": "permissionRepository",
                            "method": "create",
                            "call_pattern": "$this->permissionRepository->create()"
                        },
                        "2": {
                            "property": "permissionRepository",
                            "method": "update",
                            "call_pattern": "$this->permissionRepository->update()"
                        },
                        "3": {
                            "property": "permissionRepository",
                            "method": "delete",
                            "call_pattern": "$this->permissionRepository->delete()"
                        },
                        "4": {
                            "property": "permissionRepository",
                            "method": "getAllPermissions",
                            "call_pattern": "$this->permissionRepository->getAllPermissions()"
                        },
                        "5": {
                            "property": "roleRepository",
                            "method": "findById",
                            "call_pattern": "$this->roleRepository->findById()"
                        },
                        "6": {
                            "property": "permissionRepository",
                            "method": "searchPermissions",
                            "call_pattern": "$this->permissionRepository->searchPermissions()"
                        },
                        "7": {
                            "property": "permissionRepository",
                            "method": "getPermissionStatistics",
                            "call_pattern": "$this->permissionRepository->getPermissionStatistics()"
                        },
                        "9": {
                            "property": "permissionRepository",
                            "method": "getPermissionsGroupedByModule",
                            "call_pattern": "$this->permissionRepository->getPermissionsGroupedByModule()"
                        }
                    }
                },
                "dependency_count": 2
            },
            {
                "class": "PolicyService",
                "file_path": "app/Services/PolicyService.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "PolicyRepositoryInterface",
                            "injection_type": "interface"
                        }
                    ],
                    "imports": {
                        "PolicyRepositoryInterface": "App\\Contracts\\Repositories\\PolicyRepositoryInterface",
                        "PolicyServiceInterface": "App\\Contracts\\Services\\PolicyServiceInterface",
                        "Customer": "App\\Models\\Customer",
                        "CustomerInsurance": "App\\Models\\CustomerInsurance",
                        "WhatsAppApiTrait": "WhatsAppApiTrait",
                        "LengthAwarePaginator": "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Collection": "Illuminate\\Database\\Eloquent\\Collection",
                        "Request": "Illuminate\\Http\\Request",
                        "DB": "Illuminate\\Support\\Facades\\DB",
                        "Log": "Illuminate\\Support\\Facades\\Log"
                    },
                    "external_method_calls": {
                        "0": {
                            "property": "policyRepository",
                            "method": "getPaginated",
                            "call_pattern": "$this->policyRepository->getPaginated()"
                        },
                        "1": {
                            "property": "policyRepository",
                            "method": "create",
                            "call_pattern": "$this->policyRepository->create()"
                        },
                        "2": {
                            "property": "policyRepository",
                            "method": "update",
                            "call_pattern": "$this->policyRepository->update()"
                        },
                        "3": {
                            "property": "policyRepository",
                            "method": "getByCustomer",
                            "call_pattern": "$this->policyRepository->getByCustomer()"
                        },
                        "4": {
                            "property": "policyRepository",
                            "method": "getDueForRenewal",
                            "call_pattern": "$this->policyRepository->getDueForRenewal()"
                        },
                        "5": {
                            "property": "policyRepository",
                            "method": "getByFamilyGroup",
                            "call_pattern": "$this->policyRepository->getByFamilyGroup()"
                        },
                        "6": {
                            "property": "policyRepository",
                            "method": "getStatistics",
                            "call_pattern": "$this->policyRepository->getStatistics()"
                        },
                        "7": {
                            "property": "policyRepository",
                            "method": "getByInsuranceCompany",
                            "call_pattern": "$this->policyRepository->getByInsuranceCompany()"
                        },
                        "8": {
                            "property": "policyRepository",
                            "method": "getActive",
                            "call_pattern": "$this->policyRepository->getActive()"
                        },
                        "9": {
                            "property": "policyRepository",
                            "method": "getExpired",
                            "call_pattern": "$this->policyRepository->getExpired()"
                        },
                        "10": {
                            "property": "policyRepository",
                            "method": "getByPolicyType",
                            "call_pattern": "$this->policyRepository->getByPolicyType()"
                        },
                        "11": {
                            "property": "policyRepository",
                            "method": "search",
                            "call_pattern": "$this->policyRepository->search()"
                        },
                        "12": {
                            "property": "policyRepository",
                            "method": "delete",
                            "call_pattern": "$this->policyRepository->delete()"
                        },
                        "14": {
                            "property": "policyRepository",
                            "method": "getCountByStatus",
                            "call_pattern": "$this->policyRepository->getCountByStatus()"
                        },
                        "15": {
                            "property": "policyRepository",
                            "method": "exists",
                            "call_pattern": "$this->policyRepository->exists()"
                        }
                    }
                },
                "dependency_count": 1
            },
            {
                "class": "PolicyTypeService",
                "file_path": "app/Services/PolicyTypeService.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "PolicyType": "App\\Models\\PolicyType"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "PremiumTypeService",
                "file_path": "app/Services/PremiumTypeService.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "PremiumType": "App\\Models\\PremiumType"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "QuotationService",
                "file_path": "app/Services/QuotationService.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "PdfGenerationService",
                            "injection_type": "concrete"
                        },
                        {
                            "type": "constructor_injection",
                            "class": "QuotationRepositoryInterface",
                            "injection_type": "interface"
                        }
                    ],
                    "imports": {
                        "QuotationRepositoryInterface": "App\\Contracts\\Repositories\\QuotationRepositoryInterface",
                        "QuotationServiceInterface": "App\\Contracts\\Services\\QuotationServiceInterface",
                        "QuotationGenerated": "App\\Events\\Quotation\\QuotationGenerated",
                        "Customer": "App\\Models\\Customer",
                        "InsuranceCompany": "App\\Models\\InsuranceCompany",
                        "Quotation": "App\\Models\\Quotation",
                        "QuotationCompany": "App\\Models\\QuotationCompany",
                        "PdfGenerationService": "App\\Services\\PdfGenerationService",
                        "WhatsAppApiTrait": "WhatsAppApiTrait",
                        "LengthAwarePaginator": "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Request": "Illuminate\\Http\\Request",
                        "DB": "Illuminate\\Support\\Facades\\DB",
                        "($data) {\r\n            // Note: QuotationRequested event disabled - policy types handled at company level\r\n\r\n            $data['total_idv'] = $this->calculateTotalIdv($data)": "($data) {\r\n            // Note: QuotationRequested event disabled - policy types handled at company level\r\n\r\n            $data['total_idv'] = $this->calculateTotalIdv($data)",
                        "for commercial purposes.\"": "for commercial purposes.\""
                    },
                    "external_method_calls": [
                        {
                            "property": "pdfService",
                            "method": "generateQuotationPdfForWhatsApp",
                            "call_pattern": "$this->pdfService->generateQuotationPdfForWhatsApp()"
                        },
                        {
                            "property": "pdfService",
                            "method": "generateQuotationPdf",
                            "call_pattern": "$this->pdfService->generateQuotationPdf()"
                        },
                        {
                            "property": "quotationRepository",
                            "method": "getPaginated",
                            "call_pattern": "$this->quotationRepository->getPaginated()"
                        },
                        {
                            "property": "quotationRepository",
                            "method": "delete",
                            "call_pattern": "$this->quotationRepository->delete()"
                        }
                    ]
                },
                "dependency_count": 2
            },
            {
                "class": "ReferenceUserService",
                "file_path": "app/Services/ReferenceUserService.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "ReferenceUser": "App\\Models\\ReferenceUser"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "RelationshipManagerService",
                "file_path": "app/Services/RelationshipManagerService.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "RelationshipManager": "App\\Models\\RelationshipManager"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "ReportService",
                "file_path": "app/Services/ReportService.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "ReportServiceInterface": "App\\Contracts\\Services\\ReportServiceInterface",
                        "CrossSellingExport": "App\\Exports\\CrossSellingExport",
                        "CustomerInsurancesExport1": "App\\Exports\\CustomerInsurancesExport1",
                        "Branch": "App\\Models\\Branch",
                        "Broker": "App\\Models\\Broker",
                        "Customer": "App\\Models\\Customer",
                        "FuelType": "App\\Models\\FuelType",
                        "InsuranceCompany": "App\\Models\\InsuranceCompany",
                        "PolicyType": "App\\Models\\PolicyType",
                        "PremiumType": "App\\Models\\PremiumType",
                        "ReferenceUser": "App\\Models\\ReferenceUser",
                        "RelationshipManager": "App\\Models\\RelationshipManager",
                        "Report": "App\\Models\\Report",
                        "Carbon": "Illuminate\\Support\\Carbon",
                        "Excel": "Maatwebsite\\Excel\\Facades\\Excel",
                        "BinaryFileResponse": "Symfony\\Component\\HttpFoundation\\BinaryFileResponse",
                        "($parameters) {\n                if (!empty($parameters['issue_start_date'])) {\n                    try {\n                        $startDate = Carbon::createFromFormat('d/m/Y', $parameters['issue_start_date'])->format('Y-m-d')": "($parameters) {\n                if (!empty($parameters['issue_start_date'])) {\n                    try {\n                        $startDate = Carbon::createFromFormat('d/m/Y', $parameters['issue_start_date'])->format('Y-m-d')",
                        "($parameters) {\n                $query->where('broker_id', $parameters['broker_id'])": "($parameters) {\n                $query->where('broker_id', $parameters['broker_id'])",
                        "($parameters) {\n                $query->where('relationship_manager_id', $parameters['relationship_manager_id'])": "($parameters) {\n                $query->where('relationship_manager_id', $parameters['relationship_manager_id'])",
                        "($parameters) {\n                $query->where('insurance_company_id', $parameters['insurance_company_id'])": "($parameters) {\n                $query->where('insurance_company_id', $parameters['insurance_company_id'])",
                        "($premiumTypes, $oneYearAgo, $hasDateFilter) {\n            $customerData = ['Customer Name' => $customer->name]": "($premiumTypes, $oneYearAgo, $hasDateFilter) {\n            $customerData = ['Customer Name' => $customer->name]",
                        "($premiumType) {\n                    return $insurance->premiumType->id === $premiumType->id": "($premiumType) {\n                    return $insurance->premiumType->id === $premiumType->id",
                        "($premiumType) {\n                return $insurance->premiumType->id === $premiumType->id": "($premiumType) {\n                return $insurance->premiumType->id === $premiumType->id",
                        "($oneYearAgo) {\n                    return $query->where('start_date', '>=', $oneYearAgo)": "($oneYearAgo) {\n                    return $query->where('start_date', '>=', $oneYearAgo)",
                        "($oneYearAgo) {\n                    return $query->where('actual_earnings', '>=', $oneYearAgo)": "($oneYearAgo) {\n                    return $query->where('actual_earnings', '>=', $oneYearAgo)"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "RoleService",
                "file_path": "app/Services/RoleService.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "RoleRepositoryInterface",
                            "injection_type": "interface"
                        },
                        {
                            "type": "constructor_injection",
                            "class": "UserRepositoryInterface",
                            "injection_type": "interface"
                        }
                    ],
                    "imports": {
                        "RoleRepositoryInterface": "App\\Contracts\\Repositories\\RoleRepositoryInterface",
                        "UserRepositoryInterface": "App\\Contracts\\Repositories\\UserRepositoryInterface",
                        "RoleServiceInterface": "App\\Contracts\\Services\\RoleServiceInterface",
                        "Collection": "Illuminate\\Database\\Eloquent\\Collection",
                        "Request": "Illuminate\\Http\\Request",
                        "LengthAwarePaginator": "Illuminate\\Pagination\\LengthAwarePaginator",
                        "Role": "Spatie\\Permission\\Models\\Role",
                        "($data) {\r\n            $role = $this->roleRepository->create([\r\n                'name' => $data['name'],\r\n                'guard_name' => $data['guard_name'] ?? 'web'\r\n            ])": "($data) {\r\n            $role = $this->roleRepository->create([\r\n                'name' => $data['name'],\r\n                'guard_name' => $data['guard_name'] ?? 'web'\r\n            ])",
                        "($role, $data) {\r\n            $updated = $this->roleRepository->update($role, [\r\n                'name' => $data['name'],\r\n                'guard_name' => $data['guard_name'] ?? $role->guard_name\r\n            ])": "($role, $data) {\r\n            $updated = $this->roleRepository->update($role, [\r\n                'name' => $data['name'],\r\n                'guard_name' => $data['guard_name'] ?? $role->guard_name\r\n            ])",
                        "($role) {\r\n            // First remove the role from all users\r\n            $role->users()->detach()": "($role) {\r\n            // First remove the role from all users\r\n            $role->users()->detach()",
                        "($roleId, $permissionIds) {\r\n            $role = $this->roleRepository->findById($roleId)": "($roleId, $permissionIds) {\r\n            $role = $this->roleRepository->findById($roleId)",
                        "($userId, $roleId) {\r\n            $user = $this->userRepository->findById($userId)": "($userId, $roleId) {\r\n            $user = $this->userRepository->findById($userId)"
                    },
                    "external_method_calls": {
                        "0": {
                            "property": "roleRepository",
                            "method": "getRolesWithFilters",
                            "call_pattern": "$this->roleRepository->getRolesWithFilters()"
                        },
                        "1": {
                            "property": "roleRepository",
                            "method": "create",
                            "call_pattern": "$this->roleRepository->create()"
                        },
                        "2": {
                            "property": "roleRepository",
                            "method": "update",
                            "call_pattern": "$this->roleRepository->update()"
                        },
                        "3": {
                            "property": "roleRepository",
                            "method": "delete",
                            "call_pattern": "$this->roleRepository->delete()"
                        },
                        "4": {
                            "property": "roleRepository",
                            "method": "getAllRoles",
                            "call_pattern": "$this->roleRepository->getAllRoles()"
                        },
                        "5": {
                            "property": "userRepository",
                            "method": "findById",
                            "call_pattern": "$this->userRepository->findById()"
                        },
                        "6": {
                            "property": "roleRepository",
                            "method": "searchRoles",
                            "call_pattern": "$this->roleRepository->searchRoles()"
                        },
                        "7": {
                            "property": "roleRepository",
                            "method": "getRoleStatistics",
                            "call_pattern": "$this->roleRepository->getRoleStatistics()"
                        },
                        "8": {
                            "property": "roleRepository",
                            "method": "findById",
                            "call_pattern": "$this->roleRepository->findById()"
                        },
                        "14": {
                            "property": "roleRepository",
                            "method": "getRoleWithPermissions",
                            "call_pattern": "$this->roleRepository->getRoleWithPermissions()"
                        },
                        "15": {
                            "property": "roleRepository",
                            "method": "getUsersCountByRole",
                            "call_pattern": "$this->roleRepository->getUsersCountByRole()"
                        }
                    }
                },
                "dependency_count": 2
            },
            {
                "class": "SecurityService",
                "file_path": "app/Services/SecurityService.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": [],
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "UserService",
                "file_path": "app/Services/UserService.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "UserRepositoryInterface",
                            "injection_type": "interface"
                        }
                    ],
                    "imports": {
                        "UserServiceInterface": "App\\Contracts\\Services\\UserServiceInterface",
                        "UserRepositoryInterface": "App\\Contracts\\Repositories\\UserRepositoryInterface",
                        "UserExport": "App\\Exports\\UserExport",
                        "User": "App\\Models\\User",
                        "Request": "Illuminate\\Http\\Request",
                        "LengthAwarePaginator": "Illuminate\\Contracts\\Pagination\\LengthAwarePaginator",
                        "Collection": "Illuminate\\Database\\Eloquent\\Collection",
                        "Hash": "Illuminate\\Support\\Facades\\Hash",
                        "Excel": "Maatwebsite\\Excel\\Facades\\Excel",
                        "Role": "Spatie\\Permission\\Models\\Role",
                        "($data) {\r\n            if (isset($data['password'])) {\r\n                $data['password'] = Hash::make($data['password'])": "($data) {\r\n            if (isset($data['password'])) {\r\n                $data['password'] = Hash::make($data['password'])",
                        "($user, $data) {\r\n            if (isset($data['password']) && !empty($data['password'])) {\r\n                $data['password'] = Hash::make($data['password'])": "($user, $data) {\r\n            if (isset($data['password']) && !empty($data['password'])) {\r\n                $data['password'] = Hash::make($data['password'])",
                        "($user, $roles) {\r\n            $user->syncRoles($roles)": "($user, $roles) {\r\n            $user->syncRoles($roles)",
                        "($user, $newPassword) {\r\n            $hashedPassword = Hash::make($newPassword)": "($user, $newPassword) {\r\n            $hashedPassword = Hash::make($newPassword)"
                    },
                    "external_method_calls": [
                        {
                            "property": "userRepository",
                            "method": "getPaginated",
                            "call_pattern": "$this->userRepository->getPaginated()"
                        },
                        {
                            "property": "userRepository",
                            "method": "create",
                            "call_pattern": "$this->userRepository->create()"
                        },
                        {
                            "property": "userRepository",
                            "method": "update",
                            "call_pattern": "$this->userRepository->update()"
                        },
                        {
                            "property": "userRepository",
                            "method": "delete",
                            "call_pattern": "$this->userRepository->delete()"
                        },
                        {
                            "property": "userRepository",
                            "method": "updateStatus",
                            "call_pattern": "$this->userRepository->updateStatus()"
                        },
                        {
                            "property": "userRepository",
                            "method": "getActive",
                            "call_pattern": "$this->userRepository->getActive()"
                        },
                        {
                            "property": "userRepository",
                            "method": "updatePassword",
                            "call_pattern": "$this->userRepository->updatePassword()"
                        },
                        {
                            "property": "userRepository",
                            "method": "findWithRoles",
                            "call_pattern": "$this->userRepository->findWithRoles()"
                        }
                    ]
                },
                "dependency_count": 1
            }
        ],
        "controllers": [
            {
                "class": "AbstractBaseCrudController",
                "file_path": "app/Http/Controllers/AbstractBaseCrudController.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": [],
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "AddonCoverController",
                "file_path": "app/Http/Controllers/AddonCoverController.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "AddonCoverServiceInterface",
                            "injection_type": "interface"
                        }
                    ],
                    "imports": {
                        "AddonCoverServiceInterface": "App\\Contracts\\Services\\AddonCoverServiceInterface",
                        "AddonCover": "App\\Models\\AddonCover",
                        "Request": "Illuminate\\Http\\Request",
                        "Validator": "Illuminate\\Support\\Facades\\Validator"
                    },
                    "external_method_calls": [
                        {
                            "property": "addonCoverService",
                            "method": "getAddonCovers",
                            "call_pattern": "$this->addonCoverService->getAddonCovers()"
                        },
                        {
                            "property": "addonCoverService",
                            "method": "getStoreValidationRules",
                            "call_pattern": "$this->addonCoverService->getStoreValidationRules()"
                        },
                        {
                            "property": "addonCoverService",
                            "method": "createAddonCover",
                            "call_pattern": "$this->addonCoverService->createAddonCover()"
                        },
                        {
                            "property": "addonCoverService",
                            "method": "updateStatus",
                            "call_pattern": "$this->addonCoverService->updateStatus()"
                        },
                        {
                            "property": "addonCoverService",
                            "method": "getUpdateValidationRules",
                            "call_pattern": "$this->addonCoverService->getUpdateValidationRules()"
                        },
                        {
                            "property": "addonCoverService",
                            "method": "updateAddonCover",
                            "call_pattern": "$this->addonCoverService->updateAddonCover()"
                        },
                        {
                            "property": "addonCoverService",
                            "method": "deleteAddonCover",
                            "call_pattern": "$this->addonCoverService->deleteAddonCover()"
                        },
                        {
                            "property": "addonCoverService",
                            "method": "exportAddonCovers",
                            "call_pattern": "$this->addonCoverService->exportAddonCovers()"
                        }
                    ]
                },
                "dependency_count": 1
            },
            {
                "class": "BranchController",
                "file_path": "app/Http/Controllers/BranchController.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "BranchRepositoryInterface",
                            "injection_type": "interface"
                        }
                    ],
                    "imports": {
                        "BranchRepositoryInterface": "App\\Contracts\\Repositories\\BranchRepositoryInterface",
                        "RedirectResponse": "Illuminate\\Http\\RedirectResponse",
                        "Request": "Illuminate\\Http\\Request",
                        "View": "Illuminate\\View\\View",
                        "Excel": "Maatwebsite\\Excel\\Facades\\Excel",
                        "BranchesExport": "App\\Exports\\BranchesExport"
                    },
                    "external_method_calls": [
                        {
                            "property": "branchRepository",
                            "method": "getBranchesWithFilters",
                            "call_pattern": "$this->branchRepository->getBranchesWithFilters()"
                        },
                        {
                            "property": "branchRepository",
                            "method": "create",
                            "call_pattern": "$this->branchRepository->create()"
                        },
                        {
                            "property": "branchRepository",
                            "method": "findById",
                            "call_pattern": "$this->branchRepository->findById()"
                        },
                        {
                            "property": "branchRepository",
                            "method": "update",
                            "call_pattern": "$this->branchRepository->update()"
                        }
                    ]
                },
                "dependency_count": 1
            },
            {
                "class": "BrokerController",
                "file_path": "app/Http/Controllers/BrokerController.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "BrokerServiceInterface",
                            "injection_type": "interface"
                        }
                    ],
                    "imports": {
                        "BrokerServiceInterface": "App\\Contracts\\Services\\BrokerServiceInterface",
                        "StoreBrokerRequest": "App\\Http\\Requests\\StoreBrokerRequest",
                        "UpdateBrokerRequest": "App\\Http\\Requests\\UpdateBrokerRequest",
                        "Broker": "App\\Models\\Broker",
                        "RedirectResponse": "Illuminate\\Http\\RedirectResponse",
                        "Request": "Illuminate\\Http\\Request",
                        "DB": "Illuminate\\Support\\Facades\\DB",
                        "Validator": "Illuminate\\Support\\Facades\\Validator",
                        "View": "Illuminate\\View\\View",
                        "Excel": "Maatwebsite\\Excel\\Facades\\Excel",
                        "BrokersExport": "App\\Exports\\BrokersExport"
                    },
                    "external_method_calls": [
                        {
                            "property": "brokerService",
                            "method": "getBrokers",
                            "call_pattern": "$this->brokerService->getBrokers()"
                        },
                        {
                            "property": "brokerService",
                            "method": "createBroker",
                            "call_pattern": "$this->brokerService->createBroker()"
                        },
                        {
                            "property": "brokerService",
                            "method": "updateStatus",
                            "call_pattern": "$this->brokerService->updateStatus()"
                        },
                        {
                            "property": "brokerService",
                            "method": "updateBroker",
                            "call_pattern": "$this->brokerService->updateBroker()"
                        },
                        {
                            "property": "brokerService",
                            "method": "deleteBroker",
                            "call_pattern": "$this->brokerService->deleteBroker()"
                        }
                    ]
                },
                "dependency_count": 1
            },
            {
                "class": "ClaimController",
                "file_path": "app/Http/Controllers/ClaimController.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "ClaimService",
                            "injection_type": "concrete"
                        },
                        {
                            "type": "constructor_injection",
                            "class": "CustomerInsuranceRepositoryInterface",
                            "injection_type": "interface"
                        }
                    ],
                    "imports": {
                        "StoreClaimRequest": "App\\Http\\Requests\\StoreClaimRequest",
                        "UpdateClaimRequest": "App\\Http\\Requests\\UpdateClaimRequest",
                        "Claim": "App\\Models\\Claim",
                        "ClaimService": "App\\Services\\ClaimService",
                        "CustomerInsuranceRepositoryInterface": "App\\Contracts\\Repositories\\CustomerInsuranceRepositoryInterface",
                        "JsonResponse": "Illuminate\\Http\\JsonResponse",
                        "RedirectResponse": "Illuminate\\Http\\RedirectResponse",
                        "Request": "Illuminate\\Http\\Request",
                        "View": "Illuminate\\View\\View",
                        "Excel": "Maatwebsite\\Excel\\Facades\\Excel",
                        "ClaimsExport": "App\\Exports\\ClaimsExport",
                        "web guard for admin\n        $this->setupCustomPermissionMiddleware([\n            ['permission' => 'claim-list|claim-create|claim-edit|claim-delete', 'only' => ['index']],\n            ['permission' => 'claim-create', 'only' => ['create', 'store', 'updateStatus']],\n            ['permission' => 'claim-edit', 'only' => ['edit', 'update']],\n            ['permission' => 'claim-delete', 'only' => ['delete']]\n        ])": "web guard for admin\n        $this->setupCustomPermissionMiddleware([\n            ['permission' => 'claim-list|claim-create|claim-edit|claim-delete', 'only' => ['index']],\n            ['permission' => 'claim-create', 'only' => ['create', 'store', 'updateStatus']],\n            ['permission' => 'claim-edit', 'only' => ['edit', 'update']],\n            ['permission' => 'claim-delete', 'only' => ['delete']]\n        ])"
                    },
                    "external_method_calls": [
                        {
                            "property": "claimService",
                            "method": "getClaims",
                            "call_pattern": "$this->claimService->getClaims()"
                        },
                        {
                            "property": "customerInsuranceRepository",
                            "method": "getActiveCustomerInsurances",
                            "call_pattern": "$this->customerInsuranceRepository->getActiveCustomerInsurances()"
                        },
                        {
                            "property": "claimService",
                            "method": "createClaim",
                            "call_pattern": "$this->claimService->createClaim()"
                        },
                        {
                            "property": "claimService",
                            "method": "updateClaim",
                            "call_pattern": "$this->claimService->updateClaim()"
                        },
                        {
                            "property": "claimService",
                            "method": "updateClaimStatus",
                            "call_pattern": "$this->claimService->updateClaimStatus()"
                        },
                        {
                            "property": "claimService",
                            "method": "deleteClaim",
                            "call_pattern": "$this->claimService->deleteClaim()"
                        },
                        {
                            "property": "claimService",
                            "method": "searchPolicies",
                            "call_pattern": "$this->claimService->searchPolicies()"
                        },
                        {
                            "property": "claimService",
                            "method": "getClaimStatistics",
                            "call_pattern": "$this->claimService->getClaimStatistics()"
                        }
                    ]
                },
                "dependency_count": 2
            },
            {
                "class": "CommonController",
                "file_path": "app/Http/Controllers/CommonController.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "Request": "Illuminate\\Http\\Request",
                        "Mail": "Mail"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "Controller",
                "file_path": "app/Http/Controllers/Controller.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "AuthorizesRequests": "Illuminate\\Foundation\\Auth\\Access\\AuthorizesRequests",
                        "DispatchesJobs": "Illuminate\\Foundation\\Bus\\DispatchesJobs",
                        "ValidatesRequests": "Illuminate\\Foundation\\Validation\\ValidatesRequests",
                        "Controller as BaseController": "Illuminate\\Routing\\Controller as BaseController",
                        "AuthorizesRequests, DispatchesJobs, ValidatesRequests": "AuthorizesRequests, DispatchesJobs, ValidatesRequests"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "CustomerController",
                "file_path": "app/Http/Controllers/CustomerController.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "CustomerServiceInterface",
                            "injection_type": "interface"
                        }
                    ],
                    "imports": {
                        "CustomerServiceInterface": "App\\Contracts\\Services\\CustomerServiceInterface",
                        "CustomersExport": "App\\Exports\\CustomersExport",
                        "StoreCustomerRequest": "App\\Http\\Requests\\StoreCustomerRequest",
                        "UpdateCustomerRequest": "App\\Http\\Requests\\UpdateCustomerRequest",
                        "Customer": "App\\Models\\Customer",
                        "RedirectResponse": "Illuminate\\Http\\RedirectResponse",
                        "Request": "Illuminate\\Http\\Request",
                        "View": "Illuminate\\View\\View",
                        "Excel": "Maatwebsite\\Excel\\Facades\\Excel"
                    },
                    "external_method_calls": [
                        {
                            "property": "customerService",
                            "method": "getCustomers",
                            "call_pattern": "$this->customerService->getCustomers()"
                        },
                        {
                            "property": "customerService",
                            "method": "createCustomer",
                            "call_pattern": "$this->customerService->createCustomer()"
                        },
                        {
                            "property": "customerService",
                            "method": "updateCustomerStatus",
                            "call_pattern": "$this->customerService->updateCustomerStatus()"
                        },
                        {
                            "property": "customerService",
                            "method": "updateCustomer",
                            "call_pattern": "$this->customerService->updateCustomer()"
                        },
                        {
                            "property": "customerService",
                            "method": "deleteCustomer",
                            "call_pattern": "$this->customerService->deleteCustomer()"
                        },
                        {
                            "property": "customerService",
                            "method": "sendOnboardingMessage",
                            "call_pattern": "$this->customerService->sendOnboardingMessage()"
                        }
                    ]
                },
                "dependency_count": 1
            },
            {
                "class": "CustomerInsuranceController",
                "file_path": "app/Http/Controllers/CustomerInsuranceController.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "CustomerInsuranceServiceInterface",
                            "injection_type": "interface"
                        }
                    ],
                    "imports": {
                        "CustomerInsuranceServiceInterface": "App\\Contracts\\Services\\CustomerInsuranceServiceInterface",
                        "Customer": "App\\Models\\Customer",
                        "CustomerInsurance": "App\\Models\\CustomerInsurance",
                        "WhatsAppApiTrait": "WhatsAppApiTrait",
                        "Request": "Illuminate\\Http\\Request",
                        "Validator": "Illuminate\\Support\\Facades\\Validator"
                    },
                    "external_method_calls": {
                        "0": {
                            "property": "customerInsuranceService",
                            "method": "getCustomerInsurances",
                            "call_pattern": "$this->customerInsuranceService->getCustomerInsurances()"
                        },
                        "1": {
                            "property": "customerInsuranceService",
                            "method": "getFormData",
                            "call_pattern": "$this->customerInsuranceService->getFormData()"
                        },
                        "2": {
                            "property": "customerInsuranceService",
                            "method": "getStoreValidationRules",
                            "call_pattern": "$this->customerInsuranceService->getStoreValidationRules()"
                        },
                        "3": {
                            "property": "customerInsuranceService",
                            "method": "prepareStorageData",
                            "call_pattern": "$this->customerInsuranceService->prepareStorageData()"
                        },
                        "4": {
                            "property": "customerInsuranceService",
                            "method": "createCustomerInsurance",
                            "call_pattern": "$this->customerInsuranceService->createCustomerInsurance()"
                        },
                        "5": {
                            "property": "customerInsuranceService",
                            "method": "handleFileUpload",
                            "call_pattern": "$this->customerInsuranceService->handleFileUpload()"
                        },
                        "6": {
                            "property": "customerInsuranceService",
                            "method": "sendWhatsAppDocument",
                            "call_pattern": "$this->customerInsuranceService->sendWhatsAppDocument()"
                        },
                        "7": {
                            "property": "customerInsuranceService",
                            "method": "updateStatus",
                            "call_pattern": "$this->customerInsuranceService->updateStatus()"
                        },
                        "10": {
                            "property": "customerInsuranceService",
                            "method": "sendRenewalReminderWhatsApp",
                            "call_pattern": "$this->customerInsuranceService->sendRenewalReminderWhatsApp()"
                        },
                        "11": {
                            "property": "customerInsuranceService",
                            "method": "getUpdateValidationRules",
                            "call_pattern": "$this->customerInsuranceService->getUpdateValidationRules()"
                        },
                        "13": {
                            "property": "customerInsuranceService",
                            "method": "updateCustomerInsurance",
                            "call_pattern": "$this->customerInsuranceService->updateCustomerInsurance()"
                        },
                        "15": {
                            "property": "customerInsuranceService",
                            "method": "deleteCustomerInsurance",
                            "call_pattern": "$this->customerInsuranceService->deleteCustomerInsurance()"
                        },
                        "16": {
                            "property": "customerInsuranceService",
                            "method": "exportCustomerInsurances",
                            "call_pattern": "$this->customerInsuranceService->exportCustomerInsurances()"
                        },
                        "18": {
                            "property": "customerInsuranceService",
                            "method": "getRenewalValidationRules",
                            "call_pattern": "$this->customerInsuranceService->getRenewalValidationRules()"
                        },
                        "20": {
                            "property": "customerInsuranceService",
                            "method": "renewPolicy",
                            "call_pattern": "$this->customerInsuranceService->renewPolicy()"
                        }
                    }
                },
                "dependency_count": 1
            },
            {
                "class": "FamilyGroupController",
                "file_path": "app/Http/Controllers/FamilyGroupController.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "FamilyGroupServiceInterface",
                            "injection_type": "interface"
                        },
                        {
                            "type": "constructor_injection",
                            "class": "CustomerRepositoryInterface",
                            "injection_type": "interface"
                        }
                    ],
                    "imports": {
                        "FamilyGroupServiceInterface": "App\\Contracts\\Services\\FamilyGroupServiceInterface",
                        "CustomerRepositoryInterface": "App\\Contracts\\Repositories\\CustomerRepositoryInterface",
                        "FamilyGroup": "App\\Models\\FamilyGroup",
                        "FamilyMember": "App\\Models\\FamilyMember",
                        "Customer": "App\\Models\\Customer",
                        "Request": "Illuminate\\Http\\Request",
                        "Validator": "Illuminate\\Support\\Facades\\Validator",
                        "DB": "Illuminate\\Support\\Facades\\DB",
                        "($familyGroups) {\r\n                $file = fopen('php://output', 'w')": "($familyGroups) {\r\n                $file = fopen('php://output', 'w')"
                    },
                    "external_method_calls": {
                        "0": {
                            "property": "familyGroupService",
                            "method": "getFamilyGroups",
                            "call_pattern": "$this->familyGroupService->getFamilyGroups()"
                        },
                        "1": {
                            "property": "familyGroupService",
                            "method": "cleanupOrphanedRecords",
                            "call_pattern": "$this->familyGroupService->cleanupOrphanedRecords()"
                        },
                        "2": {
                            "property": "familyGroupService",
                            "method": "getAvailableCustomers",
                            "call_pattern": "$this->familyGroupService->getAvailableCustomers()"
                        },
                        "3": {
                            "property": "familyGroupService",
                            "method": "createFamilyGroup",
                            "call_pattern": "$this->familyGroupService->createFamilyGroup()"
                        },
                        "4": {
                            "property": "familyGroupService",
                            "method": "getFamilyGroupWithMembers",
                            "call_pattern": "$this->familyGroupService->getFamilyGroupWithMembers()"
                        },
                        "8": {
                            "property": "familyGroupService",
                            "method": "updateFamilyGroup",
                            "call_pattern": "$this->familyGroupService->updateFamilyGroup()"
                        },
                        "9": {
                            "property": "familyGroupService",
                            "method": "deleteFamilyGroup",
                            "call_pattern": "$this->familyGroupService->deleteFamilyGroup()"
                        },
                        "10": {
                            "property": "familyGroupService",
                            "method": "updateFamilyGroupStatus",
                            "call_pattern": "$this->familyGroupService->updateFamilyGroupStatus()"
                        },
                        "11": {
                            "property": "familyGroupService",
                            "method": "getAllFamilyGroupsForExport",
                            "call_pattern": "$this->familyGroupService->getAllFamilyGroupsForExport()"
                        },
                        "12": {
                            "property": "familyGroupService",
                            "method": "removeFamilyMemberByObject",
                            "call_pattern": "$this->familyGroupService->removeFamilyMemberByObject()"
                        }
                    }
                },
                "dependency_count": 2
            },
            {
                "class": "FuelTypeController",
                "file_path": "app/Http/Controllers/FuelTypeController.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "FuelTypeService",
                            "injection_type": "concrete"
                        }
                    ],
                    "imports": {
                        "FuelTypesExport": "App\\Exports\\FuelTypesExport",
                        "FuelType": "App\\Models\\FuelType",
                        "FuelTypeService": "App\\Services\\FuelTypeService",
                        "Request": "Illuminate\\Http\\Request",
                        "Validator": "Illuminate\\Support\\Facades\\Validator",
                        "Excel": "Maatwebsite\\Excel\\Facades\\Excel"
                    },
                    "external_method_calls": [
                        {
                            "property": "fuelTypeService",
                            "method": "createFuelType",
                            "call_pattern": "$this->fuelTypeService->createFuelType()"
                        },
                        {
                            "property": "fuelTypeService",
                            "method": "updateStatus",
                            "call_pattern": "$this->fuelTypeService->updateStatus()"
                        },
                        {
                            "property": "fuelTypeService",
                            "method": "updateFuelType",
                            "call_pattern": "$this->fuelTypeService->updateFuelType()"
                        },
                        {
                            "property": "fuelTypeService",
                            "method": "deleteFuelType",
                            "call_pattern": "$this->fuelTypeService->deleteFuelType()"
                        }
                    ]
                },
                "dependency_count": 1
            },
            {
                "class": "HealthController",
                "file_path": "app/Http/Controllers/HealthController.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "HealthCheckService",
                            "injection_type": "concrete"
                        },
                        {
                            "type": "constructor_injection",
                            "class": "LoggingService",
                            "injection_type": "concrete"
                        }
                    ],
                    "imports": {
                        "HealthCheckService": "App\\Services\\HealthCheckService",
                        "LoggingService": "App\\Services\\LoggingService",
                        "JsonResponse": "Illuminate\\Http\\JsonResponse",
                        "Request": "Illuminate\\Http\\Request"
                    },
                    "external_method_calls": [
                        {
                            "property": "healthService",
                            "method": "runHealthChecks",
                            "call_pattern": "$this->healthService->runHealthChecks()"
                        },
                        {
                            "property": "healthService",
                            "method": "getSystemMetrics",
                            "call_pattern": "$this->healthService->getSystemMetrics()"
                        },
                        {
                            "property": "healthService",
                            "method": "checkDatabase",
                            "call_pattern": "$this->healthService->checkDatabase()"
                        },
                        {
                            "property": "healthService",
                            "method": "checkCache",
                            "call_pattern": "$this->healthService->checkCache()"
                        }
                    ]
                },
                "dependency_count": 2
            },
            {
                "class": "HomeController",
                "file_path": "app/Http/Controllers/HomeController.php",
                "dependencies": {
                    "constructor_dependencies": [],
                    "imports": {
                        "Customer": "App\\Models\\Customer",
                        "CustomerInsurance": "App\\Models\\CustomerInsurance",
                        "User": "App\\Models\\User",
                        "MatchOldPassword": "App\\Rules\\MatchOldPassword",
                        "Request": "Illuminate\\Http\\Request",
                        "Carbon": "Illuminate\\Support\\Carbon",
                        "Auth": "Illuminate\\Support\\Facades\\Auth",
                        "DB": "Illuminate\\Support\\Facades\\DB",
                        "Hash": "Illuminate\\Support\\Facades\\Hash"
                    },
                    "external_method_calls": []
                },
                "dependency_count": 0
            },
            {
                "class": "InsuranceCompanyController",
                "file_path": "app/Http/Controllers/InsuranceCompanyController.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "InsuranceCompanyServiceInterface",
                            "injection_type": "interface"
                        }
                    ],
                    "imports": {
                        "InsuranceCompanyServiceInterface": "App\\Contracts\\Services\\InsuranceCompanyServiceInterface",
                        "InsuranceCompany": "App\\Models\\InsuranceCompany",
                        "Request": "Illuminate\\Http\\Request"
                    },
                    "external_method_calls": [
                        {
                            "property": "insuranceCompanyService",
                            "method": "getInsuranceCompanies",
                            "call_pattern": "$this->insuranceCompanyService->getInsuranceCompanies()"
                        },
                        {
                            "property": "insuranceCompanyService",
                            "method": "createInsuranceCompany",
                            "call_pattern": "$this->insuranceCompanyService->createInsuranceCompany()"
                        },
                        {
                            "property": "insuranceCompanyService",
                            "method": "updateStatus",
                            "call_pattern": "$this->insuranceCompanyService->updateStatus()"
                        },
                        {
                            "property": "insuranceCompanyService",
                            "method": "updateInsuranceCompany",
                            "call_pattern": "$this->insuranceCompanyService->updateInsuranceCompany()"
                        },
                        {
                            "property": "insuranceCompanyService",
                            "method": "deleteInsuranceCompany",
                            "call_pattern": "$this->insuranceCompanyService->deleteInsuranceCompany()"
                        },
                        {
                            "property": "insuranceCompanyService",
                            "method": "exportInsuranceCompanies",
                            "call_pattern": "$this->insuranceCompanyService->exportInsuranceCompanies()"
                        }
                    ]
                },
                "dependency_count": 1
            },
            {
                "class": "MarketingWhatsAppController",
                "file_path": "app/Http/Controllers/MarketingWhatsAppController.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "MarketingWhatsAppServiceInterface",
                            "injection_type": "interface"
                        }
                    ],
                    "imports": {
                        "MarketingWhatsAppServiceInterface": "App\\Contracts\\Services\\MarketingWhatsAppServiceInterface",
                        "Request": "Illuminate\\Http\\Request",
                        "Validator": "Illuminate\\Support\\Facades\\Validator"
                    },
                    "external_method_calls": [
                        {
                            "property": "marketingWhatsAppService",
                            "method": "getActiveCustomers",
                            "call_pattern": "$this->marketingWhatsAppService->getActiveCustomers()"
                        },
                        {
                            "property": "marketingWhatsAppService",
                            "method": "sendMarketingCampaign",
                            "call_pattern": "$this->marketingWhatsAppService->sendMarketingCampaign()"
                        },
                        {
                            "property": "marketingWhatsAppService",
                            "method": "previewCustomerList",
                            "call_pattern": "$this->marketingWhatsAppService->previewCustomerList()"
                        }
                    ]
                },
                "dependency_count": 1
            },
            {
                "class": "PermissionsController",
                "file_path": "app/Http/Controllers/PermissionsController.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "PermissionRepositoryInterface",
                            "injection_type": "interface"
                        }
                    ],
                    "imports": {
                        "PermissionRepositoryInterface": "App\\Contracts\\Repositories\\PermissionRepositoryInterface",
                        "Request": "Illuminate\\Http\\Request",
                        "DB": "Illuminate\\Support\\Facades\\DB"
                    },
                    "external_method_calls": {
                        "0": {
                            "property": "permissionRepository",
                            "method": "getPermissionsWithFilters",
                            "call_pattern": "$this->permissionRepository->getPermissionsWithFilters()"
                        },
                        "1": {
                            "property": "permissionRepository",
                            "method": "create",
                            "call_pattern": "$this->permissionRepository->create()"
                        },
                        "2": {
                            "property": "permissionRepository",
                            "method": "getPermissionWithRoles",
                            "call_pattern": "$this->permissionRepository->getPermissionWithRoles()"
                        },
                        "3": {
                            "property": "permissionRepository",
                            "method": "findById",
                            "call_pattern": "$this->permissionRepository->findById()"
                        },
                        "5": {
                            "property": "permissionRepository",
                            "method": "update",
                            "call_pattern": "$this->permissionRepository->update()"
                        },
                        "7": {
                            "property": "permissionRepository",
                            "method": "delete",
                            "call_pattern": "$this->permissionRepository->delete()"
                        }
                    }
                },
                "dependency_count": 1
            },
            {
                "class": "PolicyTypeController",
                "file_path": "app/Http/Controllers/PolicyTypeController.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "PolicyTypeService",
                            "injection_type": "concrete"
                        }
                    ],
                    "imports": {
                        "PolicyType": "App\\Models\\PolicyType",
                        "PolicyTypeService": "App\\Services\\PolicyTypeService",
                        "Request": "Illuminate\\Http\\Request",
                        "PolicyTypesExport": "App\\Exports\\PolicyTypesExport",
                        "Excel": "Maatwebsite\\Excel\\Facades\\Excel",
                        "Validator": "Illuminate\\Support\\Facades\\Validator"
                    },
                    "external_method_calls": [
                        {
                            "property": "policyTypeService",
                            "method": "createPolicyType",
                            "call_pattern": "$this->policyTypeService->createPolicyType()"
                        },
                        {
                            "property": "policyTypeService",
                            "method": "updateStatus",
                            "call_pattern": "$this->policyTypeService->updateStatus()"
                        },
                        {
                            "property": "policyTypeService",
                            "method": "updatePolicyType",
                            "call_pattern": "$this->policyTypeService->updatePolicyType()"
                        },
                        {
                            "property": "policyTypeService",
                            "method": "deletePolicyType",
                            "call_pattern": "$this->policyTypeService->deletePolicyType()"
                        }
                    ]
                },
                "dependency_count": 1
            },
            {
                "class": "PremiumTypeController",
                "file_path": "app/Http/Controllers/PremiumTypeController.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "PremiumTypeService",
                            "injection_type": "concrete"
                        }
                    ],
                    "imports": {
                        "PremiumType": "App\\Models\\PremiumType",
                        "PremiumTypeService": "App\\Services\\PremiumTypeService",
                        "Request": "Illuminate\\Http\\Request",
                        "PremiumTypesExport": "App\\Exports\\PremiumTypesExport",
                        "Excel": "Maatwebsite\\Excel\\Facades\\Excel",
                        "Validator": "Illuminate\\Support\\Facades\\Validator"
                    },
                    "external_method_calls": [
                        {
                            "property": "premiumTypeService",
                            "method": "createPremiumType",
                            "call_pattern": "$this->premiumTypeService->createPremiumType()"
                        },
                        {
                            "property": "premiumTypeService",
                            "method": "updateStatus",
                            "call_pattern": "$this->premiumTypeService->updateStatus()"
                        },
                        {
                            "property": "premiumTypeService",
                            "method": "updatePremiumType",
                            "call_pattern": "$this->premiumTypeService->updatePremiumType()"
                        },
                        {
                            "property": "premiumTypeService",
                            "method": "deletePremiumType",
                            "call_pattern": "$this->premiumTypeService->deletePremiumType()"
                        }
                    ]
                },
                "dependency_count": 1
            },
            {
                "class": "QuotationController",
                "file_path": "app/Http/Controllers/QuotationController.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "QuotationServiceInterface",
                            "injection_type": "interface"
                        }
                    ],
                    "imports": {
                        "QuotationServiceInterface": "App\\Contracts\\Services\\QuotationServiceInterface",
                        "CreateQuotationRequest": "App\\Http\\Requests\\CreateQuotationRequest",
                        "UpdateQuotationRequest": "App\\Http\\Requests\\UpdateQuotationRequest",
                        "Quotation": "App\\Models\\Quotation",
                        "RedirectResponse": "Illuminate\\Http\\RedirectResponse",
                        "Request": "Illuminate\\Http\\Request",
                        "DB": "Illuminate\\Support\\Facades\\DB",
                        "View": "Illuminate\\View\\View"
                    },
                    "external_method_calls": {
                        "0": {
                            "property": "quotationService",
                            "method": "getQuotations",
                            "call_pattern": "$this->quotationService->getQuotations()"
                        },
                        "1": {
                            "property": "quotationService",
                            "method": "getQuotationFormData",
                            "call_pattern": "$this->quotationService->getQuotationFormData()"
                        },
                        "2": {
                            "property": "quotationService",
                            "method": "createQuotation",
                            "call_pattern": "$this->quotationService->createQuotation()"
                        },
                        "4": {
                            "property": "quotationService",
                            "method": "updateQuotationWithCompanies",
                            "call_pattern": "$this->quotationService->updateQuotationWithCompanies()"
                        },
                        "5": {
                            "property": "quotationService",
                            "method": "generateCompanyQuotes",
                            "call_pattern": "$this->quotationService->generateCompanyQuotes()"
                        },
                        "6": {
                            "property": "quotationService",
                            "method": "sendQuotationViaWhatsApp",
                            "call_pattern": "$this->quotationService->sendQuotationViaWhatsApp()"
                        },
                        "7": {
                            "property": "quotationService",
                            "method": "generatePdf",
                            "call_pattern": "$this->quotationService->generatePdf()"
                        },
                        "9": {
                            "property": "quotationService",
                            "method": "deleteQuotation",
                            "call_pattern": "$this->quotationService->deleteQuotation()"
                        }
                    }
                },
                "dependency_count": 1
            },
            {
                "class": "ReferenceUsersController",
                "file_path": "app/Http/Controllers/ReferenceUsersController.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "ReferenceUserService",
                            "injection_type": "concrete"
                        }
                    ],
                    "imports": {
                        "Request": "Illuminate\\Http\\Request",
                        "ReferenceUser": "App\\Models\\ReferenceUser",
                        "ReferenceUserService": "App\\Services\\ReferenceUserService",
                        "Excel": "Maatwebsite\\Excel\\Facades\\Excel",
                        "ReferenceUsersExport": "App\\Exports\\ReferenceUsersExport",
                        "Validator": "Illuminate\\Support\\Facades\\Validator",
                        "Throwable": "Throwable"
                    },
                    "external_method_calls": [
                        {
                            "property": "referenceUserService",
                            "method": "createReferenceUser",
                            "call_pattern": "$this->referenceUserService->createReferenceUser()"
                        },
                        {
                            "property": "referenceUserService",
                            "method": "updateStatus",
                            "call_pattern": "$this->referenceUserService->updateStatus()"
                        },
                        {
                            "property": "referenceUserService",
                            "method": "updateReferenceUser",
                            "call_pattern": "$this->referenceUserService->updateReferenceUser()"
                        },
                        {
                            "property": "referenceUserService",
                            "method": "deleteReferenceUser",
                            "call_pattern": "$this->referenceUserService->deleteReferenceUser()"
                        }
                    ]
                },
                "dependency_count": 1
            },
            {
                "class": "RelationshipManagerController",
                "file_path": "app/Http/Controllers/RelationshipManagerController.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "RelationshipManagerService",
                            "injection_type": "concrete"
                        }
                    ],
                    "imports": {
                        "RelationshipManager": "App\\Models\\RelationshipManager",
                        "RelationshipManagerService": "App\\Services\\RelationshipManagerService",
                        "Request": "Illuminate\\Http\\Request",
                        "RelationshipManagersExport": "App\\Exports\\RelationshipManagersExport",
                        "Excel": "Maatwebsite\\Excel\\Facades\\Excel",
                        "Validator": "Illuminate\\Support\\Facades\\Validator"
                    },
                    "external_method_calls": [
                        {
                            "property": "relationshipManagerService",
                            "method": "createRelationshipManager",
                            "call_pattern": "$this->relationshipManagerService->createRelationshipManager()"
                        },
                        {
                            "property": "relationshipManagerService",
                            "method": "updateStatus",
                            "call_pattern": "$this->relationshipManagerService->updateStatus()"
                        },
                        {
                            "property": "relationshipManagerService",
                            "method": "updateRelationshipManager",
                            "call_pattern": "$this->relationshipManagerService->updateRelationshipManager()"
                        },
                        {
                            "property": "relationshipManagerService",
                            "method": "deleteRelationshipManager",
                            "call_pattern": "$this->relationshipManagerService->deleteRelationshipManager()"
                        }
                    ]
                },
                "dependency_count": 1
            },
            {
                "class": "ReportController",
                "file_path": "app/Http/Controllers/ReportController.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "ReportServiceInterface",
                            "injection_type": "interface"
                        }
                    ],
                    "imports": {
                        "ReportServiceInterface": "App\\Contracts\\Services\\ReportServiceInterface",
                        "Report": "App\\Models\\Report",
                        "Request": "Illuminate\\Http\\Request"
                    },
                    "external_method_calls": {
                        "0": {
                            "property": "reportService",
                            "method": "getInitialData",
                            "call_pattern": "$this->reportService->getInitialData()"
                        },
                        "1": {
                            "property": "reportService",
                            "method": "generateCrossSellingReport",
                            "call_pattern": "$this->reportService->generateCrossSellingReport()"
                        },
                        "2": {
                            "property": "reportService",
                            "method": "generateCustomerInsuranceReport",
                            "call_pattern": "$this->reportService->generateCustomerInsuranceReport()"
                        },
                        "4": {
                            "property": "reportService",
                            "method": "exportCrossSellingReport",
                            "call_pattern": "$this->reportService->exportCrossSellingReport()"
                        },
                        "5": {
                            "property": "reportService",
                            "method": "exportCustomerInsuranceReport",
                            "call_pattern": "$this->reportService->exportCustomerInsuranceReport()"
                        },
                        "7": {
                            "property": "reportService",
                            "method": "saveUserReportColumns",
                            "call_pattern": "$this->reportService->saveUserReportColumns()"
                        },
                        "8": {
                            "property": "reportService",
                            "method": "loadUserReportColumns",
                            "call_pattern": "$this->reportService->loadUserReportColumns()"
                        }
                    }
                },
                "dependency_count": 1
            },
            {
                "class": "RolesController",
                "file_path": "app/Http/Controllers/RolesController.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "RoleRepositoryInterface",
                            "injection_type": "interface"
                        },
                        {
                            "type": "constructor_injection",
                            "class": "PermissionRepositoryInterface",
                            "injection_type": "interface"
                        }
                    ],
                    "imports": {
                        "RoleRepositoryInterface": "App\\Contracts\\Repositories\\RoleRepositoryInterface",
                        "PermissionRepositoryInterface": "App\\Contracts\\Repositories\\PermissionRepositoryInterface",
                        "Request": "Illuminate\\Http\\Request",
                        "DB": "Illuminate\\Support\\Facades\\DB"
                    },
                    "external_method_calls": {
                        "0": {
                            "property": "roleRepository",
                            "method": "getRolesWithFilters",
                            "call_pattern": "$this->roleRepository->getRolesWithFilters()"
                        },
                        "1": {
                            "property": "permissionRepository",
                            "method": "getPermissionsByGuard",
                            "call_pattern": "$this->permissionRepository->getPermissionsByGuard()"
                        },
                        "2": {
                            "property": "roleRepository",
                            "method": "create",
                            "call_pattern": "$this->roleRepository->create()"
                        },
                        "3": {
                            "property": "roleRepository",
                            "method": "getRoleWithPermissions",
                            "call_pattern": "$this->roleRepository->getRoleWithPermissions()"
                        },
                        "6": {
                            "property": "roleRepository",
                            "method": "findById",
                            "call_pattern": "$this->roleRepository->findById()"
                        },
                        "7": {
                            "property": "roleRepository",
                            "method": "update",
                            "call_pattern": "$this->roleRepository->update()"
                        },
                        "9": {
                            "property": "roleRepository",
                            "method": "delete",
                            "call_pattern": "$this->roleRepository->delete()"
                        }
                    }
                },
                "dependency_count": 2
            },
            {
                "class": "UserController",
                "file_path": "app/Http/Controllers/UserController.php",
                "dependencies": {
                    "constructor_dependencies": [
                        {
                            "type": "constructor_injection",
                            "class": "UserServiceInterface",
                            "injection_type": "interface"
                        }
                    ],
                    "imports": {
                        "User": "App\\Models\\User",
                        "Request": "Illuminate\\Http\\Request",
                        "Validator": "Illuminate\\Support\\Facades\\Validator",
                        "Excel": "Maatwebsite\\Excel\\Facades\\Excel",
                        "UserServiceInterface": "App\\Contracts\\Services\\UserServiceInterface"
                    },
                    "external_method_calls": {
                        "0": {
                            "property": "userService",
                            "method": "getUsers",
                            "call_pattern": "$this->userService->getUsers()"
                        },
                        "1": {
                            "property": "userService",
                            "method": "getRoles",
                            "call_pattern": "$this->userService->getRoles()"
                        },
                        "2": {
                            "property": "userService",
                            "method": "getStoreValidationRules",
                            "call_pattern": "$this->userService->getStoreValidationRules()"
                        },
                        "3": {
                            "property": "userService",
                            "method": "createUser",
                            "call_pattern": "$this->userService->createUser()"
                        },
                        "4": {
                            "property": "userService",
                            "method": "assignRoles",
                            "call_pattern": "$this->userService->assignRoles()"
                        },
                        "5": {
                            "property": "userService",
                            "method": "updateStatus",
                            "call_pattern": "$this->userService->updateStatus()"
                        },
                        "7": {
                            "property": "userService",
                            "method": "getUpdateValidationRules",
                            "call_pattern": "$this->userService->getUpdateValidationRules()"
                        },
                        "8": {
                            "property": "userService",
                            "method": "getPasswordValidationRules",
                            "call_pattern": "$this->userService->getPasswordValidationRules()"
                        },
                        "9": {
                            "property": "userService",
                            "method": "updateUser",
                            "call_pattern": "$this->userService->updateUser()"
                        },
                        "11": {
                            "property": "userService",
                            "method": "changePassword",
                            "call_pattern": "$this->userService->changePassword()"
                        },
                        "12": {
                            "property": "userService",
                            "method": "deleteUser",
                            "call_pattern": "$this->userService->deleteUser()"
                        },
                        "13": {
                            "property": "userService",
                            "method": "exportUsers",
                            "call_pattern": "$this->userService->exportUsers()"
                        }
                    }
                },
                "dependency_count": 1
            }
        ],
        "models": []
    },
    "interface_implementations": {
        "repository_interfaces": [
            {
                "interface": "AddonCoverRepositoryInterface",
                "implementation": "AddonCoverRepository",
                "interface_file": "app/Contracts/Repositories/AddonCoverRepositoryInterface.php",
                "implementation_file": "app/Repositories/AddonCoverRepository.php",
                "implementation_exists": true
            },
            {
                "interface": "BaseRepositoryInterface",
                "implementation": "BaseRepository",
                "interface_file": "app/Contracts/Repositories/BaseRepositoryInterface.php",
                "implementation_file": "app/Repositories/BaseRepository.php",
                "implementation_exists": false
            },
            {
                "interface": "BranchRepositoryInterface",
                "implementation": "BranchRepository",
                "interface_file": "app/Contracts/Repositories/BranchRepositoryInterface.php",
                "implementation_file": "app/Repositories/BranchRepository.php",
                "implementation_exists": true
            },
            {
                "interface": "BrokerRepositoryInterface",
                "implementation": "BrokerRepository",
                "interface_file": "app/Contracts/Repositories/BrokerRepositoryInterface.php",
                "implementation_file": "app/Repositories/BrokerRepository.php",
                "implementation_exists": true
            },
            {
                "interface": "ClaimRepositoryInterface",
                "implementation": "ClaimRepository",
                "interface_file": "app/Contracts/Repositories/ClaimRepositoryInterface.php",
                "implementation_file": "app/Repositories/ClaimRepository.php",
                "implementation_exists": true
            },
            {
                "interface": "CustomerInsuranceRepositoryInterface",
                "implementation": "CustomerInsuranceRepository",
                "interface_file": "app/Contracts/Repositories/CustomerInsuranceRepositoryInterface.php",
                "implementation_file": "app/Repositories/CustomerInsuranceRepository.php",
                "implementation_exists": true
            },
            {
                "interface": "CustomerRepositoryInterface",
                "implementation": "CustomerRepository",
                "interface_file": "app/Contracts/Repositories/CustomerRepositoryInterface.php",
                "implementation_file": "app/Repositories/CustomerRepository.php",
                "implementation_exists": true
            },
            {
                "interface": "FamilyGroupRepositoryInterface",
                "implementation": "FamilyGroupRepository",
                "interface_file": "app/Contracts/Repositories/FamilyGroupRepositoryInterface.php",
                "implementation_file": "app/Repositories/FamilyGroupRepository.php",
                "implementation_exists": true
            },
            {
                "interface": "FuelTypeRepositoryInterface",
                "implementation": "FuelTypeRepository",
                "interface_file": "app/Contracts/Repositories/FuelTypeRepositoryInterface.php",
                "implementation_file": "app/Repositories/FuelTypeRepository.php",
                "implementation_exists": true
            },
            {
                "interface": "InsuranceCompanyRepositoryInterface",
                "implementation": "InsuranceCompanyRepository",
                "interface_file": "app/Contracts/Repositories/InsuranceCompanyRepositoryInterface.php",
                "implementation_file": "app/Repositories/InsuranceCompanyRepository.php",
                "implementation_exists": true
            },
            {
                "interface": "MarketingWhatsAppRepositoryInterface",
                "implementation": "MarketingWhatsAppRepository",
                "interface_file": "app/Contracts/Repositories/MarketingWhatsAppRepositoryInterface.php",
                "implementation_file": "app/Repositories/MarketingWhatsAppRepository.php",
                "implementation_exists": true
            },
            {
                "interface": "PermissionRepositoryInterface",
                "implementation": "PermissionRepository",
                "interface_file": "app/Contracts/Repositories/PermissionRepositoryInterface.php",
                "implementation_file": "app/Repositories/PermissionRepository.php",
                "implementation_exists": true
            },
            {
                "interface": "PolicyRepositoryInterface",
                "implementation": "PolicyRepository",
                "interface_file": "app/Contracts/Repositories/PolicyRepositoryInterface.php",
                "implementation_file": "app/Repositories/PolicyRepository.php",
                "implementation_exists": true
            },
            {
                "interface": "PolicyTypeRepositoryInterface",
                "implementation": "PolicyTypeRepository",
                "interface_file": "app/Contracts/Repositories/PolicyTypeRepositoryInterface.php",
                "implementation_file": "app/Repositories/PolicyTypeRepository.php",
                "implementation_exists": true
            },
            {
                "interface": "PremiumTypeRepositoryInterface",
                "implementation": "PremiumTypeRepository",
                "interface_file": "app/Contracts/Repositories/PremiumTypeRepositoryInterface.php",
                "implementation_file": "app/Repositories/PremiumTypeRepository.php",
                "implementation_exists": true
            },
            {
                "interface": "QuotationRepositoryInterface",
                "implementation": "QuotationRepository",
                "interface_file": "app/Contracts/Repositories/QuotationRepositoryInterface.php",
                "implementation_file": "app/Repositories/QuotationRepository.php",
                "implementation_exists": true
            },
            {
                "interface": "ReferenceUserRepositoryInterface",
                "implementation": "ReferenceUserRepository",
                "interface_file": "app/Contracts/Repositories/ReferenceUserRepositoryInterface.php",
                "implementation_file": "app/Repositories/ReferenceUserRepository.php",
                "implementation_exists": true
            },
            {
                "interface": "RelationshipManagerRepositoryInterface",
                "implementation": "RelationshipManagerRepository",
                "interface_file": "app/Contracts/Repositories/RelationshipManagerRepositoryInterface.php",
                "implementation_file": "app/Repositories/RelationshipManagerRepository.php",
                "implementation_exists": true
            },
            {
                "interface": "RoleRepositoryInterface",
                "implementation": "RoleRepository",
                "interface_file": "app/Contracts/Repositories/RoleRepositoryInterface.php",
                "implementation_file": "app/Repositories/RoleRepository.php",
                "implementation_exists": true
            },
            {
                "interface": "UserRepositoryInterface",
                "implementation": "UserRepository",
                "interface_file": "app/Contracts/Repositories/UserRepositoryInterface.php",
                "implementation_file": "app/Repositories/UserRepository.php",
                "implementation_exists": true
            }
        ],
        "service_interfaces": [
            {
                "interface": "AddonCoverServiceInterface",
                "implementation": "AddonCoverService",
                "interface_file": "app/Contracts/Services/AddonCoverServiceInterface.php",
                "implementation_file": "app/Services/AddonCoverService.php",
                "implementation_exists": true
            },
            {
                "interface": "BranchServiceInterface",
                "implementation": "BranchService",
                "interface_file": "app/Contracts/Services/BranchServiceInterface.php",
                "implementation_file": "app/Services/BranchService.php",
                "implementation_exists": true
            },
            {
                "interface": "BrokerServiceInterface",
                "implementation": "BrokerService",
                "interface_file": "app/Contracts/Services/BrokerServiceInterface.php",
                "implementation_file": "app/Services/BrokerService.php",
                "implementation_exists": true
            },
            {
                "interface": "ClaimServiceInterface",
                "implementation": "ClaimService",
                "interface_file": "app/Contracts/Services/ClaimServiceInterface.php",
                "implementation_file": "app/Services/ClaimService.php",
                "implementation_exists": true
            },
            {
                "interface": "CustomerInsuranceServiceInterface",
                "implementation": "CustomerInsuranceService",
                "interface_file": "app/Contracts/Services/CustomerInsuranceServiceInterface.php",
                "implementation_file": "app/Services/CustomerInsuranceService.php",
                "implementation_exists": true
            },
            {
                "interface": "CustomerServiceInterface",
                "implementation": "CustomerService",
                "interface_file": "app/Contracts/Services/CustomerServiceInterface.php",
                "implementation_file": "app/Services/CustomerService.php",
                "implementation_exists": true
            },
            {
                "interface": "FamilyGroupServiceInterface",
                "implementation": "FamilyGroupService",
                "interface_file": "app/Contracts/Services/FamilyGroupServiceInterface.php",
                "implementation_file": "app/Services/FamilyGroupService.php",
                "implementation_exists": true
            },
            {
                "interface": "FuelTypeServiceInterface",
                "implementation": "FuelTypeService",
                "interface_file": "app/Contracts/Services/FuelTypeServiceInterface.php",
                "implementation_file": "app/Services/FuelTypeService.php",
                "implementation_exists": true
            },
            {
                "interface": "InsuranceCompanyServiceInterface",
                "implementation": "InsuranceCompanyService",
                "interface_file": "app/Contracts/Services/InsuranceCompanyServiceInterface.php",
                "implementation_file": "app/Services/InsuranceCompanyService.php",
                "implementation_exists": true
            },
            {
                "interface": "MarketingWhatsAppServiceInterface",
                "implementation": "MarketingWhatsAppService",
                "interface_file": "app/Contracts/Services/MarketingWhatsAppServiceInterface.php",
                "implementation_file": "app/Services/MarketingWhatsAppService.php",
                "implementation_exists": true
            },
            {
                "interface": "PermissionServiceInterface",
                "implementation": "PermissionService",
                "interface_file": "app/Contracts/Services/PermissionServiceInterface.php",
                "implementation_file": "app/Services/PermissionService.php",
                "implementation_exists": true
            },
            {
                "interface": "PolicyServiceInterface",
                "implementation": "PolicyService",
                "interface_file": "app/Contracts/Services/PolicyServiceInterface.php",
                "implementation_file": "app/Services/PolicyService.php",
                "implementation_exists": true
            },
            {
                "interface": "PolicyTypeServiceInterface",
                "implementation": "PolicyTypeService",
                "interface_file": "app/Contracts/Services/PolicyTypeServiceInterface.php",
                "implementation_file": "app/Services/PolicyTypeService.php",
                "implementation_exists": true
            },
            {
                "interface": "PremiumTypeServiceInterface",
                "implementation": "PremiumTypeService",
                "interface_file": "app/Contracts/Services/PremiumTypeServiceInterface.php",
                "implementation_file": "app/Services/PremiumTypeService.php",
                "implementation_exists": true
            },
            {
                "interface": "QuotationServiceInterface",
                "implementation": "QuotationService",
                "interface_file": "app/Contracts/Services/QuotationServiceInterface.php",
                "implementation_file": "app/Services/QuotationService.php",
                "implementation_exists": true
            },
            {
                "interface": "ReferenceUserServiceInterface",
                "implementation": "ReferenceUserService",
                "interface_file": "app/Contracts/Services/ReferenceUserServiceInterface.php",
                "implementation_file": "app/Services/ReferenceUserService.php",
                "implementation_exists": true
            },
            {
                "interface": "RelationshipManagerServiceInterface",
                "implementation": "RelationshipManagerService",
                "interface_file": "app/Contracts/Services/RelationshipManagerServiceInterface.php",
                "implementation_file": "app/Services/RelationshipManagerService.php",
                "implementation_exists": true
            },
            {
                "interface": "ReportServiceInterface",
                "implementation": "ReportService",
                "interface_file": "app/Contracts/Services/ReportServiceInterface.php",
                "implementation_file": "app/Services/ReportService.php",
                "implementation_exists": true
            },
            {
                "interface": "RoleServiceInterface",
                "implementation": "RoleService",
                "interface_file": "app/Contracts/Services/RoleServiceInterface.php",
                "implementation_file": "app/Services/RoleService.php",
                "implementation_exists": true
            },
            {
                "interface": "UserServiceInterface",
                "implementation": "UserService",
                "interface_file": "app/Contracts/Services/UserServiceInterface.php",
                "implementation_file": "app/Services/UserService.php",
                "implementation_exists": true
            }
        ]
    },
    "service_provider_bindings": [
        {
            "interface": "AddonCoverRepositoryInterface",
            "implementation": "AddonCoverRepository",
            "binding_type": "repository"
        },
        {
            "interface": "BranchRepositoryInterface",
            "implementation": "BranchRepository",
            "binding_type": "repository"
        },
        {
            "interface": "BrokerRepositoryInterface",
            "implementation": "BrokerRepository",
            "binding_type": "repository"
        },
        {
            "interface": "ClaimRepositoryInterface",
            "implementation": "ClaimRepository",
            "binding_type": "repository"
        },
        {
            "interface": "CustomerRepositoryInterface",
            "implementation": "CustomerRepository",
            "binding_type": "repository"
        },
        {
            "interface": "CustomerInsuranceRepositoryInterface",
            "implementation": "CustomerInsuranceRepository",
            "binding_type": "repository"
        },
        {
            "interface": "FamilyGroupRepositoryInterface",
            "implementation": "FamilyGroupRepository",
            "binding_type": "repository"
        },
        {
            "interface": "FuelTypeRepositoryInterface",
            "implementation": "FuelTypeRepository",
            "binding_type": "repository"
        },
        {
            "interface": "InsuranceCompanyRepositoryInterface",
            "implementation": "InsuranceCompanyRepository",
            "binding_type": "repository"
        },
        {
            "interface": "MarketingWhatsAppRepositoryInterface",
            "implementation": "MarketingWhatsAppRepository",
            "binding_type": "repository"
        },
        {
            "interface": "PermissionRepositoryInterface",
            "implementation": "PermissionRepository",
            "binding_type": "repository"
        },
        {
            "interface": "PolicyRepositoryInterface",
            "implementation": "PolicyRepository",
            "binding_type": "repository"
        },
        {
            "interface": "PolicyTypeRepositoryInterface",
            "implementation": "PolicyTypeRepository",
            "binding_type": "repository"
        },
        {
            "interface": "PremiumTypeRepositoryInterface",
            "implementation": "PremiumTypeRepository",
            "binding_type": "repository"
        },
        {
            "interface": "QuotationRepositoryInterface",
            "implementation": "QuotationRepository",
            "binding_type": "repository"
        },
        {
            "interface": "ReferenceUserRepositoryInterface",
            "implementation": "ReferenceUserRepository",
            "binding_type": "repository"
        },
        {
            "interface": "RelationshipManagerRepositoryInterface",
            "implementation": "RelationshipManagerRepository",
            "binding_type": "repository"
        },
        {
            "interface": "RoleRepositoryInterface",
            "implementation": "RoleRepository",
            "binding_type": "repository"
        },
        {
            "interface": "UserRepositoryInterface",
            "implementation": "UserRepository",
            "binding_type": "repository"
        },
        {
            "interface": "AddonCoverServiceInterface",
            "implementation": "AddonCoverService",
            "binding_type": "service"
        },
        {
            "interface": "BranchServiceInterface",
            "implementation": "BranchService",
            "binding_type": "service"
        },
        {
            "interface": "BrokerServiceInterface",
            "implementation": "BrokerService",
            "binding_type": "service"
        },
        {
            "interface": "ClaimServiceInterface",
            "implementation": "ClaimService",
            "binding_type": "service"
        },
        {
            "interface": "CustomerServiceInterface",
            "implementation": "CustomerService",
            "binding_type": "service"
        },
        {
            "interface": "CustomerInsuranceServiceInterface",
            "implementation": "CustomerInsuranceService",
            "binding_type": "service"
        },
        {
            "interface": "FamilyGroupServiceInterface",
            "implementation": "FamilyGroupService",
            "binding_type": "service"
        },
        {
            "interface": "FuelTypeServiceInterface",
            "implementation": "FuelTypeService",
            "binding_type": "service"
        },
        {
            "interface": "InsuranceCompanyServiceInterface",
            "implementation": "InsuranceCompanyService",
            "binding_type": "service"
        },
        {
            "interface": "MarketingWhatsAppServiceInterface",
            "implementation": "MarketingWhatsAppService",
            "binding_type": "service"
        },
        {
            "interface": "PermissionServiceInterface",
            "implementation": "PermissionService",
            "binding_type": "service"
        },
        {
            "interface": "PolicyServiceInterface",
            "implementation": "PolicyService",
            "binding_type": "service"
        },
        {
            "interface": "PolicyTypeServiceInterface",
            "implementation": "PolicyTypeService",
            "binding_type": "service"
        },
        {
            "interface": "PremiumTypeServiceInterface",
            "implementation": "PremiumTypeService",
            "binding_type": "service"
        },
        {
            "interface": "QuotationServiceInterface",
            "implementation": "QuotationService",
            "binding_type": "service"
        },
        {
            "interface": "ReferenceUserServiceInterface",
            "implementation": "ReferenceUserService",
            "binding_type": "service"
        },
        {
            "interface": "RelationshipManagerServiceInterface",
            "implementation": "RelationshipManagerService",
            "binding_type": "service"
        },
        {
            "interface": "ReportServiceInterface",
            "implementation": "ReportService",
            "binding_type": "service"
        },
        {
            "interface": "RoleServiceInterface",
            "implementation": "RoleService",
            "binding_type": "service"
        },
        {
            "interface": "UserServiceInterface",
            "implementation": "UserService",
            "binding_type": "service"
        }
    ],
    "cross_component_relationships": {
        "service_to_repository": [
            {
                "service": "AddonCoverService",
                "repository": "AddonCoverRepositoryInterface",
                "injection_type": "interface"
            },
            {
                "service": "BranchService",
                "repository": "BranchRepositoryInterface",
                "injection_type": "interface"
            },
            {
                "service": "BrokerService",
                "repository": "BrokerRepositoryInterface",
                "injection_type": "interface"
            },
            {
                "service": "ClaimService",
                "repository": "ClaimRepositoryInterface",
                "injection_type": "interface"
            },
            {
                "service": "CustomerInsuranceService",
                "repository": "CustomerInsuranceRepositoryInterface",
                "injection_type": "interface"
            },
            {
                "service": "CustomerService",
                "repository": "CustomerRepositoryInterface",
                "injection_type": "interface"
            },
            {
                "service": "FamilyGroupService",
                "repository": "FamilyGroupRepositoryInterface",
                "injection_type": "interface"
            },
            {
                "service": "InsuranceCompanyService",
                "repository": "InsuranceCompanyRepositoryInterface",
                "injection_type": "interface"
            },
            {
                "service": "MarketingWhatsAppService",
                "repository": "CustomerRepositoryInterface",
                "injection_type": "interface"
            },
            {
                "service": "PermissionService",
                "repository": "PermissionRepositoryInterface",
                "injection_type": "interface"
            },
            {
                "service": "PermissionService",
                "repository": "RoleRepositoryInterface",
                "injection_type": "interface"
            },
            {
                "service": "PolicyService",
                "repository": "PolicyRepositoryInterface",
                "injection_type": "interface"
            },
            {
                "service": "QuotationService",
                "repository": "QuotationRepositoryInterface",
                "injection_type": "interface"
            },
            {
                "service": "RoleService",
                "repository": "RoleRepositoryInterface",
                "injection_type": "interface"
            },
            {
                "service": "RoleService",
                "repository": "UserRepositoryInterface",
                "injection_type": "interface"
            },
            {
                "service": "UserService",
                "repository": "UserRepositoryInterface",
                "injection_type": "interface"
            }
        ],
        "controller_to_service": [
            {
                "controller": "AddonCoverController",
                "service": "AddonCoverServiceInterface",
                "injection_type": "interface"
            },
            {
                "controller": "BrokerController",
                "service": "BrokerServiceInterface",
                "injection_type": "interface"
            },
            {
                "controller": "ClaimController",
                "service": "ClaimService",
                "injection_type": "concrete"
            },
            {
                "controller": "CustomerController",
                "service": "CustomerServiceInterface",
                "injection_type": "interface"
            },
            {
                "controller": "CustomerInsuranceController",
                "service": "CustomerInsuranceServiceInterface",
                "injection_type": "interface"
            },
            {
                "controller": "FamilyGroupController",
                "service": "FamilyGroupServiceInterface",
                "injection_type": "interface"
            },
            {
                "controller": "FuelTypeController",
                "service": "FuelTypeService",
                "injection_type": "concrete"
            },
            {
                "controller": "HealthController",
                "service": "HealthCheckService",
                "injection_type": "concrete"
            },
            {
                "controller": "HealthController",
                "service": "LoggingService",
                "injection_type": "concrete"
            },
            {
                "controller": "InsuranceCompanyController",
                "service": "InsuranceCompanyServiceInterface",
                "injection_type": "interface"
            },
            {
                "controller": "MarketingWhatsAppController",
                "service": "MarketingWhatsAppServiceInterface",
                "injection_type": "interface"
            },
            {
                "controller": "PolicyTypeController",
                "service": "PolicyTypeService",
                "injection_type": "concrete"
            },
            {
                "controller": "PremiumTypeController",
                "service": "PremiumTypeService",
                "injection_type": "concrete"
            },
            {
                "controller": "QuotationController",
                "service": "QuotationServiceInterface",
                "injection_type": "interface"
            },
            {
                "controller": "ReferenceUsersController",
                "service": "ReferenceUserService",
                "injection_type": "concrete"
            },
            {
                "controller": "RelationshipManagerController",
                "service": "RelationshipManagerService",
                "injection_type": "concrete"
            },
            {
                "controller": "ReportController",
                "service": "ReportServiceInterface",
                "injection_type": "interface"
            },
            {
                "controller": "UserController",
                "service": "UserServiceInterface",
                "injection_type": "interface"
            }
        ],
        "service_to_service": [],
        "repository_to_model": []
    },
    "architecture_compliance": {
        "layered_architecture_violations": [],
        "circular_dependencies": [],
        "interface_usage_score": 97.5,
        "dependency_injection_score": 100
    },
    "business_domain_mapping": [
        {
            "domain": "Insurance Management",
            "entities": [
                "Policy",
                "Claim",
                "Quotation",
                "AddonCover",
                "InsuranceCompany"
            ],
            "components": {
                "repositories": [
                    "PolicyRepository",
                    "PolicyTypeRepository",
                    "ClaimRepository",
                    "QuotationRepository",
                    "AddonCoverRepository",
                    "InsuranceCompanyRepository"
                ],
                "services": [
                    "ContentSecurityPolicyService",
                    "PolicyService",
                    "PolicyTypeService",
                    "ClaimService",
                    "QuotationService",
                    "AddonCoverService",
                    "InsuranceCompanyService"
                ],
                "controllers": [
                    "PolicyTypeController",
                    "ClaimController",
                    "QuotationController",
                    "AddonCoverController",
                    "InsuranceCompanyController"
                ],
                "models": []
            },
            "component_count": 18
        },
        {
            "domain": "Customer Management",
            "entities": [
                "Customer",
                "FamilyGroup",
                "CustomerInsurance"
            ],
            "components": {
                "repositories": [
                    "CustomerInsuranceRepository",
                    "CustomerRepository",
                    "FamilyGroupRepository",
                    "CustomerInsuranceRepository"
                ],
                "services": [
                    "CustomerInsuranceService",
                    "CustomerService",
                    "FamilyGroupService",
                    "CustomerInsuranceService"
                ],
                "controllers": [
                    "CustomerController",
                    "CustomerInsuranceController",
                    "FamilyGroupController",
                    "CustomerInsuranceController"
                ],
                "models": []
            },
            "component_count": 12
        },
        {
            "domain": "Broker Management",
            "entities": [
                "Broker",
                "Branch",
                "ReferenceUser",
                "RelationshipManager"
            ],
            "components": {
                "repositories": [
                    "BrokerRepository",
                    "BranchRepository",
                    "ReferenceUserRepository",
                    "RelationshipManagerRepository"
                ],
                "services": [
                    "BrokerService",
                    "BranchService",
                    "ReferenceUserService",
                    "RelationshipManagerService"
                ],
                "controllers": [
                    "BrokerController",
                    "BranchController",
                    "ReferenceUsersController",
                    "RelationshipManagerController"
                ],
                "models": []
            },
            "component_count": 12
        },
        {
            "domain": "System Administration",
            "entities": [
                "User",
                "Role",
                "Permission"
            ],
            "components": {
                "repositories": [
                    "ReferenceUserRepository",
                    "UserRepository",
                    "RoleRepository",
                    "PermissionRepository"
                ],
                "services": [
                    "ReferenceUserService",
                    "UserService",
                    "RoleService",
                    "PermissionService"
                ],
                "controllers": [
                    "ReferenceUsersController",
                    "UserController",
                    "RolesController",
                    "PermissionsController"
                ],
                "models": []
            },
            "component_count": 12
        },
        {
            "domain": "Supporting Data",
            "entities": [
                "PolicyType",
                "PremiumType",
                "FuelType",
                "MarketingWhatsApp"
            ],
            "components": {
                "repositories": [
                    "PolicyTypeRepository",
                    "PremiumTypeRepository",
                    "FuelTypeRepository",
                    "MarketingWhatsAppRepository"
                ],
                "services": [
                    "PolicyTypeService",
                    "PremiumTypeService",
                    "FuelTypeService",
                    "MarketingWhatsAppService"
                ],
                "controllers": [
                    "PolicyTypeController",
                    "PremiumTypeController",
                    "FuelTypeController",
                    "MarketingWhatsAppController"
                ],
                "models": []
            },
            "component_count": 12
        }
    ]
}